<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-15T22:47:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그 입니다.</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">[Mac] 맥북에게 5000번 포트를 뺏겼을 때 해결방법</title><link href="http://localhost:4000/issue/post21/" rel="alternate" type="text/html" title="[Mac] 맥북에게 5000번 포트를 뺏겼을 때 해결방법" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/issue/post21</id><content type="html" xml:base="http://localhost:4000/issue/post21/"><![CDATA[<h3 id="문제">문제</h3>

<p>5000번 포트를 사용하려는데 계속 403에러가 발생합니다. 5000번을 쓰고싶어서 kill -9로 죽이려고 했는데 계속 살아납니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lime@laim-ui-MacBookAir ~ % lsof <span class="nt">-i</span> :5000
COMMAND     PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
ControlCe 10422 lime   29u  IPv4 0x35b417c98db2da79      0t0  TCP <span class="k">*</span>:commplex-main <span class="o">(</span>LISTEN<span class="o">)</span>
ControlCe 10422 lime   30u  IPv6 0x35b417d328e92061      0t0  TCP <span class="k">*</span>:commplex-main <span class="o">(</span>LISTEN<span class="o">)</span>
</code></pre></div></div>

<p>대체 왜 그런가 알아보니 <code class="language-plaintext highlighter-rouge">ControlCenter</code>라는 자체프로그램이 5000번 포트를 잡아먹고 있는 것이었는데요. 좀 더 자세히 살펴보니 MacOS Monterey에서 <code class="language-plaintext highlighter-rouge">AirPlay 수신모드</code> 기능이 해당 포트를 사용하기 때문이었습니다.</p>

<h3 id="해결하기">해결하기</h3>

<p>Mac에서 5000번 포트를 사용하고 싶다면 <code class="language-plaintext highlighter-rouge">AirPlay 수신모드</code> 를 해제하는 간단한 방법으로 문제를 해결할 수 있습니다.</p>

<ul>
  <li><strong>시스템 환경설정 - 공유 - AirPlay 수신 모드</strong></li>
</ul>

<p><img width="654" alt="image" src="https://user-images.githubusercontent.com/95404736/184541821-01863f4a-7b5b-4323-8677-d558717f9429.png" /></p>

<p>위와 같이 체크가 되어 있다면 그냥 체크를 해제해주기만 하면 됩니다. 정말 간단합니다.</p>

<p>다만 5000번 포트를 기본으로 사용하는 분들이 분명 많을 것 같은데 왜 애플에서 기본으로 5000번을 잡아먹게 한 건지는 당최 이해할 수가 없네요 🤣</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="port" /><category term="AirPlay" /><category term="5000" /><summary type="html"><![CDATA[AirPlay 수신모드에게 뺏긴 5000번 포트..]]></summary></entry><entry><title type="html">[Mac] 사용중인 포트 kill 하는법</title><link href="http://localhost:4000/issue/post20/" rel="alternate" type="text/html" title="[Mac] 사용중인 포트 kill 하는법" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/issue/post20</id><content type="html" xml:base="http://localhost:4000/issue/post20/"><![CDATA[<h3 id="사용중-포트-찾기">사용중 포트 찾기</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsof <span class="nt">-i</span> :[포트번호]
</code></pre></div></div>

<p>ex)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lime@laim-ui-MacBookAir ~ % lsof <span class="nt">-i</span> :3000
COMMAND     PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
node      13736 lime   31u  IPv4 0x35b417c98f796509      0t0  TCP localhost:hbci-&gt;localhost:62414 <span class="o">(</span>ESTABLISHED<span class="o">)</span>
</code></pre></div></div>

<h3 id="kill-하기">kill 하기</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">kill</span> <span class="nt">-9</span>
</code></pre></div></div>

<p>ex)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">kill</span> <span class="nt">-9</span> 13736
</code></pre></div></div>

<p>위와 같이 해당 포트번호 PID 를 찾은 후 kill 명령어로 포트를 간단하게 죽일 수 있습니다.</p>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://stackoverflow.com/questions/3855127/find-and-kill-process-locking-port-3000-on-mac">https://stackoverflow.com/questions/3855127/find-and-kill-process-locking-port-3000-on-mac</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="port" /><category term="lsof" /><category term="kill" /><category term="mac" /><summary type="html"><![CDATA[포트 죽이기!!]]></summary></entry><entry><title type="html">Antd Table 컴포넌트 column render</title><link href="http://localhost:4000/web/post22/" rel="alternate" type="text/html" title="Antd Table 컴포넌트 column render" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/web/post22</id><content type="html" xml:base="http://localhost:4000/web/post22/"><![CDATA[<h3 id="antd-table-column-render">AntD Table column render</h3>

<p>AntD를 사용하면서 multi line으로 데이터를 표시하거나, 조건에 맞게 데이터를 표시하는 경우 등 렌더링이 필요한 경우에 render 옵션을 활용하면 쉽게 원하는대로 표현할 수 있습니다.</p>

<h3 id="render-옵션">render 옵션</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// render 옵션은 Array.map()처럼 작동합니다.</span>
<span class="nx">render</span><span class="p">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="c1">// text: name의 data [String]</span>
<span class="c1">// row: 하나의 row data [Object]</span>
<span class="c1">// index: row index [Number]</span>
</code></pre></div></div>

<h3 id="사용하기">사용하기</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">월</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">month</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">month</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// render: (text) =&gt; &lt;a&gt;{text}&lt;/a&gt;,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">전력 소비량</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">energy1</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">energy1</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">권장 소비량 대비 초과 %</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">percent</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">percent</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">render</span><span class="p">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;&gt;</span>
          <span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">style</span><span class="p">=&gt;</span><span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span><span class="si">}</span>%<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
          <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">style</span><span class="p">=&gt;</span><span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span><span class="si">}</span>%<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
          <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>
      <span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">];</span>
</code></pre></div></div>

<h3 id="결과">결과</h3>

<p><img width="664" alt="image" src="https://user-images.githubusercontent.com/95404736/184610941-2f59da62-1dcd-461d-8da2-e8e66c40addd.png" /></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="웹개발" /><category term="antd" /><category term="ant design" /><summary type="html"><![CDATA[앤트디자인 테이블 컴포넌트 사용]]></summary></entry><entry><title type="html">Sequelize - 데이터타입</title><link href="http://localhost:4000/sequelize/post19/" rel="alternate" type="text/html" title="Sequelize - 데이터타입" /><published>2022-08-09T00:00:00+09:00</published><updated>2022-08-09T00:00:00+09:00</updated><id>http://localhost:4000/sequelize/post19</id><content type="html" xml:base="http://localhost:4000/sequelize/post19/"><![CDATA[<h3 id="sequelize-datatypes">Sequelize DataTypes</h3>

<p>시퀄라이즈 데이터타입을 정리해보았습니다. 추가로 업데이트 된 목록을 확인하고 싶으시다면 <a href="https://sequelize.org/api/v6/variable/index.html#static-variable-DataTypes" title="sequelize DataTypes :)">여기</a>를 클릭해서 DataTypes를 참고해주시기 바랍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sequelize.STRING                      // VARCHAR(255)
Sequelize.STRING(1234)                // VARCHAR(1234)
Sequelize.STRING.BINARY               // VARCHAR BINARY
Sequelize.TEXT                        // TEXT
Sequelize.TEXT('tiny')                // TINYTEXT
Sequelize.CITEXT                      // CITEXT      PostgreSQL and SQLite only.

Sequelize.INTEGER                     // INTEGER
Sequelize.BIGINT                      // BIGINT
Sequelize.BIGINT(11)                  // BIGINT(11)

Sequelize.FLOAT                       // FLOAT
Sequelize.FLOAT(11)                   // FLOAT(11)
Sequelize.FLOAT(11, 10)               // FLOAT(11,10)

Sequelize.REAL                        // REAL        PostgreSQL only.
Sequelize.REAL(11)                    // REAL(11)    PostgreSQL only.
Sequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.

Sequelize.DOUBLE                      // DOUBLE
Sequelize.DOUBLE(11)                  // DOUBLE(11)
Sequelize.DOUBLE(11, 10)              // DOUBLE(11,10)

Sequelize.DECIMAL                     // DECIMAL
Sequelize.DECIMAL(10, 2)              // DECIMAL(10,2)

Sequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres
Sequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision
Sequelize.DATEONLY                    // DATE without time.
Sequelize.BOOLEAN                     // TINYINT(1)

Sequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'
Sequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.
Sequelize.ARRAY(Sequelize.ENUM)       // Defines an array of ENUM. PostgreSQL only.

Sequelize.JSON                        // JSON column. PostgreSQL, SQLite and MySQL only.
Sequelize.JSONB                       // JSONB column. PostgreSQL only.

Sequelize.BLOB                        // BLOB (bytea for PostgreSQL)
Sequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)

Sequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)

Sequelize.CIDR                        // CIDR datatype for PostgreSQL
Sequelize.INET                        // INET datatype for PostgreSQL
Sequelize.MACADDR                     // MACADDR datatype for PostgreSQL

Sequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.
Sequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.

Sequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.

Sequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY('POINT')           // Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY('POINT', 4326)     // Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.
</code></pre></div></div>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://sequelize.org/api/v6/variable/index.html#static-variable-DataTypes">https://sequelize.org/api/v6/variable/index.html#static-variable-DataTypes</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Sequelize" /><category term="시퀄라이즈" /><category term="Sequelize" /><category term="백엔드" /><category term="backend" /><summary type="html"><![CDATA[Sequelize 데이터타입 정리]]></summary></entry><entry><title type="html">MacOS에서 MongoDB, compass 설치하기</title><link href="http://localhost:4000/mongodb/post18/" rel="alternate" type="text/html" title="MacOS에서 MongoDB, compass 설치하기" /><published>2022-08-03T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><id>http://localhost:4000/mongodb/post18</id><content type="html" xml:base="http://localhost:4000/mongodb/post18/"><![CDATA[<h3 id="몽고디비mongodb란">몽고디비(MongoDB)란?</h3>

<p><a href="https://ilimes.github.io/mongodb/post16/">https://ilimes.github.io/mongodb/post16/</a><br />
위 링크를 참고해주세요 :)</p>

<h3 id="mongodb-설치하기">MongoDB 설치하기</h3>

<ul>
  <li>설치환경 : MacOS(M1), Homebrew를 통해 설치(만약 Homebrew 설치가 되어있지 않은 경우에는 먼저 Homebrew부터 설치해주세요.)</li>
</ul>

<p><br />
<strong>1) 먼저 터미널에 아래의 명령어를 입력해주세요.</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew tap mongodb/brew
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install mongodb-community
</code></pre></div></div>

<p>(arm맥에서 설치하시는 경우 brew install 앞에 arch -arm64를 붙이면 됩니다.)</p>

<p><br />
<strong>2) MongoDB 실행 및 정지 명령어</strong></p>

<p>▼ 실행</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew services start mongodb-community
</code></pre></div></div>

<p>▼ 정지</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew services stop mongodb-community
</code></pre></div></div>

<p>정상적으로 설치 및 실행이 완료되었다면 <code class="language-plaintext highlighter-rouge">http://localhost:27017/</code> 와 같이 몽고디비 기본 포트 주소로 접속하였을 때 아래와 같은 메시지가 나타나게 됩니다.</p>

<p><img width="667" alt="image" src="https://user-images.githubusercontent.com/95404736/182624997-f387e09f-a18c-4071-8b4b-285593741fcc.png" /></p>

<h3 id="rdb-논리적-구조-vs-mongodb-비교">RDB 논리적 구조 vs MongoDB 비교</h3>

<p>RDB와 MongoDB에서의 용어를 비교하는 경우 아래와 같습니다.</p>

<table>
  <thead>
    <tr>
      <th>RDB</th>
      <th>MongoDB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Table</td>
      <td>Collection</td>
    </tr>
    <tr>
      <td>Row</td>
      <td>Document</td>
    </tr>
    <tr>
      <td>Column</td>
      <td>Field</td>
    </tr>
    <tr>
      <td>Primary Key</td>
      <td>Object_Id Field</td>
    </tr>
    <tr>
      <td>Relationship</td>
      <td>Embedded &amp; Link</td>
    </tr>
  </tbody>
</table>

<h3 id="테스트-하기">테스트 하기</h3>

<p>몽고디비를 CLI 기반으로 간단하게 테스트해보도록 하겠습니다. 컬렉션 생성 및 삭제를 해보면서 테스트를 진행해보겠습니다.</p>

<p>일단 가장 먼저 몽고디비가 실행된 상태로 <code class="language-plaintext highlighter-rouge">mongo</code>를 터미널에서 입력해줍니다.<br />
그럼 <code class="language-plaintext highlighter-rouge">&gt;</code> 가 활성화되고 명령어를 입력할 수 있게 됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zsh: command not found: mongo
</code></pre></div></div>

<p>이 과정에서 저는 위와 같은 에러를 마주하게 되었는데요.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install mongodb-community-shell
</code></pre></div></div>

<p>만약 같은 에러가 뜨신다면 위 명령어를 입력하여 간단하게 해결할 수 있구요.<br />
에러가 뜨지 않는다면 바로 테스트를 진행하시면 됩니다.<br />
<br />
몽고디비 데이터베이스 및 컬렉션 관련 문법은 아래와 같습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 데이터베이스 생성
use 데이터베이스명

// 데이터베이스 확인
show dbs;

// 컬렉션 생성
db.createCollection('컬렉션명');

// 컬렉션 확인
show collections;

// 컬렉션 삭제
db.컬렉션명.drop();

// 데이터베이스 삭제
db.dropDatabase()
</code></pre></div></div>

<p>위 문법 대로 테스트를 진행해보았습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; use limedb
switched to db limedb
&gt; show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
&gt; db.createCollection('test')
{ "ok" : 1 }
&gt; show collections
test
&gt; db.test.drop()
true
&gt; db.dropDatabase()
{ "ok" : 1 }
</code></pre></div></div>

<h3 id="mongodb-gui-clientcompass-설치하기">MongoDB GUI Client(compass) 설치하기</h3>

<p><a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p>

<p>compass 설치방법은 아주 간단합니다.<br />
위 사이트에서 MacOS 전용 설치파일을 다운로드 받을 수 있습니다 :)<br />
(따로 버전을 선택 할 필요없이 그대로 다운로드 하면 됩니다.)</p>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://zzang9ha.tistory.com/361">https://zzang9ha.tistory.com/361</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MongoDB" /><category term="몽고디비" /><category term="mongoDB" /><category term="MongoDB" /><category term="데이터베이스" /><category term="mac" /><summary type="html"><![CDATA[맥에서 몽고디비를 설치하는 방법]]></summary></entry><entry><title type="html">작업 효율을 높여주는 피그마(figma) 단축키 모음</title><link href="http://localhost:4000/figma/post17/" rel="alternate" type="text/html" title="작업 효율을 높여주는 피그마(figma) 단축키 모음" /><published>2022-07-27T00:00:00+09:00</published><updated>2022-07-27T00:00:00+09:00</updated><id>http://localhost:4000/figma/post17</id><content type="html" xml:base="http://localhost:4000/figma/post17/"><![CDATA[<p>피그마로 작업 할 때 조금이라도 작업 효율을 높이고 싶다면 단축키를 활용하는 것이 좋습니다. 요즘 피그마 작업을 하면서 단축키를 활용하려고 하는데 자주 사용하지 않으면 자꾸만 까먹게 되더라고요. 이번 포스팅은 제가 다시 보기 위해서 작성하게 된 피그마 단축키 모음입니다 😊</p>

<h3 id="전체-피그마-단축키-보는-법">전체 피그마 단축키 보는 법</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">?</code></li>
</ul>

<h3 id="그리드">그리드</h3>

<ul>
  <li>레이아웃 그리드 보기 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">4</code></li>
</ul>

<h3 id="컴포넌트">컴포넌트</h3>

<ul>
  <li>컴포넌트 생성 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">K</code></li>
  <li>인스턴스 분리 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">B</code></li>
  <li>오토레이아웃 생성 : <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">A</code></li>
  <li>오토레이아웃 제거 : <code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">A</code></li>
  <li>컴포넌트 찾기/삽입 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">B</code></li>
  <li>컴포넌트명 한번에 수정 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">R</code></li>
  <li>만들어 놓은 객체 컴포넌트화 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">G</code></li>
</ul>

<h3 id="정리하기">정리하기</h3>

<ul>
  <li>앞으로 가져오기 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">]</code></li>
  <li>뒤로 보내기 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">[</code></li>
  <li>맨 앞으로 가져오기 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">]</code></li>
  <li>맨 뒤로 보내기 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">[</code></li>
</ul>

<h3 id="모양-변형">모양 변형</h3>

<ul>
  <li>가로로 뒤집기 : <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">V</code></li>
  <li>세로로 뒤집기 : <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">H</code></li>
  <li>아웃라인 스트로크 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">O</code></li>
</ul>

<h3 id="레이어">레이어</h3>

<ul>
  <li>전체화면에서 레이어 선택 : <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Alt</code> 누른 상태에서 객체 클릭</li>
  <li>모든 레이어 닫기 : <code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">L</code></li>
</ul>

<h3 id="확대-및-축소">확대 및 축소</h3>

<ul>
  <li>화면에 캔버스 핏 : <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">1</code></li>
  <li>선택한 개체 확대 : <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">2</code></li>
  <li>배율 100%로 맞추기 : <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">0</code></li>
  <li>확대 : <code class="language-plaintext highlighter-rouge">+</code> 또는 <code class="language-plaintext highlighter-rouge">Z</code>를 누른 채 클릭</li>
  <li>축소 : <code class="language-plaintext highlighter-rouge">-</code> 또는 <code class="language-plaintext highlighter-rouge">Z</code>와 <code class="language-plaintext highlighter-rouge">Alt</code>키를 누른 채 클릭</li>
</ul>

<h3 id="불투명도-설정">불투명도 설정</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">0</code> ~ <code class="language-plaintext highlighter-rouge">9</code> 숫자키
    <ul>
      <li>특정 요소를 선택한 상태에서 숫자키를 사용하면 빠르게 불투명도 설정을 할 수 있습니다.<br />
보다 세밀하게 조정하고 싶다면 두 숫자를 연속으로 빠르게 입력하면 됩니다.</li>
    </ul>
  </li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Figma" /><category term="피그마" /><category term="figma" /><category term="디자인" /><category term="피그마단축키" /><category term="design" /><summary type="html"><![CDATA[알아두면 좋은 피그마 단축키 모음 입니다 :)]]></summary></entry><entry><title type="html">MongoDB란?</title><link href="http://localhost:4000/mongodb/post16/" rel="alternate" type="text/html" title="MongoDB란?" /><published>2022-07-26T00:00:00+09:00</published><updated>2022-07-26T00:00:00+09:00</updated><id>http://localhost:4000/mongodb/post16</id><content type="html" xml:base="http://localhost:4000/mongodb/post16/"><![CDATA[<h2 id="mongodb란">MongoDB란?</h2>

<p><code class="language-plaintext highlighter-rouge">MongoDB</code>란 데이터를 저장하는 데이터베이스 시스템의 한 종류로, 전통적인 테이블-관계 기반의 RDBMS가 아닌 도큐먼트 지향 NoSQL 데이터베이스 시스템입니다.</p>

<p><img width="580" alt="image" src="https://user-images.githubusercontent.com/95404736/181020729-0b97ae8d-31e8-4ef0-843e-ba05d84a30a0.png" /></p>

<h2 id="mongodb의-특징">MongoDB의 특징</h2>

<ul>
  <li>
    <h3 id="동적-스키마">동적 스키마</h3>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">MongoDB</code>는 테이블 구조가 고정되어 있는 형태(정적 스키마)가 아니라 JSON 형태의 동적 스키마형 문서를 사용합니다. 몽고디비에서는 그것을 Binary JSON(JavaScript Object Notaion)이라고 부르며, 줄여서 <code class="language-plaintext highlighter-rouge">BSON</code> 이라고 부르기도 합니다.</p>

<ul>
  <li>
    <h3 id="키-값의-집합-문서">키-값의 집합 문서</h3>
  </li>
</ul>

<p>앞서 작성한 특징과 비슷한데, 몽고 DB의 문서는 키-값의 집합으로 되어 있기 때문에 자바스크립트의 객체 코드와도 비슷한 형태로 되어 있습니다. 그래서 들어가는 데이터에 따라서 구조가 변경됩니다.</p>

<h2 id="mongodb의-장점">MongoDB의 장점</h2>

<ul>
  <li>
    <h3 id="퍼포먼스가-뛰어납니다">퍼포먼스가 뛰어납니다.</h3>

    <ul>
      <li>기본적으로 읽기 및 쓰기 성능이 뛰어나기 때문에 많은 트래픽을 감당할 때 사용해도 퍼포먼스가 뛰어납니다. 실제로 RDB보다 수십배는 빠른 성능을 발휘한다고 합니다.</li>
    </ul>
  </li>
  <li>
    <h3 id="개발이-편리합니다">개발이 편리합니다.</h3>
    <ul>
      <li>JSON 형태로 저장이 가능하기 때문에 직관적입니다.</li>
    </ul>
  </li>
</ul>

<h2 id="mongodb의-단점">MongoDB의 단점</h2>

<ul>
  <li>
    <h3 id="조인이-없습니다">조인이 없습니다.</h3>

    <ul>
      <li>조인이 없기 때문에 데이터 구조화를 할 필요가 있습니다. <code class="language-plaintext highlighter-rouge">(MongoDB 3.2 버전 부터 보조적인 JOIN 기능으로 $lookup을 지원하기는 합니다.)</code> 외래키의 개념이 없으며 데이터 구조의 동적인 특성 때문에 몽고 DB의 데이터 모델링은 <code class="language-plaintext highlighter-rouge">역정규화(Denormalization)</code>로 흐르곤 합니다.</li>
    </ul>
  </li>
  <li>
    <h3 id="메모리에-의존적입니다">메모리에 의존적입니다.</h3>

    <ul>
      <li>데이터 갱신 시 바로 디스크에 쓰는 것이 아니라 논리적으로 메모리에 쓰고나서 일정 주기에 따라서 비동기식으로 쓰기 때문에 메모리에 의존적이며 때로는 데이터가 유실 될 가능성이 존재하기도 합니다. 메모리에 의존적이기 때문에 메모리 크기가 성능을 좌우합니다.</li>
    </ul>
  </li>
</ul>

<h2 id="mongodb는-언제-쓰는-것이-좋을까">MongoDB는 언제 쓰는 것이 좋을까?</h2>

<p>Humongous(거대한) Database를 줄인 MongoDB라는 이름에서도 알 수 있듯이 MongoDB는 방대한 데이터 읽기가 필요한 경우에 사용하기 적합합니다. 로그성 데이터를 저장하는 경우, null 필드가 많이 존재하는 경우, 압도적인 퍼포먼스가 필요한 경우 등에 사용하기 좋습니다.</p>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 MongoDB의 특징, 장단점 등 관련 정보를 공부하였습니다 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MongoDB" /><category term="backend" /><category term="mongoDB" /><category term="몽고디비" /><category term="디비" /><category term="noSQL" /><summary type="html"><![CDATA[JSON과 같은 문서를 사용하여 대량의 데이터를 읽기 좋은 NoSQL 데이터베이스 MongoDB]]></summary></entry><entry><title type="html">POSTMAN이란?</title><link href="http://localhost:4000/web/post15/" rel="alternate" type="text/html" title="POSTMAN이란?" /><published>2022-07-18T00:00:00+09:00</published><updated>2022-07-18T00:00:00+09:00</updated><id>http://localhost:4000/web/post15</id><content type="html" xml:base="http://localhost:4000/web/post15/"><![CDATA[<h2 id="postman이란">POSTMAN이란?</h2>

<p><code class="language-plaintext highlighter-rouge">POSTMAN</code>은 API 개발을 보다 빠르고 쉽게 구현할 수 있도록 도와주며, 개발된 API를 테스트하여 문서화 또는 공유할 수 있게 해줍니다.</p>

<h2 id="postman을-사용하는-이유">POSTMAN을 사용하는 이유</h2>

<p><code class="language-plaintext highlighter-rouge">POSTMAN</code>을 사용하는 이유는 프론트엔드를 배제하고, 서버 프로그램이 들어온 API 요청에 대해서 제대로 동작하는지 확인하기 위함입니다. RESTful API 를 구현하다보면 특정 url에 파라미터나 헤더 등을 담아서 request를 보내는 테스트를 진행하게 되는데, 엄청나게 많이 반복되다보면 짜증이 날 수도 있습니다.</p>

<h2 id="restful-api의-개념">RESTful API의 개념</h2>

<p><code class="language-plaintext highlighter-rouge">RESTful API</code>란 HTTP URI(Uniform Resource Identifier)을 통하여 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통하여 해당 자원에 대한 CRUD를 적용하는 것을 의미합니다.</p>

<h2 id="postman-설치하기">POSTMAN 설치하기</h2>

<p><a href="https://www.postman.com/">https://www.postman.com/</a></p>

<p>POSTMAN을 설치하기 위해서는 위 주소로 이동하여 해당 운영체제에 맞는 버튼을 클릭하면 됩니다. 꽤나 간단하게 설치가 완료됩니다. 계정을 보유하고 있는 경우에는 요청 히스토리, 테스트 환경 등이 저장되어 있으니 그대로 사용할 수 있습니다.</p>

<h2 id="postman-장점">POSTMAN 장점</h2>

<ul>
  <li>툴이 꽤나 가볍다</li>
  <li>협업 시 팀원이 만든 url을 확인할 때 편하다</li>
  <li>RESTful API를 표현할 수 있다.</li>
</ul>

<h3 id="참고-사이트">참고 사이트</h3>

<p><a href="https://incheol-jung.gitbook.io/docs/q-and-a/infra/2018-01-03-how-to-use-postman">https://incheol-jung.gitbook.io/docs/q-and-a/infra/2018-01-03-how-to-use-postman</a></p>

<h2 id="today-i-learned">Today I Learned</h2>

<p>Postman을 사용하여 API 테스트를 할 수 있다는 것을 알게되었고, 번거로움을 해소해주는 아주 유용한 개발 툴이라는 생각을 하게 되었습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="API" /><category term="postman" /><category term="포스트맨" /><category term="개발" /><category term="restapi" /><summary type="html"><![CDATA[API 개발을 보다 빠르고 쉽게 구현 할 수 있도록 도와주는 POSTMAN]]></summary></entry><entry><title type="html">리액트 Hooks : useMemo()</title><link href="http://localhost:4000/react/post14/" rel="alternate" type="text/html" title="리액트 Hooks : useMemo()" /><published>2022-07-17T00:00:00+09:00</published><updated>2022-07-17T00:00:00+09:00</updated><id>http://localhost:4000/react/post14</id><content type="html" xml:base="http://localhost:4000/react/post14/"><![CDATA[<h2 id="memoization-이란">Memoization 이란?</h2>

<p><code class="language-plaintext highlighter-rouge">Memoization</code>은 프로그래밍 기법 중 하나로 기존에 수행한 연산의 결과값을 메모리에 저장해놓고 필요할 때 재사용하여 계산의 반복수행을 하지 않는 것입니다. 이런 기법을 사용하게 되면 중복 연산을 피할 수 있기 때문에 프로그램 실행 속도가 빨라지게 됩니다.</p>

<h2 id="usememo-란">useMemo() 란?</h2>

<p>리액트에서 함수형 컴포넌트는 <code class="language-plaintext highlighter-rouge">렌더링</code> -&gt; <code class="language-plaintext highlighter-rouge">Component 함수 호출</code> -&gt; <code class="language-plaintext highlighter-rouge">모든 내부 변수 초기화</code>의 순서를 거치게 됩니다. 이 때 무거운 연산을 하는 어떤 함수를 리렌더링이 될 때 마다 반복적으로 호출하게 된다면 효율성이 굉장히 떨어질 수 있는데요. 리액트에서 useMemo를 사용하면 <code class="language-plaintext highlighter-rouge">렌더링</code> -&gt; <code class="language-plaintext highlighter-rouge">Component 함수 호출</code> -&gt; <code class="language-plaintext highlighter-rouge">Memoize된 함수 재사용</code>의 순서를 거치게 됩니다. 이는 처음 계산된 결과값이 메모리에 저장되어서 컴포넌트가 리렌더링 될 때 계산된 결과값을 메모리에서 꺼내와서 재사용할 수 있는 것으로, 불필요한 연산을 없애고 성능을 더욱 최적화 할 수 있게 하는 것입니다. useMemo를 사용하게 되면 Memoization용 메모리가 필요하기 때문에 남용하는 것은 좋지 않습니다.</p>

<h2 id="usememo-사용-방법">useMemo 사용 방법</h2>

<ul>
  <li>import</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useMemo</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>리액트에서 useMemo를 사용하기 위해서는 가장 먼저 위와 같이 react에서 useMemo를 import 해야합니다.</p>

<ul>
  <li>기본 형태</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 첫 번째 인자 콜백함수</span>
<span class="c1">// 두 번째 인자 의존성배열</span>
<span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">();</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">b</span><span class="p">]);</span>
</code></pre></div></div>

<p>useMemo의 기본 형태는 위와 같습니다.<br />
첫 번째 인자로는 콜백함수를, 두 번째로 인자로는 의존성배열을 받는데요. 두 번째 인자로 들어가는 배열 요소 값이 업데이트 될 때만 콜백함수를 다시 호출해서 연산하고, 값이 업데이트 되지 않으면 이전에 연산했던 값을 재사용하게 됩니다.</p>

<ul>
  <li>useMemo를 사용하지 않았을 때</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Practice</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">list</span><span class="p">,</span> <span class="nx">setList</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">setNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">calculate</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">계산중 입니다!</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">onChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setNumber</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onInsert</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">nextList</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">number</span><span class="p">));</span>
    <span class="nx">setList</span><span class="p">(</span><span class="nx">nextList</span><span class="p">);</span>
    <span class="nx">setNumber</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">number</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onChange</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onInsert</span><span class="si">}</span><span class="p">&gt;</span>등록<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">list</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
          <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">index</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">))</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>합계 :<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span> <span class="si">{</span><span class="nx">calculate</span><span class="p">()</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Practice</span><span class="p">;</span>
</code></pre></div></div>

<p>위 코드는 useMemo를 사용하지 않고 만든 코드입니다. 이런 경우에는 최초, 글자 입력 시, 버튼 클릭 시에 모두 “계산중 입니다!” 라는 메시지가 콘솔에 찍히게 됩니다.</p>

<ul>
  <li>useMemo를 사용했을 때</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useMemo</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Practice</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">list</span><span class="p">,</span> <span class="nx">setList</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">setNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">calculate</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">계산중 입니다!</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">list</span><span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">onChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setNumber</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onInsert</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">nextList</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">number</span><span class="p">));</span>
    <span class="nx">setList</span><span class="p">(</span><span class="nx">nextList</span><span class="p">);</span>
    <span class="nx">setNumber</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">number</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onChange</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onInsert</span><span class="si">}</span><span class="p">&gt;</span>등록<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">list</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
          <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">index</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">))</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>합계 :<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span> <span class="si">{</span><span class="nx">calculate</span><span class="si">}</span>
        <span class="si">{</span><span class="cm">/* 여기서 calculate는 useMemo를 사용했기 때문에 값을 반환합니다 */</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Practice</span><span class="p">;</span>
</code></pre></div></div>

<p>위와 같이 useMemo를 사용한 경우에는 list가 업데이트 될 때만 렌더링하게 됩니다.</p>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 리액트 Hooks 중에서 <code class="language-plaintext highlighter-rouge">useMemo</code>에 대해 공부했습니다. <code class="language-plaintext highlighter-rouge">useMemo</code>를 남용하면 메모리가 낭비되기도 하고, 평소 사용환경에서는 <code class="language-plaintext highlighter-rouge">useEffect</code>를 사용하여 비동기로 처리하는 경우가 많을 듯 하지만 <code class="language-plaintext highlighter-rouge">useMemo</code>는 알아놓으면 좋은 Hooks인 것 같습니다. 다음 번에는 <code class="language-plaintext highlighter-rouge">useMemo</code>와 유사한 <code class="language-plaintext highlighter-rouge">useCallback</code>에 대해 공부해보고 차이점은 무엇인지 알아봐야겠습니다 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="useMemo" /><category term="react" /><category term="Hooks" /><category term="리액트" /><category term="Memoization" /><summary type="html"><![CDATA[성능 최적화를 위한 useMemo 사용법]]></summary></entry><entry><title type="html">Axios 알아보기(특징, 설치방법 문법 등)</title><link href="http://localhost:4000/nodejs/post13/" rel="alternate" type="text/html" title="Axios 알아보기(특징, 설치방법 문법 등)" /><published>2022-07-14T00:00:00+09:00</published><updated>2022-07-14T00:00:00+09:00</updated><id>http://localhost:4000/nodejs/post13</id><content type="html" xml:base="http://localhost:4000/nodejs/post13/"><![CDATA[<h2 id="axios란">Axios란?</h2>

<p>공식 문서에도 적혀있듯이 Axios는 <strong>Node.js와 브라우저를 위한 Promise 기반 HTTP 클라이언트</strong> 입니다. JavaScript에서 클라이언트와 서버 간 데이터를 주고받기 위해서 사용하는 비동기 HTTP 통신 방법 중에서는 Axios 뿐만 아니라 Ajax, Fetch 등이 있는데요. 제가 앞서 사용해보았던 Ajax는 보통 jQuery를 사용하여 보다 쉽게 요청을 처리 할 수 있지만 Promise 기반의 통신 기술이 아니었습니다. Axios 는 Promise(ES6) 기반 HTTP 통신 라이브러리이며 크로스 브라우징 최적화로 브라우저간 호환성이 뛰어난데요. 설치가 필요하다는 점만 빼면 Fetch 대비 편의성도 좋아서 통상적으로 React나 Vue.js와 같은 프론트 프레임워크를 사용할때는 Axios를 주로 사용합니다.</p>

<h2 id="axios-vs-fetch">Axios vs Fetch</h2>

<p>보통 자바스크립트에서는 원래 Fetch를 주로 사용했다고 하는데, 아무래도 built-in 라이브러리 특성상 기능면에서 Axios대비 부족함이 있어서 요즘은 Axios의 선호도가 더 높다고 합니다.</p>

<table>
  <thead>
    <tr>
      <th>Axios</th>
      <th>Fetch</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>써드파티 라이브러리로 설치가 필요</td>
      <td>현대 브라우저에 빌트인이라 설치 필요 없음</td>
    </tr>
    <tr>
      <td>XSRF 보호를 해준다</td>
      <td>별도 보호 없음</td>
    </tr>
    <tr>
      <td>data 속성을 사용</td>
      <td>body 속성을 사용</td>
    </tr>
    <tr>
      <td>data는 object를 포함한다</td>
      <td>body는 문자열화 되어있다</td>
    </tr>
    <tr>
      <td>status가 200이고 statusText가 ‘OK’이면 성공이다</td>
      <td>응답객체가 ok 속성을 포함하면 성공이다</td>
    </tr>
    <tr>
      <td>자동으로 JSON데이터 형식으로 변환된다</td>
      <td>.json()메서드를 사용해야 한다.</td>
    </tr>
    <tr>
      <td>요청을 취소할 수 있고 타임아웃을 걸 수 있다.</td>
      <td>해당 기능 존재 하지않음</td>
    </tr>
    <tr>
      <td>HTTP 요청을 가로챌수 있음</td>
      <td>기본적으로 제공하지 않음</td>
    </tr>
    <tr>
      <td>download진행에 대해 기본적인 지원을 함</td>
      <td>지원하지 않음</td>
    </tr>
    <tr>
      <td>좀더 많은 브라우저에 지원됨</td>
      <td>Chrome 42+, Firefox 39+, Edge 14+, and Safari 10.1+이상에 지원</td>
    </tr>
  </tbody>
</table>

<h2 id="axios-설치-방법">Axios 설치 방법</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install axios
</code></pre></div></div>

<p>Axios는 위와 같이 npm으로 간단하게 설치할 수 있습니다.</p>

<h2 id="axios-문법">Axios 문법</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">axios</span><span class="p">({</span>
  <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 통신할 웹문서</span>
  <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 통신 방식</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="c1">// 보낼 데이터</span>
    <span class="na">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="axios-요청request-파라미터-옵션">Axios 요청(request) 파라미터 옵션</h2>

<p>자주 사용하는 옵션은 상단에 표시 및 위치하고 있습니다.<br />
대부분의 내용은 ‘인파_‘님 블로그(<a href="https://inpa.tistory.com/entry/AXIOS-%F0%9F%93%9A-%EC%84%A4%EC%B9%98-%EC%82%AC%EC%9A%A9">https://inpa.tistory.com/entry/AXIOS-%F0%9F%93%9A-%EC%84%A4%EC%B9%98-%EC%82%AC%EC%9A%A9</a>)에서 가져왔습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">method</code> : 요청 방식으로 기본값은 get입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">url</code> : 서버 주소</li>
  <li><code class="language-plaintext highlighter-rouge">headers</code> : 요청 헤더</li>
  <li><code class="language-plaintext highlighter-rouge">data</code> : 요청 방식이 ‘PUT’, ‘POST’, ‘PATCH’에 해당하는 경우에 body에 보내는 데이터</li>
  <li><code class="language-plaintext highlighter-rouge">params</code> : URL 파라미터 (?key=value로 요청하는 url get 방식을 객체로 표현 한 것)</li>
  <li><code class="language-plaintext highlighter-rouge">responseType</code> : 서버가 응답해주는 데이터의 타입 지정 (arraybuffer, documetn, json, text, stream, blob)</li>
  <li><code class="language-plaintext highlighter-rouge">withCredentials</code> : cross-site access-control 요청을 허용 유무. 이를 true로 하면 cross-origin으로 쿠키값을 전달 할 수 있습니다.</li>
  <li>baseURL : URL을 상대경로로 쓰는 경우에 URL 맨 앞에 붙는 주소<br />
ex) URL이 /post이고 baseURL이 https://some-domain.com/api/ 이면 https://some-domain.com/api/post 로 요청이 가게 됩니다.</li>
  <li>timeout : 요청 timeout이 발동 되기 전 milliseconds의 시간을 요청합니다. timeout 보다 요청이 길어진다면, 요청은 취소되게 됩니다.</li>
  <li>responseEncoding : 디코딩 응답에 사용하기 위한 인코딩 (utf-8)</li>
  <li>transformRequest : 서버에 전달되기 전에 요청 데이터를 바꿀 수 있습니다.
    <ul>
      <li>요청 방식 ‘PUT’, ‘POST’, ‘PATCH’, ‘DELETE’ 에 해당하는 경우에 이용 가능합니다.</li>
      <li>배열의 마지막 함수는 string 또는 Buffer, 또는 ArrayBuffer를 반환합니다.</li>
      <li>header 객체를 수정 가능합니다.</li>
    </ul>
  </li>
  <li>transformResponse : 응답 데이터가 만들어지기 전에 변환 가능</li>
  <li>auth : HTTP의 기본 인증에 사용합니다. auth를 통해서 HTTP의 기본 인증이 구성이 가능합니다.</li>
  <li>maxContentLength: http 응답 내용의 max 사이즈를 지정하도록 하는 옵션입니다.</li>
  <li>validateStatus : HTTP응답 상태 코드에 대해 promise의 반환 값이 resolve 또는 reject 할지 지정하도록 하는 옵션입니다.</li>
  <li>maxRedirects : node.js에서 사용되는 리다이렉트 최대치를 지정합니다.
httpAgent /  httpsAgent : node.js에서 http나 https를 요청을 할때 사용자 정의 agent를 정의하는 옵션입니다.</li>
  <li>proxy : proxy서버의 hostname과 port를 정의하는 옵션입니다.</li>
  <li>cancelToken : 요청을 취소하는데 사용되어 지는 취소토큰을 명시합니다.</li>
</ul>

<h2 id="axios-응답-스키마">Axios 응답 스키마</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{},</span> <span class="c1">// 서버가 제공한 응답(데이터)</span>
 
  <span class="na">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="c1">// `status`는 서버 응답의 HTTP 상태 코드</span>
  
  <span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span><span class="p">,</span>  <span class="c1">// `statusText`는 서버 응답으로 부터의 HTTP 상태 메시지</span>
 
  <span class="na">headers</span><span class="p">:</span> <span class="p">{},</span>  <span class="c1">// `headers` 서버가 응답 한 헤더는 모든 헤더 이름이 소문자로 제공</span>
 
  <span class="na">config</span><span class="p">:</span> <span class="p">{},</span> <span class="c1">// `config`는 요청에 대해 `axios`에 설정된 구성(config)</span>
 
  <span class="na">request</span><span class="p">:</span> <span class="p">{}</span>
  <span class="c1">// `request`는 응답을 생성한 요청</span>
  <span class="c1">// 브라우저: XMLHttpRequest 인스턴스</span>
  <span class="c1">// Node.js: ClientRequest 인스턴스(리디렉션)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="axios-단축-메소드">Axios 단축 메소드</h2>

<p>axios 를 편리하게 사용할 수 있게하는 메소드입니다. (Ajax에서 <code class="language-plaintext highlighter-rouge">$.get()</code>이나 <code class="language-plaintext highlighter-rouge">$.post()</code> 같은 느낌)</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">axios</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
<span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span> <span class="nx">config</span><span class="p">])</span>
<span class="nx">axios</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span> <span class="nx">config</span><span class="p">])</span>
<span class="nx">axios</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span> <span class="nx">config</span><span class="p">])</span>
<span class="nx">axios</span><span class="p">.</span><span class="nx">options</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span> <span class="nx">config</span><span class="p">])</span>
<span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span> <span class="nx">data</span><span class="p">[,</span> <span class="nx">config</span><span class="p">]])</span>
<span class="nx">axios</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span> <span class="nx">data</span><span class="p">[,</span> <span class="nx">config</span><span class="p">]])</span>
<span class="nx">axios</span><span class="p">.</span><span class="nx">patch</span><span class="p">(</span><span class="nx">url</span><span class="p">[,</span> <span class="nx">data</span><span class="p">[,</span> <span class="nx">config</span><span class="p">]])</span>
</code></pre></div></div>

<h2 id="axios-기본-사용법">Axios 기본 사용법</h2>

<ul>
  <li>기본 사용법</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">)</span>

<span class="c1">// ID로 사용자 요청</span>
<span class="nx">axios</span>
  <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/user?ID=12345</span><span class="dl">'</span><span class="p">)</span>
  <span class="c1">// 응답(성공)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="c1">// 응답(실패)</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="c1">// 응답(항상 실행)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>async와 await을 사용하여 보기 좋아진 코드</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getUser</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/user?ID=12345</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 <code class="language-plaintext highlighter-rouge">Axios</code>에 대해 공부했습니다. 기본적인 사용 방법을 알게 되었고, 빌트인으로 <code class="language-plaintext highlighter-rouge">fetch</code>가 있어도 <code class="language-plaintext highlighter-rouge">Axios</code>가 기능이 다양해서 선호된다는 것도 알게되었습니다. 앞으로 사용하게 될 일이 많을 것 같은데 생각보다 활용하는 방법이 무궁무진 한 것 같아서 잘 정리해놓고 활용해봐야겠습니다 :)</p>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://inpa.tistory.com/entry/AXIOS-%F0%9F%93%9A-%EC%84%A4%EC%B9%98-%EC%82%AC%EC%9A%A9">https://inpa.tistory.com/entry/AXIOS-%F0%9F%93%9A-%EC%84%A4%EC%B9%98-%EC%82%AC%EC%9A%A9</a></li>
  <li><a href="https://axios-http.com/kr/docs/intro">https://axios-http.com/kr/docs/intro</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="NodeJs" /><category term="axios" /><category term="Node.js" /><category term="NodeJS" /><category term="AJAX" /><category term="Promise" /><category term="비동기" /><summary type="html"><![CDATA[HTTP 비동기 통신 라이브러리 - Axios]]></summary></entry></feed>