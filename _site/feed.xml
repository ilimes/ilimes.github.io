<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-17T23:12:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">Git - Stash 사용법</title><link href="http://localhost:4000/git/post52/" rel="alternate" type="text/html" title="Git - Stash 사용법" /><published>2022-11-17T00:00:00+09:00</published><updated>2022-11-17T00:00:00+09:00</updated><id>http://localhost:4000/git/post52</id><content type="html" xml:base="http://localhost:4000/git/post52/"><![CDATA[<h3 id="️-git-stash란">✔️ Git stash란?</h3>

<p>작업을 하다 보면 브랜치를 변경할 일이 생기곤 합니다. 그런데 만약 브랜치를 변경할 때 작업물이 커밋되어 있지 않다면 변경 시 conflict가 일어나게 됩니다.<br />
작업이 마무리 되지 않은 상태에서 commit 하지 않고 브랜치를 이동시키고 싶은 경우 stash를 사용하면 잠시 스택에 저장해놓고 다시 가져오는 등의 작업을 할 수 있습니다.</p>

<h3 id="️-git-stash-사용법">✔️ Git stash 사용법</h3>

<h4 id="git-stash">git stash</h4>

<p>작업 임시 저장, 명령어 사용 시 스택에 새로운 stash가 생성됨</p>

<h4 id="git-stash-list">git stash list</h4>

<p>stash 목록 확인</p>

<h4 id="git-stash-apply">git stash apply</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>git stash apply  // 가장 최근의 stash를 가져오기
git stash apply [stash명]  // 해당 stash명의 stash 가져오기
git stash apply --index  // Staged 상태였던 작업들을 다시 Staged상태로 복원
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="git-stash-drop">git stash drop</h4>

<p>stash 제거</p>

<h4 id="git-stash-pop">git stash pop</h4>

<p>apply + drop 같은 느낌, 적용과 동시에 해당 stash를 제거</p>

<h4 id="git-stash-show--p--git-apply--r">git stash show -p | git apply -R</h4>

<p>stash 잘못 적용한 경우 사용</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>// 가장 최근의 stash를 사용하여 패치를 만들고 거꾸로 적용
git stash show -p | git apply -R 

// stash 이름에 해당하는 stash를 이용하여 거꾸로 적용
git stash show -p [stash 이름] | git apply -R
</pre></td></tr></tbody></table></code></pre></div></div>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="stash" /><category term="깃" /><category term="commit" /><category term="커밋" /><summary type="html"><![CDATA[git stash 사용하여 변경 사항 저장 및 꺼내기]]></summary></entry><entry><title type="html">Webpack 알아보기 &amp;amp; 설치방법</title><link href="http://localhost:4000/web/post53/" rel="alternate" type="text/html" title="Webpack 알아보기 &amp;amp; 설치방법" /><published>2022-11-17T00:00:00+09:00</published><updated>2022-11-17T00:00:00+09:00</updated><id>http://localhost:4000/web/post53</id><content type="html" xml:base="http://localhost:4000/web/post53/"><![CDATA[<h3 id="️-webpack웹팩-이란">✔️ Webpack(웹팩) 이란?</h3>

<p><code class="language-plaintext highlighter-rouge">웹팩</code> 은 오픈 소스 자바스크립트 모듈 번들러로 요즘 프론트엔드 개발에 필수라고 할 수 있는 요소 중 하나인데요. 여러개로 나눠져 있는 파일들을 하나의 js코드로 압축하고 최적화 하는 라이브러리입니다.</p>

<h3 id="️-webpack웹팩-구성요소">✔️ Webpack(웹팩) 구성요소</h3>

<p>웹팩은 Entry, Output, Loaders, Plugins, Mode로 구성되어 있습니다.</p>

<h4 id="entry">Entry</h4>

<ul>
  <li>웹팩이 빌드할 파일의 시작 위치를 나타냅니다.</li>
  <li>entry 지점으로부터 import되어 있는 다른 모듈과 라이브러리의 연관성을 찾습니다.</li>
  <li>entry의 디폴트로 설정된 값은 ./src/index.js 입니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1"> ./src/index.js</span><span class="dl">'</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="output">Output</h4>

<ul>
  <li>웹팩에 의해 생성되는 번들을 내보낼 위치와 파일의 이름을 정합니다.</li>
  <li>output의 기본값은 ./dist/main.js 입니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./path/to/my/entry/file.js</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dist</span><span class="dl">'</span><span class="p">),</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">main.js</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="loaders">Loaders</h4>

<ul>
  <li>loaders를 통해 자바스크립트 파일이 아닌 파일들도 유효한 모듈로 변환해줍니다.</li>
  <li>loaders의 설정은 싱글 모듈에 대한 rules 프로퍼티를 정의해야 하며, rules 프로퍼티는 test와 use를 필수 프로퍼티로 가집니다.</li>
  <li><code class="language-plaintext highlighter-rouge">test</code> 프로퍼티는 변환해야하는 파일들을 식별하는 역할을 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">use</code> 프로퍼티는 변환되어야 하는 파일에 대하여 어떤 로더를 사용해야하는지 설정합니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">my-first-webpack.bundle.js</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">txt$/</span><span class="p">,</span> <span class="na">use</span><span class="p">:</span> <span class="dl">'</span><span class="s1">raw-loader</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="plugins">Plugins</h4>

<ul>
  <li>로더가 파일단위로 처리하는 반면 플러그인은 번들된 결과물을 처리합니다.</li>
  <li>번들된 자바스크립트를 난독화 한다거나 특정 텍스트를 추출하는 용도로 사용할 수 있습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">html-webpack-plugin</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//to access built-in plugins</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">txt$/</span><span class="p">,</span> <span class="na">use</span><span class="p">:</span> <span class="dl">'</span><span class="s1">raw-loader</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span><span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/index.html</span><span class="dl">'</span><span class="p">})</span>
  <span class="p">]</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="mode">Mode</h4>

<ul>
  <li>mode는 웹팩을 세팅함에 있어서 development, production, none 중 하나를 파라미터로 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">production</code> 은 최적화되어 빌드됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">development</code> 는 빠르게 빌드됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">none</code> 은 아무 기능 없이 웹팩으로 빌드됩니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-webpack-설치-방법">✔️ Webpack 설치 방법</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>npm init
npm install -D webpack webpack-cli
npx webpack-cli .src/index.js
</pre></td></tr></tbody></table></code></pre></div></div>

<p>웹팩 설치 방법은 매우 간단합니다. 번들링을 할 디렉토리에 들어가서 위 명렁어를 차례로 입력해주면 됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npx create-react-app [파일명]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>웹팩으로 빌드를 하고 싶은 경우는 위 명령어를 입력해주면 됩니다.</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://medium.com/@woody_dev/js-webpack-1-%EC%9B%B9%ED%8C%A9%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-f29ebca31da4">https://medium.com/@woody_dev/js-webpack-1-%EC%9B%B9%ED%8C%A9%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-f29ebca31da4</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="웹팩" /><category term="Webpack" /><category term="개발" /><category term="Frontend" /><summary type="html"><![CDATA[오픈 소스 자바스크립트 모듈 번들러 Webpack]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (4)</title><link href="http://localhost:4000/uiux/post51/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (4)" /><published>2022-11-15T00:00:00+09:00</published><updated>2022-11-15T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post51</id><content type="html" xml:base="http://localhost:4000/uiux/post51/"><![CDATA[<p>Dashboard<br />
by. <a href="https://dribbble.com/shots/15384601-Ecommerce-Dashboard-UI">Dimo.ui</a></p>

<p><img width="1045" alt="image" src="https://user-images.githubusercontent.com/95404736/201929424-043cda83-f50a-40ff-8278-f58e41ba7fd1.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/15384601-Ecommerce-Dashboard-UI">https://dribbble.com/shots/15384601-Ecommerce-Dashboard-UI</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">[Lv.1] 로또의 최고 순위와 최저 순위</title><link href="http://localhost:4000/codingtest/post50/" rel="alternate" type="text/html" title="[Lv.1] 로또의 최고 순위와 최저 순위" /><published>2022-11-14T00:00:00+09:00</published><updated>2022-11-14T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post50</id><content type="html" xml:base="http://localhost:4000/codingtest/post50/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/77484">https://school.programmers.co.kr/learn/courses/30/lessons/77484</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">lottos</span><span class="p">,</span> <span class="nx">win_nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">zeroCnt</span> <span class="o">=</span> <span class="nx">lottos</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="p">(</span><span class="nx">cur</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">lowCnt</span> <span class="o">=</span> <span class="nx">lottos</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="p">(</span><span class="nx">win_nums</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">cur</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span><span class="p">),</span>
    <span class="mi">0</span>
  <span class="p">);</span>

  <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">lowCnt</span> <span class="o">+</span> <span class="nx">zeroCnt</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">?</span> <span class="mi">6</span> <span class="p">:</span> <span class="mi">7</span> <span class="o">-</span> <span class="p">(</span><span class="nx">lowCnt</span> <span class="o">+</span> <span class="nx">zeroCnt</span><span class="p">),</span>
    <span class="nx">lowCnt</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">?</span> <span class="mi">6</span> <span class="p">:</span> <span class="mi">7</span> <span class="o">-</span> <span class="nx">lowCnt</span><span class="p">,</span>
  <span class="p">];</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>reduce를 활용해보았습니다. 풀고나서 찾아보니 <code class="language-plaintext highlighter-rouge">Array.includes()</code> 대신 <code class="language-plaintext highlighter-rouge">Set.has()</code> 를 사용하면 시간복잡도가 O(n) 에서 O(1)로 줄어든다고 합니다.
위 코드에 적용해서 푼 것은 아니지만, 중복값이 없는 배열은 Set으로 바꾸는 좋은 방법이 있다는 것을 알게되었습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">[Lv.1] 부족한 금액 계산하기</title><link href="http://localhost:4000/codingtest/post49/" rel="alternate" type="text/html" title="[Lv.1] 부족한 금액 계산하기" /><published>2022-11-14T00:00:00+09:00</published><updated>2022-11-14T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post49</id><content type="html" xml:base="http://localhost:4000/codingtest/post49/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/82612">https://school.programmers.co.kr/learn/courses/30/lessons/82612</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">price</span><span class="p">,</span> <span class="nx">money</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">answer</span> <span class="o">+=</span> <span class="nx">price</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">answer</span> <span class="o">&gt;</span> <span class="nx">money</span> <span class="p">?</span> <span class="p">(</span><span class="nx">answer</span> <span class="o">=</span> <span class="nx">answer</span> <span class="o">-</span> <span class="nx">money</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>이용 횟수 만큼 반복문 돌려주고 더한 값 구한 뒤 money와 비교하여 answer값 return</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">[Lv.1] 없는 숫자 더하기</title><link href="http://localhost:4000/codingtest/post48/" rel="alternate" type="text/html" title="[Lv.1] 없는 숫자 더하기" /><published>2022-11-14T00:00:00+09:00</published><updated>2022-11-14T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post48</id><content type="html" xml:base="http://localhost:4000/codingtest/post48/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/86051">https://school.programmers.co.kr/learn/courses/30/lessons/86051</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="nx">answer</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>0부터 9까지 반복하면서 includes로 값 있는지 확인하고 없으면 answer에 더해주었습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">리액트 차트 라이브러리 Recharts 사용법</title><link href="http://localhost:4000/react/post47/" rel="alternate" type="text/html" title="리액트 차트 라이브러리 Recharts 사용법" /><published>2022-11-10T00:00:00+09:00</published><updated>2022-11-10T00:00:00+09:00</updated><id>http://localhost:4000/react/post47</id><content type="html" xml:base="http://localhost:4000/react/post47/"><![CDATA[<h3 id="️-recharts-사용하기">✔️ Recharts 사용하기</h3>

<p>최근 업무를 진행하면서 데이터 시각화용 차트 라이브러리를 고민해보았는데, 디자인도 괜찮고 사용 방법도 간단한 <code class="language-plaintext highlighter-rouge">Recharts</code> 라는 라이브러리를 찾게 되어 최종적으로 해당 라이브러리를 사용하기로 결정하였습니다.</p>

<p>▼ 10 Best React Chart Libraries<br />
<a href="https://openbase.com/categories/js/best-react-chart-libraries">https://openbase.com/categories/js/best-react-chart-libraries</a></p>

<p>위 페이지에서도 알 수 있듯이 Recharts는 실제로 리액트 차트 라이브러브 Best10에 들 정도로 많이들 사용하고 있는 라이브러리입니다. 개인적으로 커스텀 하기도 무난한 듯 하고 애니메이션도 들어가 있어서 마음에 들더라고요.</p>

<h3 id="️-recharts-설치">✔️ Recharts 설치</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm install recharts
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Recharts는 npm으로 간편하게 설치할 수 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/95404736/201092584-f2925abf-d22a-472e-a78f-07d9ee0c58f9.png" alt="image" /></p>

<p>package.json을 확인하여 잘 설치되었는지 확인해줍니다.</p>

<h3 id="️-recharts-사용법">✔️ Recharts 사용법</h3>

<p>차트 예제 : <a href="https://recharts.org/en-US/examples">https://recharts.org/en-US/examples</a></p>

<p>우선 Recharts를 사용하기 위해서는 위 링크에서 원하는 차트예제를 고릅니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>import {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그리고 차트를 사용할 파일 상단에 필요한 것들을 import 해준 다음 원하는대로 차트를 커스텀해주면 됩니다 😊<br />
<br />
문서에 커스텀 관련 설명이 그리 친절하지는 않은 것 같지만 생각보다 커스텀하는것이 그렇게 어렵지는 않은 듯 했습니다.
저는 우선 기본 BarChart를 불러와서 최대인 경우만 다른 색이 나오게 바꿔봤습니다!</p>

<h3 id="️-소스코드">✔️ 소스코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BarChart</span><span class="p">,</span> <span class="nx">Bar</span><span class="p">,</span> <span class="nx">Cell</span><span class="p">,</span> <span class="nx">XAxis</span><span class="p">,</span> <span class="nx">YAxis</span><span class="p">,</span> <span class="nx">CartesianGrid</span><span class="p">,</span> <span class="nx">Tooltip</span><span class="p">,</span> <span class="nx">Legend</span><span class="p">,</span> <span class="nx">Label</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">recharts</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Recharts</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">07:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">08:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">09:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">10:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">74</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">11:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">78</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">12:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">54</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">13:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">14:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">15:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">16:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">36</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">17:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">18:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">19:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">];</span>

<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">consumption</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">renderCustomBarLabel</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">payload</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">value</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">return</span> <span class="p">&lt;</span><span class="nt">text</span> <span class="na">x</span><span class="p">=</span><span class="si">{</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="si">}</span> <span class="na">y</span><span class="p">=</span><span class="si">{</span><span class="nx">y</span><span class="si">}</span> <span class="na">fill</span><span class="p">=</span><span class="s">"#666"</span> <span class="na">textAnchor</span><span class="p">=</span><span class="s">"middle"</span> <span class="na">dy</span><span class="p">=</span><span class="si">{</span><span class="o">-</span><span class="mi">6</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">text</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
    <span class="p">&lt;</span><span class="nc">BarChart</span>
      <span class="na">width</span><span class="p">=</span><span class="si">{</span><span class="mi">630</span><span class="si">}</span>
      <span class="na">height</span><span class="p">=</span><span class="si">{</span><span class="mi">430</span><span class="si">}</span>
      <span class="na">data</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span>
      <span class="na">margin</span><span class="p">=</span>
    <span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">CartesianGrid</span> <span class="na">strokeDasharray</span><span class="p">=</span><span class="s">"5"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">XAxis</span> <span class="na">dataKey</span><span class="p">=</span><span class="s">"time"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">YAxis</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Tooltip</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Legend</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Bar</span> <span class="na">dataKey</span><span class="p">=</span><span class="s">"consumption"</span> <span class="na">radius</span><span class="p">=</span><span class="si">{</span><span class="mi">10</span><span class="si">}</span> <span class="na">label</span><span class="p">=</span><span class="si">{</span><span class="nx">renderCustomBarLabel</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="si">{</span>
         <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">entry</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">Cell</span> <span class="na">fill</span><span class="p">=</span><span class="si">{</span><span class="nx">entry</span><span class="p">.</span><span class="nx">consumption</span> <span class="o">===</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">#3EE092</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">#3A495E</span><span class="dl">'</span><span class="si">}</span> <span class="p">/&gt;</span>
         <span class="p">))</span>
      <span class="si">}</span>
      <span class="p">&lt;/</span><span class="nc">Bar</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">BarChart</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
 <span class="p">);</span>

<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Recharts</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-결과">✔️ 결과</h3>

<p><img src="https://user-images.githubusercontent.com/95404736/201103421-fdd7a77f-e4cc-402b-9f08-cdf93cd9aec3.png" alt="image" /></p>

<p>꽤나 만족스러운 라이브러리인 듯 하여 앞으로 열심히 사용해봐야겠다는 생각이 드네요 :)</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://recharts.org/en-US">https://recharts.org/en-US</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="차트" /><category term="리차트" /><category term="Recharts" /><summary type="html"><![CDATA[React 차트 라이브러리 - Recharts]]></summary></entry><entry><title type="html">Node.js 파일 시스템(fs) 모듈 사용하여 파일로 부터 데이터 읽기</title><link href="http://localhost:4000/nodejs/post45/" rel="alternate" type="text/html" title="Node.js 파일 시스템(fs) 모듈 사용하여 파일로 부터 데이터 읽기" /><published>2022-11-09T00:00:00+09:00</published><updated>2022-11-09T00:00:00+09:00</updated><id>http://localhost:4000/nodejs/post45</id><content type="html" xml:base="http://localhost:4000/nodejs/post45/"><![CDATA[<h3 id="️-nodejs-파일-시스템-모듈로-데이터-읽기">✔️ Node.js 파일 시스템 모듈로 데이터 읽기</h3>

<p>오늘은 파일 시스템 모듈로 데이터를 읽는 방법을 소개해드리도록 하겠습니다. 사용 방법은 매우 간단합니다. fs 모듈을 우선 불러와야하구요. 아래에서 사용 가능한 2가지 메서드를 소개해드리겠습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">//비동기</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">//동기</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">readFile()</code> 메서드를 사용하는 경우는 비동기로 데이터를 읽을 수 있고, <code class="language-plaintext highlighter-rouge">readFileSync()</code> 메서드를 사용하는 경우는 동기로 사용할 수 있습니다.</p>

<p>여기서 주의할 점은 파일 시스템에서 데이터를 읽을 때 반드시 두번째 인자를 <code class="language-plaintext highlighter-rouge">utf8</code>로 명시 해줘야 한다는 것인데요. 만약에 생략하는 경우는 <code class="language-plaintext highlighter-rouge">data</code> 인자로 문자열이 아니라 <code class="language-plaintext highlighter-rouge">buffer</code> 가 넘어오기 때문에 원하는 값이 나오지 않을 수 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="NodeJs" /><category term="노드" /><category term="노드js" /><category term="nodejs" /><category term="fs" /><category term="파일시스템" /><summary type="html"><![CDATA[Node.js File System Module]]></summary></entry><entry><title type="html">[Lv.1] 나머지가 1이 되는 수 찾기</title><link href="http://localhost:4000/codingtest/post46/" rel="alternate" type="text/html" title="[Lv.1] 나머지가 1이 되는 수 찾기" /><published>2022-11-09T00:00:00+09:00</published><updated>2022-11-09T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post46</id><content type="html" xml:base="http://localhost:4000/codingtest/post46/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/87389">https://school.programmers.co.kr/learn/courses/30/lessons/87389</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>단순하게 for 반복문을 사용하여 해결</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">리액트 조건부 렌더링 패턴 및 옵셔널 체이닝</title><link href="http://localhost:4000/react/post44/" rel="alternate" type="text/html" title="리액트 조건부 렌더링 패턴 및 옵셔널 체이닝" /><published>2022-11-03T00:00:00+09:00</published><updated>2022-11-03T00:00:00+09:00</updated><id>http://localhost:4000/react/post44</id><content type="html" xml:base="http://localhost:4000/react/post44/"><![CDATA[<h3 id="️-조건부-렌더링이란">✔️ 조건부 렌더링이란?</h3>

<p>리액트에서는 JSX라는 문법을 사용하고, 조건부 렌더링을 하는 것은 JS에서 if문 등을 사용하여 조건처리를 하듯이 UI 업데이트를 하는 것을 말합니다.</p>

<h3 id="️-조건부-렌더링-패턴">✔️ 조건부 렌더링 패턴</h3>

<p>조건부 렌더링 패턴으로는 <code class="language-plaintext highlighter-rouge">if-else 패턴</code>, <code class="language-plaintext highlighter-rouge">: ? 패턴(삼항연산자)</code>, <code class="language-plaintext highlighter-rouge">&amp;&amp; 패턴</code>, <code class="language-plaintext highlighter-rouge">switch case 패턴</code>, <code class="language-plaintext highlighter-rouge">enum 패턴</code>, <code class="language-plaintext highlighter-rouge">HOC 패턴</code> 등이 있습니다.<br />
<br />
오늘은 이 중에서 <code class="language-plaintext highlighter-rouge">: ? 패턴</code>, <code class="language-plaintext highlighter-rouge">&amp;&amp; 패턴</code> 종류에 대해서 알아보고 <code class="language-plaintext highlighter-rouge">옵셔널 체이닝</code>까지 정리하도록 하겠습니다.</p>

<h3 id="️---패턴삼항연산자">✔️ : ? 패턴(삼항연산자)</h3>

<p>우선 삼항연산자 같은 경우는 아래와 같이 사용합니다.<br />
리액트 공식 문서에서는 이 패턴을 인라인 If-Else 라고 소개하고 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">조건</span> <span class="p">?</span> <span class="nx">참일경우</span> <span class="p">:</span> <span class="nx">거짓일</span> <span class="nx">경우</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️--패턴">✔️ &amp;&amp; 패턴</h3>

<p>조건부 렌더링 &amp;&amp; 패턴 같은 경우는 아래와 같이 사용될 수 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">// 선행 조건 &amp;&amp; 후행 조건</span>
<span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2">LIME</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// 결과 = 'LIME'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>&amp;&amp; 기준으로 앞에 있는 조건이 참이어야 뒤에있는 결과를 그려주게 되는 것입니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">조건1</span> <span class="o">||</span> <span class="nx">조건2</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같은 경우는 참인 경우에 앞을 그려주고 거짓인 경우에 뒤를 그려주게 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">조건1</span> <span class="p">??</span> <span class="nx">조건2</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같은 경우는 nullish-coalescing 라고 하며, 거짓인 경우 중에서도 null이나 undefined일 때 뒤를 그려주게 됩니다.<br />
coalesce는 합치다라는 뜻이고, 이러한 null 병합 연산자는 ES11에서 도입된 문법입니다. 변수에 기본값을 설정할 때 유용하게 사용되는 문법입니다.</p>

<h3 id="️-옵셔널-체이닝optional-chaining">✔️ 옵셔널 체이닝(Optional-Chaining)</h3>

<p>옵셔널 체이닝은 프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근하는 경우에 사용하곤 합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">data</span><span class="p">?.</span><span class="nx">lime</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>앞에 있는 피연산자가 null 또는 undefined 일 때는 undefined를 반환하고, 그렇지 않다면 오른쪽에 있는 프로퍼티 참조를 이어나가게 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">data</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// ''</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>참고) 기존의 &amp;&amp; 을 사용하는 경우에는 위와 같이 나오는 문제점이 있었습니다.</p>

<p>리액트로 개발을 하다보면 조건부 렌더링을 사용할 때가 많은데, 그중에서도 <code class="language-plaintext highlighter-rouge">&amp;&amp;, ||</code> 이나 <code class="language-plaintext highlighter-rouge">옵셔널 체이닝</code>을 자주 사용하게 되는 것 같네요 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="조건부렌더링" /><category term="js" /><category term="자바스크립트조건부렌더링" /><category term="연산자" /><category term="옵셔널체이닝" /><category term="optional-chaining" /><summary type="html"><![CDATA[React Conditional Rendering Pattern & Optional-Chaining]]></summary></entry></feed>