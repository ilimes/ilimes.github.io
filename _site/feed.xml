<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-10T22:31:55+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">리액트 차트 라이브러리 Recharts 사용법</title><link href="http://localhost:4000/react/post47/" rel="alternate" type="text/html" title="리액트 차트 라이브러리 Recharts 사용법" /><published>2022-11-10T00:00:00+09:00</published><updated>2022-11-10T00:00:00+09:00</updated><id>http://localhost:4000/react/post47</id><content type="html" xml:base="http://localhost:4000/react/post47/"><![CDATA[<h3 id="️-recharts-사용하기">✔️ Recharts 사용하기</h3>

<p>최근 업무를 진행하면서 데이터 시각화용 차트 라이브러리를 고민해보았는데, 디자인도 괜찮고 사용 방법도 간단한 <code class="language-plaintext highlighter-rouge">Recharts</code> 라는 라이브러리를 찾게 되어 최종적으로 해당 라이브러리를 사용하기로 결정하였습니다.</p>

<p>▼ 10 Best React Chart Libraries<br />
<a href="https://openbase.com/categories/js/best-react-chart-libraries">https://openbase.com/categories/js/best-react-chart-libraries</a></p>

<p>위 페이지에서도 알 수 있듯이 Recharts는 실제로 리액트 차트 라이브러브 Best10에 들 정도로 많이들 사용하고 있는 라이브러리입니다. 개인적으로 커스텀 하기도 무난한 듯 하고 애니메이션도 들어가 있어서 마음에 들더라고요.</p>

<h3 id="️-recharts-설치">✔️ Recharts 설치</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm install recharts
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Recharts는 npm으로 간편하게 설치할 수 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/95404736/201092584-f2925abf-d22a-472e-a78f-07d9ee0c58f9.png" alt="image" /></p>

<p>package.json을 확인하여 잘 설치되었는지 확인해줍니다.</p>

<h3 id="️-recharts-사용법">✔️ Recharts 사용법</h3>

<p>차트 예제 : <a href="https://recharts.org/en-US/examples">https://recharts.org/en-US/examples</a></p>

<p>우선 Recharts를 사용하기 위해서는 위 링크에서 원하는 차트예제를 고릅니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>import {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그리고 차트를 사용할 파일 상단에 필요한 것들을 import 해준 다음 원하는대로 차트를 커스텀해주면 됩니다 😊<br />
<br />
문서에 커스텀 관련 설명이 그리 친절하지는 않은 것 같지만 생각보다 커스텀하는것이 그렇게 어렵지는 않은 듯 했습니다.
저는 우선 기본 BarChart를 불러와서 최대인 경우만 다른 색이 나오게 바꿔봤습니다!</p>

<h3 id="️-소스코드">✔️ 소스코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BarChart</span><span class="p">,</span> <span class="nx">Bar</span><span class="p">,</span> <span class="nx">Cell</span><span class="p">,</span> <span class="nx">XAxis</span><span class="p">,</span> <span class="nx">YAxis</span><span class="p">,</span> <span class="nx">CartesianGrid</span><span class="p">,</span> <span class="nx">Tooltip</span><span class="p">,</span> <span class="nx">Legend</span><span class="p">,</span> <span class="nx">Label</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">recharts</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Recharts</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">07:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">08:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">09:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">10:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">74</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">11:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">78</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">12:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">54</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">13:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">14:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">15:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">45</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">16:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">36</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">17:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">18:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">time</span><span class="p">:</span> <span class="dl">'</span><span class="s1">19:00</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">consumption</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">];</span>

<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">consumption</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">renderCustomBarLabel</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">payload</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">value</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">return</span> <span class="p">&lt;</span><span class="nt">text</span> <span class="na">x</span><span class="p">=</span><span class="si">{</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="si">}</span> <span class="na">y</span><span class="p">=</span><span class="si">{</span><span class="nx">y</span><span class="si">}</span> <span class="na">fill</span><span class="p">=</span><span class="s">"#666"</span> <span class="na">textAnchor</span><span class="p">=</span><span class="s">"middle"</span> <span class="na">dy</span><span class="p">=</span><span class="si">{</span><span class="o">-</span><span class="mi">6</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">text</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
    <span class="p">&lt;</span><span class="nc">BarChart</span>
      <span class="na">width</span><span class="p">=</span><span class="si">{</span><span class="mi">630</span><span class="si">}</span>
      <span class="na">height</span><span class="p">=</span><span class="si">{</span><span class="mi">430</span><span class="si">}</span>
      <span class="na">data</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span>
      <span class="na">margin</span><span class="p">=</span>
    <span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">CartesianGrid</span> <span class="na">strokeDasharray</span><span class="p">=</span><span class="s">"5"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">XAxis</span> <span class="na">dataKey</span><span class="p">=</span><span class="s">"time"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">YAxis</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Tooltip</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Legend</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Bar</span> <span class="na">dataKey</span><span class="p">=</span><span class="s">"consumption"</span> <span class="na">radius</span><span class="p">=</span><span class="si">{</span><span class="mi">10</span><span class="si">}</span> <span class="na">label</span><span class="p">=</span><span class="si">{</span><span class="nx">renderCustomBarLabel</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="si">{</span>
         <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">entry</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">Cell</span> <span class="na">fill</span><span class="p">=</span><span class="si">{</span><span class="nx">entry</span><span class="p">.</span><span class="nx">consumption</span> <span class="o">===</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">#3EE092</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">#3A495E</span><span class="dl">'</span><span class="si">}</span> <span class="p">/&gt;</span>
         <span class="p">))</span>
      <span class="si">}</span>
      <span class="p">&lt;/</span><span class="nc">Bar</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">BarChart</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
 <span class="p">);</span>

<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Recharts</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-결과">✔️ 결과</h3>

<p><img src="https://user-images.githubusercontent.com/95404736/201103421-fdd7a77f-e4cc-402b-9f08-cdf93cd9aec3.png" alt="image" /></p>

<p>꽤나 만족스러운 라이브러리인 듯 하여 앞으로 열심히 사용해봐야겠다는 생각이 드네요 :)</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://recharts.org/en-US">https://recharts.org/en-US</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="차트" /><category term="리차트" /><category term="Recharts" /><summary type="html"><![CDATA[React 차트 라이브러리 - Recharts]]></summary></entry><entry><title type="html">Node.js 파일 시스템(fs) 모듈 사용하여 파일로 부터 데이터 읽기</title><link href="http://localhost:4000/nodejs/post45/" rel="alternate" type="text/html" title="Node.js 파일 시스템(fs) 모듈 사용하여 파일로 부터 데이터 읽기" /><published>2022-11-09T00:00:00+09:00</published><updated>2022-11-09T00:00:00+09:00</updated><id>http://localhost:4000/nodejs/post45</id><content type="html" xml:base="http://localhost:4000/nodejs/post45/"><![CDATA[<h3 id="️-nodejs-파일-시스템-모듈로-데이터-읽기">✔️ Node.js 파일 시스템 모듈로 데이터 읽기</h3>

<p>오늘은 파일 시스템 모듈로 데이터를 읽는 방법을 소개해드리도록 하겠습니다. 사용 방법은 매우 간단합니다. fs 모듈을 우선 불러와야하구요. 아래에서 사용 가능한 2가지 메서드를 소개해드리겠습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">//비동기</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">//동기</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">readFile()</code> 메서드를 사용하는 경우는 비동기로 데이터를 읽을 수 있고, <code class="language-plaintext highlighter-rouge">readFileSync()</code> 메서드를 사용하는 경우는 동기로 사용할 수 있습니다.</p>

<p>여기서 주의할 점은 파일 시스템에서 데이터를 읽을 때 반드시 두번째 인자를 <code class="language-plaintext highlighter-rouge">utf8</code>로 명시 해줘야 한다는 것인데요. 만약에 생략하는 경우는 <code class="language-plaintext highlighter-rouge">data</code> 인자로 문자열이 아니라 <code class="language-plaintext highlighter-rouge">buffer</code> 가 넘어오기 때문에 원하는 값이 나오지 않을 수 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="NodeJs" /><category term="노드" /><category term="노드js" /><category term="nodejs" /><category term="fs" /><category term="파일시스템" /><summary type="html"><![CDATA[Node.js File System Module]]></summary></entry><entry><title type="html">[Lv.1] 나머지가 1이 되는 수 찾기</title><link href="http://localhost:4000/codingtest/post46/" rel="alternate" type="text/html" title="[Lv.1] 나머지가 1이 되는 수 찾기" /><published>2022-11-09T00:00:00+09:00</published><updated>2022-11-09T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post46</id><content type="html" xml:base="http://localhost:4000/codingtest/post46/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/87389">https://school.programmers.co.kr/learn/courses/30/lessons/87389</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>단순하게 for 반복문을 사용하여 해결</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">리액트 조건부 렌더링 패턴 및 옵셔널 체이닝</title><link href="http://localhost:4000/react/post44/" rel="alternate" type="text/html" title="리액트 조건부 렌더링 패턴 및 옵셔널 체이닝" /><published>2022-11-03T00:00:00+09:00</published><updated>2022-11-03T00:00:00+09:00</updated><id>http://localhost:4000/react/post44</id><content type="html" xml:base="http://localhost:4000/react/post44/"><![CDATA[<h3 id="️-조건부-렌더링이란">✔️ 조건부 렌더링이란?</h3>

<p>리액트에서는 JSX라는 문법을 사용하고, 조건부 렌더링을 하는 것은 JS에서 if문 등을 사용하여 조건처리를 하듯이 UI 업데이트를 하는 것을 말합니다.</p>

<h3 id="️-조건부-렌더링-패턴">✔️ 조건부 렌더링 패턴</h3>

<p>조건부 렌더링 패턴으로는 <code class="language-plaintext highlighter-rouge">if-else 패턴</code>, <code class="language-plaintext highlighter-rouge">: ? 패턴(삼항연산자)</code>, <code class="language-plaintext highlighter-rouge">&amp;&amp; 패턴</code>, <code class="language-plaintext highlighter-rouge">switch case 패턴</code>, <code class="language-plaintext highlighter-rouge">enum 패턴</code>, <code class="language-plaintext highlighter-rouge">HOC 패턴</code> 등이 있습니다.<br />
<br />
오늘은 이 중에서 <code class="language-plaintext highlighter-rouge">: ? 패턴</code>, <code class="language-plaintext highlighter-rouge">&amp;&amp; 패턴</code> 종류에 대해서 알아보고 <code class="language-plaintext highlighter-rouge">옵셔널 체이닝</code>까지 정리하도록 하겠습니다.</p>

<h3 id="️---패턴삼항연산자">✔️ : ? 패턴(삼항연산자)</h3>

<p>우선 삼항연산자 같은 경우는 아래와 같이 사용합니다.<br />
리액트 공식 문서에서는 이 패턴을 인라인 If-Else 라고 소개하고 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">조건</span> <span class="p">?</span> <span class="nx">참일경우</span> <span class="p">:</span> <span class="nx">거짓일</span> <span class="nx">경우</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️--패턴">✔️ &amp;&amp; 패턴</h3>

<p>조건부 렌더링 &amp;&amp; 패턴 같은 경우는 아래와 같이 사용될 수 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">// 선행 조건 &amp;&amp; 후행 조건</span>
<span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2">LIME</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// 결과 = 'LIME'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>&amp;&amp; 기준으로 앞에 있는 조건이 참이어야 뒤에있는 결과를 그려주게 되는 것입니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">조건1</span> <span class="o">||</span> <span class="nx">조건2</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같은 경우는 참인 경우에 앞을 그려주고 거짓인 경우에 뒤를 그려주게 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">조건1</span> <span class="p">??</span> <span class="nx">조건2</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같은 경우는 nullish-coalescing 라고 하며, 거짓인 경우 중에서도 null이나 undefined일 때 뒤를 그려주게 됩니다.<br />
coalesce는 합치다라는 뜻이고, 이러한 null 병합 연산자는 ES11에서 도입된 문법입니다. 변수에 기본값을 설정할 때 유용하게 사용되는 문법입니다.</p>

<h3 id="️-옵셔널-체이닝optional-chaining">✔️ 옵셔널 체이닝(Optional-Chaining)</h3>

<p>옵셔널 체이닝은 프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근하는 경우에 사용하곤 합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">data</span><span class="p">?.</span><span class="nx">lime</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>앞에 있는 피연산자가 null 또는 undefined 일 때는 undefined를 반환하고, 그렇지 않다면 오른쪽에 있는 프로퍼티 참조를 이어나가게 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">data</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// ''</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>참고) 기존의 &amp;&amp; 을 사용하는 경우에는 위와 같이 나오는 문제점이 있었습니다.</p>

<p>리액트로 개발을 하다보면 조건부 렌더링을 사용할 때가 많은데, 그중에서도 <code class="language-plaintext highlighter-rouge">&amp;&amp;, ||</code> 이나 <code class="language-plaintext highlighter-rouge">옵셔널 체이닝</code>을 자주 사용하게 되는 것 같네요 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="조건부렌더링" /><category term="js" /><category term="자바스크립트조건부렌더링" /><category term="연산자" /><category term="옵셔널체이닝" /><category term="optional-chaining" /><summary type="html"><![CDATA[React Conditional Rendering Pattern & Optional-Chaining]]></summary></entry><entry><title type="html">리액트 Redux 기초 개념 정리</title><link href="http://localhost:4000/react/post43/" rel="alternate" type="text/html" title="리액트 Redux 기초 개념 정리" /><published>2022-10-31T00:00:00+09:00</published><updated>2022-10-31T00:00:00+09:00</updated><id>http://localhost:4000/react/post43</id><content type="html" xml:base="http://localhost:4000/react/post43/"><![CDATA[<h3 id="️-redux란">✔️ Redux란?</h3>

<p>리덕스는 리액트에서 많이 사용되는 상태 관리 라이브러리 중 하나입니다. 리덕스를 사용하게 되면 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜 효율적인 관리가 가능하게 됩니다.</p>

<h3 id="️-redux-설치">✔️ Redux 설치</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm i redux react-redux
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-redux-기본개념">✔️ Redux 기본개념</h3>

<p>리덕스는 크게 3가지의 기본 개념이 있습니다.</p>

<blockquote>
  <p>동일한 데이터는 항상 같은 곳에서 가지고 온다.</p>
</blockquote>

<ul>
  <li>이는 곧 Store라는 하나 뿐인 데이터 공간이 있다는 것을 의미합니다. (중앙 상태 관리)</li>
  <li>이러한 점 덕분에 디버깅이 쉬워집니다.</li>
</ul>

<blockquote>
  <p>액션 객체를 통해서만 상태 변경 가능</p>
</blockquote>

<ul>
  <li>기본적으로 상태는 읽기 전용(read-only) 입니다.</li>
  <li>리액트에서 setState 메소드를 활용해야만 상태 변경이 가능하듯이 리덕스에서도 액션이라는 객체로만 상태를 변경할 수 있습니다.</li>
</ul>

<blockquote>
  <p>변경은 순수 함수로만 가능</p>
</blockquote>

<ul>
  <li>리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받습니다.</li>
  <li>파라미터 외의 값에는 의존하면 안됩니다.</li>
  <li>이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환합니다.</li>
  <li>똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 합니다.</li>
</ul>

<h3 id="️-redux-기본용어">✔️ Redux 기본용어</h3>

<p>아래는 Redux에 대해서 기본적으로 알아야 할 용어들입니다.</p>

<h2 id="액션action">액션(Action)</h2>

<ul>
  <li>Store의 상태를 변경하는 용도로 사용</li>
  <li>직접 상태를 변경하기 보다는 <code class="language-plaintext highlighter-rouge">어떤 상태로 변경할 것인지</code> 결정</li>
</ul>

<p>액션을 일종의 주문서 같은 것인데 자바스크립트 객체 형식으로 되어있습니다.</p>

<h3 id="액션의-표현">액션의 표현</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="p">{</span>
   <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ADD_TODO</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
       <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
       <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">라임</span><span class="dl">'</span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>액션은 위와 같이 표현되며 type 필드는 필수로 가지고 있어야 합니다.</p>

<h3 id="액션-생성함수">액션 생성함수</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">addTodo</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ADD_TODO</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">data</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>액션 생성함수는 말그대로 액션 객체를 만들어주는 함수입니다.</p>

<h2 id="리듀서reducer">리듀서(Reducer)</h2>

<ul>
  <li>State를 정의하고 전달받은 액션에 따라 Store의 상태 변경이 이루어집니다.</li>
  <li>실제 Store의 상태 변경은 <code class="language-plaintext highlighter-rouge">Reducer</code> 에서 이루어집니다.</li>
  <li>업데이트 로직을 정의 하는 함수라고도 할 수 있습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">counterReducer</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Check to see if the reducer cares about this action</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">counter/increment</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// If so, make a copy of `state`</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
      <span class="c1">// and update the copy with the new value</span>
      <span class="na">value</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span>
  <span class="c1">// otherwise return the existing state unchanged</span>
  <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="스토어store">스토어(Store)</h2>

<ul>
  <li>액션과 리듀서의 연결지점입니다.</li>
  <li>Store는 dispatch, getState, subscribe 메서드가 담겨있는 일종의 객체일 뿐입니다.</li>
  <li>Redux는 Store를 오직 하나만 가집니다.</li>
</ul>

<h3 id="store-methods">Store Methods</h3>

<ol>
  <li>getState() : 애플리케이션의 현재 state 반환 =&gt; reducer 마지막 반환 값</li>
  <li>dispatch(action) : action을 파라미터로 받고 dispatch를 호출하면 store는 reducer를 실행합니다.</li>
  <li>subscribe(listener) : 변경사항에 대한 리스너 추가, subscribe에 리스너를 전달해주면 액션이 디스패치 될 때마다 전달해준 리스너가 호출됩니다.</li>
  <li>replaceReducer(nextReducer)</li>
</ol>

<h3 id="️-redux는-언제-쓰면-좋을까">✔️ Redux는 언제 쓰면 좋을까?</h3>

<p>해당 내용은 Redux 공식 문서에 나와있습니다 :)</p>

<p><a href="https://redux.js.org/faq/general#when-should-i-use-redux">https://redux.js.org/faq/general#when-should-i-use-redux</a></p>

<ul>
  <li>앱의 여러 위치에서 필요한 많은 양의 상태들이 존재할 때 (전역 상태가 필요하다고 느껴질 때)</li>
  <li>상태들이 자주 업데이트 될 때</li>
  <li>상태를 업데이트 하는 로직이 복잡할 때</li>
  <li>앱이 중간 또는 큰 사이즈의 코드를 갖고 있고 많은 사람들에 의해 코드가 관리될 때</li>
  <li>상태가 업데이트되는 시점을 관찰할 필요가 있을 때</li>
</ul>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<p><a href="https://ko.redux.js.org/introduction/getting-started/">https://ko.redux.js.org/introduction/getting-started/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="리덕스" /><category term="redux" /><category term="react" /><category term="리덕스기초" /><summary type="html"><![CDATA[React redux 기초]]></summary></entry><entry><title type="html">Mac, 맥북 업데이트 후 xcrun: error: invalid active developer path 에러 나는 경우 해결방법</title><link href="http://localhost:4000/issue/post42/" rel="alternate" type="text/html" title="Mac, 맥북 업데이트 후 xcrun: error: invalid active developer path 에러 나는 경우 해결방법" /><published>2022-10-30T00:00:00+09:00</published><updated>2022-10-30T00:00:00+09:00</updated><id>http://localhost:4000/issue/post42</id><content type="html" xml:base="http://localhost:4000/issue/post42/"><![CDATA[<h3 id="️-오류발생">✔️ 오류발생</h3>

<p>최근 macOS를 Ventura로 업그레이드 했는데 개발 관련 도구(이를테면 git)가 <code class="language-plaintext highlighter-rouge">missing xcrun</code> 에러를 내뿜게 되었습니다. 알고보니 아주 간단하게 해결할 수 있는 문제더라고요.<br />
<br />
그래서 오늘은 맥북 사용자 분들께서 해당 오류가 나는 경우에 간단하게 해결할 수 있는 방법을 공유해드리고자 합니다.</p>

<h3 id="️-오류원인">✔️ 오류원인</h3>

<p>이러한 오류가 발생하는 것은 업데이트 과정을 거친 뒤에 CommandLineTools을 인식하지 못했기 때문입니다.</p>

<h3 id="️-해결방법">✔️ 해결방법</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>xcode-select --installs
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 명령어를 입력하여 CommandLineTools를 설치하고 관련 도구들을 실행해보면, 오류 없이 정상적으로 동작하는 걸 확인하실 수 있습니다.</p>

<center>
<img width="509" alt="image" src="https://user-images.githubusercontent.com/95404736/198861719-695569b5-e574-464b-a1e3-176cd47ad178.png" />
</center>

<p><br />
설치 소요시간은 네트워크 환경에 따라 달라질 수 있구요. 저는 대략 2분정도 걸린 것 같네요 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="mac" /><category term="맥북" /><category term="xcrun" /><category term="xcode" /><category term="error" /><category term="에러" /><summary type="html"><![CDATA[xcrun: error: invalid active developer path 에러 해결]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (3)</title><link href="http://localhost:4000/uiux/post41/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (3)" /><published>2022-10-01T00:00:00+09:00</published><updated>2022-10-01T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post41</id><content type="html" xml:base="http://localhost:4000/uiux/post41/"><![CDATA[<p>Dashboard<br />
by. <a href="https://dribbble.com/sajon">Sajon</a></p>

<p><img width="1045" alt="image" src="https://user-images.githubusercontent.com/95404736/193412841-759a7b86-37a7-420f-aab8-59d3d298b4ad.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/15025300-Dashboard">https://dribbble.com/shots/15025300-Dashboard</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">npm과 yarn의 차이는 무엇일까?</title><link href="http://localhost:4000/web/post40/" rel="alternate" type="text/html" title="npm과 yarn의 차이는 무엇일까?" /><published>2022-09-25T00:00:00+09:00</published><updated>2022-09-25T00:00:00+09:00</updated><id>http://localhost:4000/web/post40</id><content type="html" xml:base="http://localhost:4000/web/post40/"><![CDATA[<h3 id="️-npm-yarn">✔️ npm? yarn?</h3>

<p>npm과 yarn은 모두 Node.js 패키지 관리자로, 결론부터 말하면 yarn이 npm에서 부족했던 기능들을 보충해서 출시한 것이라고 할 수 있는데요. 현재는 npm도 계속 개선된 버전이 나와서 사실상 둘의 사용은 취향 차이라고 봐도 무방합니다.</p>

<h4 id="npm">npm</h4>

<p>전 세계적으로 가장 많은 이들이 사용하고 있는 패키지 관리자 입니다. Node.js로 만들어진 모듈을 쉽게 설치 및 관리할 수 있으며 개발자 입장에서는 명령어를 몇 줄 입력하기만 하면 공개된 모듈을 설치할 수 있으니 매번 직접 찾아서 모듈을 설치하는 수고를 덜어줍니다.</p>

<h4 id="yarn">yarn</h4>

<p>2016년 페이스북에서 만든 자바스크립트 패키지 매니저, npm의 단점인 <code class="language-plaintext highlighter-rouge">속도(performance)</code>, <code class="language-plaintext highlighter-rouge">안정성(stability)</code>, <code class="language-plaintext highlighter-rouge">보안성(security)</code>을 보완하여 나온 것입니다.<br />
<br />
👇yarn 관련 문서<br />
<a href="https://engineering.fb.com/2016/10/11/web/yarn-a-new-package-manager-for-javascript/">https://engineering.fb.com/2016/10/11/web/yarn-a-new-package-manager-for-javascript/</a></p>

<h3 id="️-npm과-yarn-차이점">✔️ npm과 yarn 차이점</h3>

<p>앞서 말씀드렸듯이 yarn은 npm보다 보안성이 뛰어납니다. npm은 패키지를 설치할 때 자동으로 코드와 의존성을 실행할 수 있도록 허용하였습니다. 이로 인해 보안에 취약점이 발생하였는데, 현재는 npm도 보안 업데이트를 거듭하며 보안성이 향상되긴 하였습니다.<br />
<br />
그리고 yarn은 npm보다 빠릅니다. 패키지 설치 프로세스를 처리하는 방법이 다르기 때문인데요. npm은 패키지를 한 번에 하나씩 순차적으로 설치하지만, yarn은 다운받은 패키지 데이터를 캐시(cache)에 저장하여 중복 데이터는 다운로드 하지 않고 캐시에 저장된 파일을 활용하구요. 패키지를 설치할 때 병렬로 처리하기 때문에 npm보다 속도가 빠릅니다.</p>

<h3 id="️-npm-명령어">✔️ npm 명령어</h3>

<ul>
  <li>npm init : package.json 생성</li>
  <li>npm install : package.json 파일 및 해당 종속성에 나열된 모든 모듈을 설치</li>
  <li>npm install 패키지명@버전 : 특정 패키지의 특정 버전 설치</li>
  <li>npm install 주소 : 특정 저장소 내 패키지 설치</li>
  <li>npm install 패키지명 -g : 글로벌 설치</li>
  <li>npm uninstall : 패키지 삭제</li>
  <li>npm update : 패키지 업데이트</li>
  <li>npm dedupe : 중복 설치된 패키지 정리</li>
</ul>

<h3 id="️-npm과-yarn-명령어-비교">✔️ npm과 yarn 명령어 비교</h3>

<table>
  <thead>
    <tr>
      <th>명령어</th>
      <th>npm</th>
      <th>yarn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dependencies 설치</td>
      <td>npm install</td>
      <td>yarn</td>
    </tr>
    <tr>
      <td>패키지 설치</td>
      <td>npm install [패키지명]</td>
      <td>yarn add [패키지명]</td>
    </tr>
    <tr>
      <td>dev 패키지 설치</td>
      <td>npm install –save-dev [패키지명]</td>
      <td>yarn add –dev [패키지명]</td>
    </tr>
    <tr>
      <td>글로벌 패키지 설치</td>
      <td>npm install –global [패키지명]</td>
      <td>yarn global add [패키지명]</td>
    </tr>
    <tr>
      <td>패키지 제거</td>
      <td>npm uninstall [패키지명]</td>
      <td>yarn remove [패키지명]</td>
    </tr>
    <tr>
      <td>dev 패키지 제거</td>
      <td>npm uninstall –save-dev [패키지명]</td>
      <td>yarn remove [패키지명]</td>
    </tr>
    <tr>
      <td>글로벌 패키지 제거</td>
      <td>npm uninstall –global [패키지명]</td>
      <td>yarn global remove [패키지명]</td>
    </tr>
    <tr>
      <td>업데이트</td>
      <td>npm update</td>
      <td>yarn upgrade</td>
    </tr>
    <tr>
      <td>패키지 업데이트</td>
      <td>npm update [패키지명]</td>
      <td>yarn upgrade [패키지명]</td>
    </tr>
  </tbody>
</table>

<h3 id="️-yarn-설치-방법">✔️ yarn 설치 방법</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm install yarn --global
</pre></td></tr></tbody></table></code></pre></div></div>
<p>yarn은 위와 같이 npm을 통해서 설치할 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>brew update
brew install yarn
</pre></td></tr></tbody></table></code></pre></div></div>
<p>만약 맥 사용자라면 brew 통해 설치하는 것도 가능합니다.</p>

<h3 id="️-무조건-yarn을-사용하는-것이-좋은걸까">✔️ 무조건 yarn을 사용하는 것이 좋은걸까?</h3>

<p>앞서 말씀드린 내용에 따르면 npm 대신 무조건 yarn이 좋은 것이라고 생각할 수 있는데요. 사실 yarn도 단점은 존재합니다. yarn은 npm보다 디스크 용량을 좀 더 잡아먹는 편이라고 하더라고요. 현재는 npm도 많이 개선되어 속도 측면에서도 yarn과 별반 차이가 없고 아직까지 점유율은 npm이 더욱 높기 때문에 둘 중 어떤 것을 사용할지는 개발자 취향대로 고르면 될 것 같습니다 😊</p>

<h3 id="참고-사이트">참고 사이트</h3>

<p><a href="https://joshua1988.github.io/vue-camp/package-manager/npm-vs-yarn.html#npm%E1%84%80%E1%85%AA-yarn%E1%84%8B%E1%85%B4-%E1%84%8E%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A5%E1%86%B7">https://joshua1988.github.io/vue-camp/package-manager/npm-vs-yarn.html#npm%E1%84%80%E1%85%AA-yarn%E1%84%8B%E1%85%B4-%E1%84%8E%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A5%E1%86%B7</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="npm" /><category term="yarn" /><category term="개발상식" /><summary type="html"><![CDATA[npm vs yarn]]></summary></entry><entry><title type="html">Visual Studio Code(VSCODE) 초기화 및 재설치 하기</title><link href="http://localhost:4000/issue/post39/" rel="alternate" type="text/html" title="Visual Studio Code(VSCODE) 초기화 및 재설치 하기" /><published>2022-09-24T00:00:00+09:00</published><updated>2022-09-24T00:00:00+09:00</updated><id>http://localhost:4000/issue/post39</id><content type="html" xml:base="http://localhost:4000/issue/post39/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p>최근 한글 이름으로 되어있는 사용자 이름을 영어로 바꾸고나서 VSCODE를 사용할 때 내용이 업데이트 되면 이따금씩 오류가 발생하게 되었습니다. 그래서 해결방법을 찾아보던 와중에 가장 쉬운 해결방법은 프로그램을 재설치 하는 것이라고 하여 모든 내용을 초기화 한 뒤에 VSCODE를 재설치하였습니다. (관련 링크 : <a href="https://github.com/microsoft/vscode/issues/102039">https://github.com/microsoft/vscode/issues/102039</a>)</p>

<h3 id="️-삭제-및-재설치">✔️ 삭제 및 재설치</h3>

<h4 id="1-플러그인-삭제">1. 플러그인 삭제</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>c:\user\사용자이름\.vscode 
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 폴더를 삭제해줍니다.</p>

<h4 id="2-설정파일-삭제">2. 설정파일 삭제</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>c:\user\사용자이름\AppData\Roaming\Code
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마찬가지로 위 폴더도 삭제해줍니다. AppData 폴더의 경우는 보이지 않을 수 있는데 숨김 폴더 보기 설정을 해주면 됩니다.</p>

<h4 id="3-제어판에서-visual-studio-code-삭제">3. 제어판에서 Visual Studio Code 삭제</h4>

<p>제어판으로 들어가서 <code class="language-plaintext highlighter-rouge">Microsoft Visual Studio Code (User)</code> 를 찾아 삭제해줍니다.</p>

<h4 id="4-재설치">4. 재설치</h4>

<p>삭제가 완료되었으면 아래 링크로 이동하여 설치파일을 다운로드 받은 뒤 실행시켜 재설치 과정을 진행하면 됩니다.</p>

<p>👇 Visual Studio Code 설치 링크<br />
<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>

<p>이렇게 하면 각종 설정이 초기화 된 상태로 재설치가 완료됩니다 😊</p>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<ul>
  <li><a href="https://rgb-white.tistory.com/13">https://rgb-white.tistory.com/13</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="vscode" /><category term="재설치" /><category term="vscode재설치" /><summary type="html"><![CDATA[VSCODE 완전 초기화 한 후 재설치 하기]]></summary></entry><entry><title type="html">Git - Rebase 알아보기</title><link href="http://localhost:4000/git/post38/" rel="alternate" type="text/html" title="Git - Rebase 알아보기" /><published>2022-09-12T00:00:00+09:00</published><updated>2022-09-12T00:00:00+09:00</updated><id>http://localhost:4000/git/post38</id><content type="html" xml:base="http://localhost:4000/git/post38/"><![CDATA[<h3 id="️-rebase란">✔️ Rebase란?</h3>

<p><code class="language-plaintext highlighter-rouge">rebase</code>는 git에서 브랜치를 합치는 명령어로 실행결과만 놓고보면 <code class="language-plaintext highlighter-rouge">merge</code>와 유사하다고 할 수 있는데요. 두 명렁어의 차이는 커밋 히스토리가 달라진다는 것 입니다.<br />
<br />
<code class="language-plaintext highlighter-rouge">rebase</code>를 사용하면 커밋 순서도 변경할 수 있고 중복 커밋도 하나로 합칠 수 있어 이력 관리를 깔끔하게 할 수 있습니다. <code class="language-plaintext highlighter-rouge">rebase</code>는 말 그대로 기준(base)을 새롭게 설정한다는 뜻으로 이해하면 좋습니다.</p>

<h3 id="️-rebase-명렁어">✔️ Rebase 명렁어</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ git rebase [newbase]
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-rebase-사용하기">✔️ Rebase 사용하기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ git rebase -i HEAD~2
</pre></td></tr></tbody></table></code></pre></div></div>

<p>2개의 커밋 메시지를 합치고 싶은 경우에는 위와 같은 명령어를 사용할 수 있구요. (커밋 로그 축약)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>$ git checkout feature
$ git rebase master
$ git checkout master
$ git merge feature
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 사용하는 경우에는 feature 브랜치로 checkout 한 다음 master 브랜치로 rebase 하고 feature 브랜치를 master로 fast-forward merge 시키는 것입니다.</p>

<h3 id="️-rebase의-장점">✔️ Rebase의 장점</h3>

<p><code class="language-plaintext highlighter-rouge">rebase</code>는 앞서 소개에서 말했듯이 커밋 히스토리를 깔끔하게 할 수 있습니다. 추가로 공유 브랜치에 변경사항을 즉각 반영 할 수도 있는데요. 즉각적으로 변경사항 대응이 필요한 경우에는 <code class="language-plaintext highlighter-rouge">rebase</code>를 사용하는 것이 편리할 수 있습니다.<br />
<br />
➡️ merge는 rebase에 비해서 쉽고 안전하다, 다만 커밋 히스토리가 지저분해진다.</p>

<h3 id="️-rebase-사용-시-주의할-점">✔️ Rebase 사용 시 주의할 점</h3>

<p>아무래도 여러명이 작업하는 브랜치에서 <code class="language-plaintext highlighter-rouge">rebase</code>를 사용하게 되면 다른사람들이 작성한 커밋 히스토리를 바꿔버릴 가능성이 있습니다. 그렇게 되면 다른 사람들이 작업하던 부분이 날라가서 새로 작업해야하는 불상사가 일어날 수도 있겠죠. 그래서 <code class="language-plaintext highlighter-rouge">rebase</code>는 웬만하면 혼자 작업하는 브랜치에서 사용하는 것이 가장 좋고 그런 경우에는 문제될 것이 없습니다. 다만 협업을 하면서 사용하는 경우에는 주의를 기울여 잘 사용해야합니다 :)</p>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<ul>
  <li><a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0">https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0</a></li>
  <li><a href="https://docs.github.com/en/get-started/using-git/using-git-rebase-on-the-command-line">https://docs.github.com/en/get-started/using-git/using-git-rebase-on-the-command-line</a></li>
  <li><a href="https://www.atlassian.com/ko/git/tutorials/rewriting-history/git-rebase">https://www.atlassian.com/ko/git/tutorials/rewriting-history/git-rebase</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="깃" /><category term="rebase" /><category term="git" /><summary type="html"><![CDATA[Git 브랜치 Rebase란?]]></summary></entry></feed>