<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-21T21:30:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">Github Actions를 활용한 CI/CD 구축 (OCI &amp;amp; SSH)</title><link href="http://localhost:4000/devops/post87/" rel="alternate" type="text/html" title="Github Actions를 활용한 CI/CD 구축 (OCI &amp;amp; SSH)" /><published>2024-02-21T00:00:00+09:00</published><updated>2024-02-21T00:00:00+09:00</updated><id>http://localhost:4000/devops/post87</id><content type="html" xml:base="http://localhost:4000/devops/post87/"><![CDATA[<p>오늘은 진행하고 있는 사이드 프로젝트에 Github Actions를 활용하여 CI/CD 구축을 해보았습니다.<br />
CD/CD를 구축할 수 있는 툴은 무료버전 또는 기업용 유료버전으로 나뉘어져 있습니다. 오늘 활용하고자 하는 Github Actions 외에도 종류가 굉장히 다양 (Jenkins, CircleCI, TravisCI 등) 한데, 아무래도 Github Actions가 설치나 큰 세팅 없이 간단히 활용할 수 있어서 괜찮은 듯 싶어 이렇게 시도해보았습니다.</p>

<h3 id="기존-배포-방식">기존 배포 방식</h3>

<p>기존에 Next.js와 Node.js로 만들고 있는 프로젝트는 Oracle Cloud VM에 돌아가고 있고, 배포 자동화 구축이 되어 있지 않아 아래와 같은 절차로 빌드를 진행했습니다.</p>

<ol>
  <li>SSH로 OCI 인스턴스 접속</li>
  <li>폴더별 git pull</li>
  <li>폴더별 npm install 및 build</li>
  <li>배포</li>
</ol>

<p>이러한 과정이 별게 아니라고 생각이 들 수도 있지만, 반복되고 지루한 이런 절차는 개발자의 리소스를 비효율적으로 활용하는 것이라고 할 수 있습니다.</p>

<p>그렇다면 이제 본격적으로 Github Actions를 활용한 CI/CD 구축을 해보도록 하겠습니다.</p>

<h3 id="github-actions를-활용한-cicd-구축">Github Actions를 활용한 CI/CD 구축</h3>

<h4 id="ssh-연결">SSH 연결</h4>

<p>가장 먼저 SSH 연결을 하기 위해 <a href="https://github.com/marketplace/actions/ssh-remote-commands">ssh-remote-commands</a> 라는 action을 사용해주도록 하겠습니다. 해당 페이지에서 상세하게 적혀있는 매뉴얼을 참고하시면 좋습니다.</p>

<h5 id="ppk-file---rsa-변경">ppk file -&gt; rsa 변경</h5>

<p><img src="https://github.com/ilimes/ilimes/assets/95404736/7c376340-b37d-4c18-8ced-7fa859878b4d" alt="1" /></p>

<p>PuTTY Key Generator로 만들었던 ppk 파일을 rsa 형식으로 변경해줍니다.
위 사진과 같이 기존 ppk 파일을 불러온 다음 <code class="language-plaintext highlighter-rouge">Conversions - Export OpenSSH key</code>를 눌러주면 됩니다.</p>

<h5 id="secrets-설정">secrets 설정</h5>

<p>암호화될 값들을 넣어주는 secret을 설정해보도록 하겠습니다.<br />
레포지토리의 세팅에서 <code class="language-plaintext highlighter-rouge">Secrets and variables - Actions</code> 를 눌러줍니다.</p>

<p><img src="https://github.com/ilimes/ilimes/assets/95404736/2eb5325a-e8d3-4fad-a2b6-462cdaa8d559" alt="image" /></p>

<p>그럼 위와 같은 화면이 나옵니다. <code class="language-plaintext highlighter-rouge">New repository secret</code>를 눌러줍니다.</p>

<p><img src="https://github.com/ilimes/ilimes/assets/95404736/d29394d3-7111-44ea-bcce-0aa57577aae3" alt="image" /></p>

<p>계정명, 서버 IP, 비밀키, 포트 등의 정보를 만들어주면 됩니다.
참고로 비밀키는 아까 위에서 만들었던 rsa 파일의 내용 전부를 넣어주면 됩니다. (—–BEGIN OPENSSH PRIVATE KEY—–와 —–END OPENSSH PRIVATE KEY—– 를 포함)</p>

<p>작성한 secrets는  ${{secrets.XXX }}  이런식으로 키 값으로 사용할 수 있습니다. 이제 사전 준비를 마쳤으므로 스크립트를 작성해야합니다.</p>

<h4 id="workflow-작성">Workflow 작성</h4>

<p>Github Actions는 프로젝트 최상위에 있는 .github/workflows 폴더 안에 있는 yml 을 읽어서 작동하게끔 되어 있습니다. 직접 작성해도 되고 깃허브 Actions 탭에서 제공되는 템플릿으로 작성하는 것도 가능합니다.</p>

<p>제 프론트엔드 배포 스크립트를 예시로 적어보도록 하겠습니다.</p>

<p>.github/workflows/deploy.yml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s">frontend deploy</span> <span class="c1"># workflow의 이름</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">develop"</span><span class="pi">]</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="c1"># 누군가 만들어 놓은 Actions 활용 시 uses 키워드 사용</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>

      <span class="c1"># step의 이름</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run scripts in server</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">appleboy/ssh-action@master</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">host</span><span class="pi">:</span>  <span class="s">${{ secrets.REMOTE_SSH_HOST }}</span> 
          <span class="na">username</span><span class="pi">:</span>  <span class="s">${{ secrets.REMOTE_SSH_USERNAME }}</span> 
          <span class="na">key</span><span class="pi">:</span>  <span class="s">${{ secrets.REMOTE_SSH_KEY  }}</span> 
          <span class="na">port</span><span class="pi">:</span>  <span class="s">${{ secrets.REMOTE_SSH_PORT  }}</span> 
          <span class="c1"># ssh 접속 실패 타임아웃 - 보통 40초는 안걸린다</span>
          <span class="na">timeout</span><span class="pi">:</span> <span class="s">40s</span>
          <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">whoami</span>
            <span class="s">cd FreeMarket-FE</span>
            <span class="s">sudo git pull origin develop</span>
            <span class="s"># 아래 두 작업이 없으면 pm2에 대해서 command not found 에러가 뜰 수 있음</span>
            <span class="s">export NVM_DIR=~/.nvm</span>
            <span class="s">source ~/.nvm/nvm.sh</span>
            <span class="s">npm install</span>
            <span class="s">npm run build</span>
            <span class="s">pm2 restart FreeMarket</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>만약 모두 작성을 잘 했는데 deploy 부분에서</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>ssh: handshake failed: ssh: unable to authenticate, attempted methods <span class="o">[</span>none publickey], no supported methods remain
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같은 에러가 뜬다면 서버에서 sshd_config가 잘 설정되어 있는지 확인해보세요.</p>

<p>/etc/ssh/sshd_config 에서</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>PubkeyAuthentication <span class="nb">yes
</span><span class="nv">PubkeyAcceptedKeyTypes</span><span class="o">=</span>+ssh-rsa
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같은 코드 2줄을 추가하고 ssh server를 재시작 하면 됩니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="DevOps" /><category term="Github Actions" /><category term="OCI" /><category term="CI/CD" /><category term="배포자동화" /><summary type="html"><![CDATA[Github Actions를 활용하여 배포자동화 구축]]></summary></entry><entry><title type="html">Linux: Ubuntu 20.04 우분투 시간대(timezone) 설정/변경 방법</title><link href="http://localhost:4000/linux/post86/" rel="alternate" type="text/html" title="Linux: Ubuntu 20.04 우분투 시간대(timezone) 설정/변경 방법" /><published>2023-12-16T00:00:00+09:00</published><updated>2023-12-16T00:00:00+09:00</updated><id>http://localhost:4000/linux/post86</id><content type="html" xml:base="http://localhost:4000/linux/post86/"><![CDATA[<p>이번 포스팅에서는 우분투 시간대를 변경하는 방법을 알려드리고자 합니다.<br />
본 내용은 우분투 20.04 환경에서 진행하였습니다 :)</p>

<h3 id="현재-설정된-시간대-확인">현재 설정된 시간대 확인</h3>

<p>현재 설정된 시간대는 <code class="language-plaintext highlighter-rouge">timedatectl</code> 명령어로 확인할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>ubuntu@instance:~<span class="nv">$ </span>timedatectl
               Local <span class="nb">time</span>: Fri 2023-12-15 15:25:33 UTC
           Universal <span class="nb">time</span>: Fri 2023-12-15 15:25:33 UTC
                 RTC <span class="nb">time</span>: Fri 2023-12-15 15:25:34
                Time zone: Etc/UTC <span class="o">(</span>UTC, +0000<span class="o">)</span>
System clock synchronized: <span class="nb">yes
              </span>NTP service: active
          RTC <span class="k">in </span><span class="nb">local </span>TZ: no
</pre></td></tr></tbody></table></code></pre></div></div>

<p>현재 시간대가 <code class="language-plaintext highlighter-rouge">Etc/UTC</code> 로 설정되어 있는 것을 볼 수 있습니다.<br />
아래 방법 중 1가지를 선택하여 따라하면 <code class="language-plaintext highlighter-rouge">Asia/Seoul</code> 로 변경할 수 있습니다.</p>

<h3 id="1-dpkg-reconfigure-사용하여-변경">1. dpkg-reconfigure 사용하여 변경</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">sudo </span>dpkg-reconfigure tzdata
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://github.com/ilimes/ilimes/assets/95404736/0ca76494-e0ff-4a82-8293-1b52891b517f" alt="image" /></p>

<p><img src="https://github.com/ilimes/ilimes/assets/95404736/056a9807-4b73-4343-b7cd-f1444eed37cc" alt="image" /></p>

<p>방향키를 사용하여 원하는 지역을 선택한 후 엔터키를 눌러줍니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Current default <span class="nb">time </span>zone: <span class="s1">'Asia/Seoul'</span>
Local <span class="nb">time </span>is now:      Sat Dec 16 00:26:15 KST 2023.
Universal Time is now:  Fri Dec 15 15:26:15 UTC 2023.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그럼 위와 같은 메시지가 나오면서 default time zone이 변경됩니다.</p>

<h3 id="2-timedatectl-사용하여-변경">2. timedatectl 사용하여 변경</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>timedatectl list-timezones
<span class="nv">$ </span>timedatectl list-timezones | <span class="nb">grep </span>Seoul
Asia/Seoul
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 명령어를 입력하여 원하는 시간대를 검색합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">sudo </span>timedatectl set-timezone Asia/Seoul
</pre></td></tr></tbody></table></code></pre></div></div>

<p>시간대를 변경합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>ubuntu@instance:~<span class="nv">$ </span>timedatectl
               Local <span class="nb">time</span>: Sat 2023-12-16 00:48:02 KST
           Universal <span class="nb">time</span>: Fri 2023-12-15 15:48:02 UTC
                 RTC <span class="nb">time</span>: Fri 2023-12-15 15:48:03
                Time zone: Asia/Seoul <span class="o">(</span>KST, +0900<span class="o">)</span>
System clock synchronized: <span class="nb">yes
              </span>NTP service: active
          RTC <span class="k">in </span><span class="nb">local </span>TZ: no
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 시간대가 변경된 것을 확인할 수 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Linux" /><category term="우분투" /><category term="ubuntu" /><category term="리눅스" /><category term="linux" /><category term="Timezone" /><category term="타임존" /><summary type="html"><![CDATA[Ubuntu Timezone]]></summary></entry><entry><title type="html">스택(Stack)이란 무엇일까?</title><link href="http://localhost:4000/algorithm/post85/" rel="alternate" type="text/html" title="스택(Stack)이란 무엇일까?" /><published>2023-12-13T00:00:00+09:00</published><updated>2023-12-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/post85</id><content type="html" xml:base="http://localhost:4000/algorithm/post85/"><![CDATA[<p>이번 포스팅에서는 스택(Stack)이 무엇인지에 대해 간단하게 정리해보고자 합니다 :)</p>

<h3 id="스택stack이란">스택(Stack)이란?</h3>

<p>스택이란 말 그대로 <code class="language-plaintext highlighter-rouge">쌓아놓은 더미</code>를 뜻합니다. 스택은 프링글스 통을 떠올리면 쉽게 이해할 수 있는데요. 프링글스 통에 든 과자 내용물은 제조공정 상에서 주입이 될 것이고, 처음에 담기는 과자는 가장 아래쪽에 위치하게 될 것입니다. 결국 프링글스 과자를 구입하여 뜯은 뒤 가장 먼저 먹게되는 과자 조각은 가장 마지막에 담은 과자가 되는 것입니다. 즉 입구와 출구가 같은 자료구조인 것이죠.</p>

<h3 id="스택stack의-특징">스택(Stack)의 특징</h3>

<h4 id="후입선출">후입선출</h4>

<p>스택의 특징으로는 후입선출(LIFO: Last In First Out) 방식이라는 점을 꼽을 수 있는데요. 후입선출이란 말 그대로 최근에 들어온 데이터가 가장 먼저 나가는 것을 뜻합니다.</p>

<h3 id="스택stack의-연산">스택(Stack)의 연산</h3>

<h4 id="삽입-연산---push">삽입 연산 - Push</h4>

<p>스택에 데이터를 넣기 위하여 수행하는 연산을 Push 연산 이라고 합니다.
Push 연산은 스택이 꽉 차기 전까지 수행되며, 스택이 가득차면 수행을 멈추게 됩니다.</p>

<ul>
  <li>Stack 영역의 메모리가 지정된 범위를 넘어갈 때 발생하는 것 -&gt; Stack Overflow</li>
</ul>

<h4 id="삭제-연산---pop">삭제 연산 - Pop</h4>

<p>Push 연산과 반대로 스택에 있는 데이터를 추출하기 위하여 수행하는 연산을 Pop 연산이라고 합니다.
Pop 연산은 스택이 비어있지 않을 때 까지 연산을 수행하며, 스택이 비어있다면 수행을 멈추게 됩니다.</p>

<h3 id="스택을-주로-사용하는-곳">스택을 주로 사용하는 곳</h3>

<ul>
  <li>웹 브라우저의 뒤로가기</li>
  <li>프로그램의 실행 취소(Undo)</li>
  <li>문자열 뒤집기</li>
  <li>수식 괄호 검사</li>
  <li>JVM 메모리</li>
</ul>

<p>위 뿐만 아니라 Stack은 다양한 곳에 개념을 적용하여 사용되고 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Algorithm" /><category term="Algorithm" /><category term="자료구조" /><category term="스택" /><category term="Stack" /><summary type="html"><![CDATA[What is a Stack?]]></summary></entry><entry><title type="html">NVM default 노드 버전 변경 하는 방법</title><link href="http://localhost:4000/setting/post84/" rel="alternate" type="text/html" title="NVM default 노드 버전 변경 하는 방법" /><published>2023-10-31T00:00:00+09:00</published><updated>2023-10-31T00:00:00+09:00</updated><id>http://localhost:4000/setting/post84</id><content type="html" xml:base="http://localhost:4000/setting/post84/"><![CDATA[<p>오늘은 nvm에서 기본(default) 노드 버전을 변경하는 방법을 간단하게 소개해드리도록 하겠습니다 :)</p>

<h3 id="nvm-list-확인">nvm list 확인</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>nvm list
</pre></td></tr></tbody></table></code></pre></div></div>

<p>우선 nvm list 명령어를 입력하여 현재 default 노드 버전이 무엇인지 확인합니다.</p>

<p><img src="https://github.com/ilimes/ilimes.github.io/assets/95404736/c9161fa3-eac9-4f3f-8360-044d20ea566a" alt="image" /></p>

<p>현재 저의 default 노드 버전은 v14.15.5로 되어있습니다. v18.17.0 으로 변경해보도록 하겠습니다.</p>

<h3 id="default-버전-변경">default 버전 변경</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>nvm <span class="nb">alias </span>default 18.17.0
</pre></td></tr></tbody></table></code></pre></div></div>

<p>default 버전을 변경하고자 하는 경우에는 <code class="language-plaintext highlighter-rouge">alias default</code> 명령어를 입력하면 됩니다.</p>

<p><img src="https://github.com/ilimes/ilimes.github.io/assets/95404736/0fb73df2-6cd4-4124-84b5-c89ae2c1673e" alt="image" /></p>

<p>위처럼 정상적으로 default 버전이 변경된 것을 확인하실 수 있습니다.<br />
앞으로 터미널을 재시작하더라도 버전이 변경되지 않습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Setting" /><category term="NVM" /><category term="default" /><category term="nvm default" /><category term="node.js" /><category term="node" /><summary type="html"><![CDATA[NVM default node version setting]]></summary></entry><entry><title type="html">MySQL/MariaDB WITH RECURSIVE 재귀 쿼리</title><link href="http://localhost:4000/mariadb/post83/" rel="alternate" type="text/html" title="MySQL/MariaDB WITH RECURSIVE 재귀 쿼리" /><published>2023-10-29T00:00:00+09:00</published><updated>2023-10-29T00:00:00+09:00</updated><id>http://localhost:4000/mariadb/post83</id><content type="html" xml:base="http://localhost:4000/mariadb/post83/"><![CDATA[<p>오늘은 프로그래머스 문제를 풀다가 처음 알게된 문법이 있어서 공유해보고자 합니다. 바로 <code class="language-plaintext highlighter-rouge">WITH RECURSIVE</code> 라는 재귀 쿼리입니다.</p>

<h3 id="with-recursive">WITH RECURSIVE</h3>

<p><code class="language-plaintext highlighter-rouge">WITH RECURSIVE</code> 의 기본 구조는 아래와 같습니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="err">테이블명</span> <span class="k">AS</span><span class="p">(</span>
  <span class="k">SELECT</span> <span class="err">초기값</span> <span class="k">AS</span> <span class="err">컬럼별명</span><span class="mi">1</span>
  <span class="k">UNION</span> <span class="k">ALL</span>
  <span class="k">SELECT</span> <span class="err">컬럼별명</span><span class="mi">1</span> <span class="err">계산식</span> <span class="k">FROM</span> <span class="err">테이블명</span> <span class="k">WHERE</span> <span class="err">제어문</span>
<span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">WITH RECURSIVE</code> 는 아래와 같이 WITH와 RECURSIVE로 나눌 수 있습니다.</p>

<h3 id="with">WITH</h3>

<ul>
  <li><strong>CTE</strong>(common table expression)을 생성하는 문법</li>
  <li><strong>CTE</strong>란 해당 SQL문 내에서만 존재하는, 즉 메모리 상에 가상의 테이블을 저장할 때 사용된다.</li>
</ul>

<h3 id="recursive">RECURSIVE</h3>

<ul>
  <li>서브쿼리에서 스스로를 참조하는 <strong>CTE</strong></li>
  <li>가상의 테이블을 생성하면서 자신의 값을 참조하여 결정할 때 사용</li>
</ul>

<h3 id="예시">예시</h3>

<p>1부터 5까지 출력하는 예시입니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">d</span> 
<span class="k">AS</span> <span class="p">(</span>
    <span class="k">select</span> <span class="mi">1</span> <span class="k">as</span> <span class="n">n</span>
    <span class="k">union</span> <span class="k">all</span>
    <span class="k">select</span>
        <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">from</span> <span class="n">d</span>
    <span class="k">where</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">5</span>
<span class="p">)</span>

<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">d</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="출력-결과">출력 결과</h4>

<p><img src="https://github.com/ilimes/ilimes.github.io/assets/95404736/709c02cc-9718-4d98-a498-6892f8949dc0" alt="image" /></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MariaDB" /><category term="데이터베이스" /><category term="DB" /><category term="MariaDB" /><category term="WITH RECURSIVE" /><summary type="html"><![CDATA[MySQL/MariaDB WITH RECURSIVE]]></summary></entry><entry><title type="html">Git - fatal: Unable to create ‘~~/.git/index.lock’: File exists. 에러 해결</title><link href="http://localhost:4000/git/post81/" rel="alternate" type="text/html" title="Git - fatal: Unable to create ‘~~/.git/index.lock’: File exists. 에러 해결" /><published>2023-10-04T00:00:00+09:00</published><updated>2023-10-04T00:00:00+09:00</updated><id>http://localhost:4000/git/post81</id><content type="html" xml:base="http://localhost:4000/git/post81/"><![CDATA[<h3 id="문제-상황">문제 상황</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>git add <span class="nb">.</span>
fatal: Unable to create <span class="s1">'디렉토리/.git/index.lock'</span>: File exists.

Another git process seems to be running <span class="k">in </span>this repository, e.g.
an editor opened by <span class="s1">'git commit'</span><span class="nb">.</span> Please make sure all processes
are terminated <span class="k">then </span>try again. If it still fails, a git process
may have crashed <span class="k">in </span>this repository earlier:
remove the file manually to <span class="k">continue</span><span class="nb">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>git add .로 파일을 올리고자 할 때 갑자기 위와 같은 에러가 나는 경우가 있습니다.
이유는 <code class="language-plaintext highlighter-rouge">.git 디렉토리에 index.lock 파일이 존재하기 때문</code> 입니다.</p>

<h3 id="해결-방법">해결 방법</h3>

<p>해결 방법은 매우 간단합니다.</p>

<p>특정 Git 프로세스가 동작중일 때 다른 Git 프로세스가 실행되는 것을 막기 위해서 index.lock 이라는 파일이 생기는 것인데 의도해서 생성한 것이 아니라면 삭제해주면 됩니다. 폴더에서 직접 index.lock 파일을 삭제하거나, 아래 명령어를 입력하여 해결할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-f</span> .git/index.lock
</pre></td></tr></tbody></table></code></pre></div></div>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="github" /><category term="Git" /><category term="깃" /><category term="에러해결" /><category term="fatal" /><summary type="html"><![CDATA[Git 에러 해결 방법]]></summary></entry><entry><title type="html">React Native - Sticky Header (헤더 고정)</title><link href="http://localhost:4000/reactnative/post82/" rel="alternate" type="text/html" title="React Native - Sticky Header (헤더 고정)" /><published>2023-10-04T00:00:00+09:00</published><updated>2023-10-04T00:00:00+09:00</updated><id>http://localhost:4000/reactnative/post82</id><content type="html" xml:base="http://localhost:4000/reactnative/post82/"><![CDATA[<h3 id="sticky-header-사용법">Sticky Header 사용법</h3>

<p>앱을 만들다보면 스크롤을 내릴때 헤더를 고정하는 Sticky Header를 구현하고 싶을 때가 있는데요. React Native ScrollView에서는 간단히 구현할 수 있습니다.</p>

<p>아래와 같이 스크롤 뷰 속성에 <code class="language-plaintext highlighter-rouge">stickyHeaderIndices</code> 를 추가하면 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="p">&lt;</span><span class="nc">ScrollView</span> 
    <span class="na">stickyHeaderIndices</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span> <span class="c1">// 숫자: sticky 속성을 사용할 컴포넌트의 위치</span>
<span class="p">&gt;</span> 
   ...
<span class="p">&lt;/</span><span class="nc">ScrollView</span><span class="p">&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>예를 들어 1번째 컴포넌트를 고정하고 싶다면 위와 같이 배열 안에 숫자를 <code class="language-plaintext highlighter-rouge">0</code>으로 설정해주면 됩니다.<br />
만약 <code class="language-plaintext highlighter-rouge">1</code>로 하면 2번째 컴포넌트가 고정됩니다 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="ReactNative" /><category term="리액트네이티브" /><category term="React" /><category term="RN" /><category term="Sticky" /><category term="stickyHeaderIndices" /><category term="scrollview" /><summary type="html"><![CDATA[리액트 네이티브 Sticky]]></summary></entry><entry><title type="html">웹 브라우저 렌더링 종류와 차이점</title><link href="http://localhost:4000/web/post80/" rel="alternate" type="text/html" title="웹 브라우저 렌더링 종류와 차이점" /><published>2023-09-05T00:00:00+09:00</published><updated>2023-09-05T00:00:00+09:00</updated><id>http://localhost:4000/web/post80</id><content type="html" xml:base="http://localhost:4000/web/post80/"><![CDATA[<p>렌더링이란 간단히 말하면 HTML, CSS, javaScript 등 개발자가 작성한 문서가 화면에 표시되는 것이라고 할 수 있는데요. 오늘은 웹 브라우저 렌더링의 종류에 대해서 알아보고, 각각 어떠한 장단점이 있는지 정리해보도록 하겠습니다 😊</p>

<h3 id="렌더링의-종류">렌더링의 종류</h3>

<p>렌더링의 종류는 크게 4가지로 구분할 수 있습니다.</p>

<hr />

<h4 id="서버-사이드-렌더링-ssr">서버 사이드 렌더링 (SSR)</h4>

<p>서버 사이드 렌더링이란 말 그대로 클라이언트가 요청하였을 때 <strong>서버측에서 렌더링</strong>을 해서 보내주는 것을 말합니다.</p>

<h5 id="장점">장점</h5>

<ul>
  <li>초기 로딩 속도가 빠르다.
    <ul>
      <li>해당 첫 페이지에 해당하는 문서만 브라우저에 전달하여 렌더링 하기 때문</li>
    </ul>
  </li>
  <li>자바스크립트 설정이 필요하지 않다.</li>
  <li>검색 엔진 최적화(SEO - Search Engine Optimization)가 좋다.
    <ul>
      <li>SEO란 웹을 크롤링하며 페이지에 컨텐츠 색인을 생성하는 과정</li>
    </ul>
  </li>
</ul>

<h5 id="단점">단점</h5>

<ul>
  <li>초기 로딩속도가 빠른만큼 TTV(Time To View)와 TTI(Time to Interact)간 시간 간격이 존재
    <ul>
      <li>TTV는 사용자가 웹사이트를 보는 것을 말하고, TTI는 클릭 이벤트와 같은 인터랙션이 가능한 상태</li>
    </ul>
  </li>
  <li>초기 로딩 이후에는 페이지 이동 속도가 다소 느릴 수 있다.
    <ul>
      <li>페이지 이동시마다 클라이언트가 서버에게 필요한 데이터를 요청하고, 서버가 응답해주는 방식이기 때문</li>
    </ul>
  </li>
  <li>매번 페이지가 새로고침 되어 사용자 경험이 떨어질 수 있다.</li>
</ul>

<hr />

<h4 id="클라이언트-사이드-렌더링-csr">클라이언트 사이드 렌더링 (CSR)</h4>

<p>클라이언트 사이드 렌더링은 서버 사이드 렌더링과 반대라고 할 수 있는데, 프로그래밍된 스크립트가 서버가 아닌 <strong>클라이언트(브라우저)</strong>에서 처리되는 것을 말합니다.</p>

<h5 id="장점-1">장점</h5>

<ul>
  <li>클라이언트에서 많은 것들이 이루어지기 때문에 초기 로딩이 느리지만, 로딩이 완료되고 나면 빠른 동작이 가능</li>
  <li>서버에 부하가 적음</li>
</ul>

<h5 id="단점-1">단점</h5>

<ul>
  <li>검색 엔진 최적화(SEO - Search Engine Optimization)에 대한 보완 작업 필요
    <ul>
      <li>검색 엔진 크롤러가 웹사이트에 대한 데이터를 제대로 수집하지 못하는 경우가 발생할 수 있습니다. SEO를 위해서 sitemap 문서 작성과 같은 과정이 필요할 수 있습니다.</li>
    </ul>
  </li>
  <li>보안에 취약</li>
</ul>

<hr />

<h4 id="정적-사이트-생성-ssg">정적 사이트 생성 (SSG)</h4>

<p>SSG란 Static Site Generation의 약자로 <strong>정적인 페이지</strong>를 생성하는 것을 말합니다.</p>

<h5 id="장점-2">장점</h5>

<ul>
  <li>초기 로딩이 빠르다</li>
  <li>자바스크립트 설정이 필요하지 않다.</li>
  <li>검색 엔진 최적화(SEO - Search Engine Optimization)가 좋다.</li>
  <li>보안이 좋다</li>
</ul>

<h5 id="단점-2">단점</h5>

<ul>
  <li>데이터가 정적이다
    <ul>
      <li>블로그와 같이 데이터가 잘 바뀌지 않는 사이트 같은 경우 사용하기 적합하지만, 변화가 자주 이뤄져야 하는 경우에는 적합하지 않음</li>
    </ul>
  </li>
  <li>사용자별로 달라지는 데이터 제공 어려움</li>
</ul>

<hr />

<h4 id="증분-정적-재생-isr">증분 정적 재생 (ISR)</h4>

<p>ISR이란 Incremental Static Regeneration의 약자로 SSG를 보완하기 위해 정적인 사이트를 서버 측에서 주기적으로 렌더링 하는 것을 말합니다.<br />
전체적인 원리는 SSG와 동일하고, 설정한 주기만큼 페이지를 계속 다시 만들어줍니다.</p>

<h5 id="장점-3">장점</h5>

<ul>
  <li>초기 로딩이 빠르다</li>
  <li>검색 엔진 최적화(SEO - Search Engine Optimization)가 좋다.</li>
  <li>보안이 좋다</li>
  <li>주기적으로 데이터가 업데이트 된다</li>
</ul>

<h5 id="단점-3">단점</h5>

<ul>
  <li>주기적인 변경이 가능하지만 실시간 데이터가 아니다</li>
  <li>사용자별로 달라지는 데이터 제공 어려움</li>
</ul>

<hr />

<p>오늘 이렇게 4가지 웹 브라우저 렌더링 방식에 대해서 알아보았는데요. 각각의 특징이 있기 때문에 상황에 맞게 잘 적용해야겠다는 생각이 들었습니다.</p>

<p>참고로 <code class="language-plaintext highlighter-rouge">Next.js</code> 같은 경우는 성능 좋은 강력한 웹앱을 만들기 위해서 두 개 이상의 렌더링 방법을 사용하는 하이브리드 방식을 지원하고 있습니다 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="렌더링" /><category term="SSR" /><category term="CSR" /><category term="SSG" /><category term="ISR" /><summary type="html"><![CDATA[SSR, CSR, SSG, ISR에 대해서 알아보기]]></summary></entry><entry><title type="html">[Windows] 인텔리제이(IntelliJ) 콘솔 한글 깨짐 수정하기</title><link href="http://localhost:4000/issue/post79/" rel="alternate" type="text/html" title="[Windows] 인텔리제이(IntelliJ) 콘솔 한글 깨짐 수정하기" /><published>2023-04-29T00:00:00+09:00</published><updated>2023-04-29T00:00:00+09:00</updated><id>http://localhost:4000/issue/post79</id><content type="html" xml:base="http://localhost:4000/issue/post79/"><![CDATA[<p>최근 스프링부트 개발을 인텔리제이로 하고있는데, 맥과 윈도우를 번갈아가면서 사용하고 있습니다.<br />
맥에서는 별도로 무언가 설정하지 않아도 문제없이 한글로된 콘솔이 잘 찍혔는데, 윈도우에서는 인텔리제이에 별도로 설정을 해놓지 않으면 한글이 깨져서 나오더라고요.<br />
<br />
그래서 오늘은 저처럼 인텔리제이 한글 콘솔 문제를 겪고, 해결방법을 찾고 계신 분들을 위해서 간단하게 해결 방법을 소개해드리도록 하겠습니다 :)</p>

<h3 id="해결방법">해결방법</h3>

<p><img src="https://user-images.githubusercontent.com/95404736/235306346-ad3fb520-7f71-4d8b-bf81-dbbd97cd5edd.png" alt="image" width="500" /></p>

<p>인텔리제이 상단 메뉴에서 ‘Help - Edit Custom VM Options…‘를 찾아서 클릭합니다.</p>

<p><img width="600" alt="image" src="https://user-images.githubusercontent.com/95404736/235306442-3bf3857f-e4a3-4624-af58-7ee167f4c001.png" /></p>

<p>그럼 위 이미지에서 보이는 것처럼 파일이 하나 열리게 됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>-Dfile.encoding=UTF-8
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 코드를 이미지 두번째 줄처럼 붙여 넣어주세요.<br />
그리고 인텔리제이를 재시작하면 한글 깨짐 문제가 해결됩니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="인텔리제이" /><category term="IntelliJ" /><category term="한글" /><category term="한글깨짐" /><summary type="html"><![CDATA[인텔리제이(IntelliJ) 콘솔 한글 깨짐 수정하기]]></summary></entry><entry><title type="html">CH12. 제품 소프트웨어 패키징</title><link href="http://localhost:4000/infoprocessing/post78/" rel="alternate" type="text/html" title="CH12. 제품 소프트웨어 패키징" /><published>2023-03-25T00:00:00+09:00</published><updated>2023-03-25T00:00:00+09:00</updated><id>http://localhost:4000/infoprocessing/post78</id><content type="html" xml:base="http://localhost:4000/infoprocessing/post78/"><![CDATA[<h3 id="제품-소프트웨어-패키징-하기">제품 소프트웨어 패키징 하기</h3>

<h4 id="제품-소프트웨어-패키징product-software-packaging">제품 소프트웨어 패키징(Product Software Packaging)</h4>

<p>개발이 완료된 제품 소프트웨어를 고객에게 전달하기 위한 형태로 포장하는 과정</p>

<ul>
  <li>사용자 중심의 모듈 패키징 프로세스: 기능 식별 → 모듈화 → 빌드 진행 → 사용자 환경 분석 → 패키징 적용 시험 → 패키징 변경 개선</li>
</ul>

<h4 id="릴리즈-노트release-note">릴리즈 노트(Release Note)</h4>

<p>고객에게 개발 과정에서 정리된 제품의 릴리즈 정보를 제공하는 문서</p>

<ul>
  <li>릴리즈 노트 작성 프로세스: 모듈 식별 → 릴리즈 정보 확인 → 릴리즈 노트 개요 작성 → 영향도 체크 → 정식 릴리즈 노트 작성 → 추가 개선 항목 식별</li>
</ul>

<h4 id="제품-소프트웨어-패키징-도구">제품 소프트웨어 패키징 도구</h4>

<p>배포를 위한 패키징 시에 디지털 콘텐츠의 지적 재산권을 보호하고 관리하는 기능 제공하며, 안전한 유통과 배포를 보장하는 도구</p>

<h4 id="패키징-도구-활용-시-고려-사항">패키징 도구 활용 시 고려 사항</h4>

<ul>
  <li>암호화/보안 고려: 내부 콘텐츠에 대한 암호화 및 보안 고려</li>
  <li>이기종 연동을 고려: 이기종 콘테츠 및 단말기 간 DRM 연동 고려</li>
  <li>사용자 편의성 고려: 사용자 입장에서 문제를 고려하여 최대한 효율적으로 적용</li>
  <li>적합한 암호화 알고리즘 적용: 제품 소프트웨어 종류에 맞는 알고리즘을 선택하여 배포 시 범용성에 지장이 없도록 고려</li>
</ul>

<h4 id="저작권copyright">저작권(Copyright)</h4>

<p>창작물인 저작물에 대한 배타적 독점적 권리로 타인의 침해를 받지 않을 고유한 권한</p>

<h4 id="디지털-저작권-관리drm-digital-right-management">디지털 저작권 관리(DRM: Digital Right Management)</h4>

<p>저작권자가 배포한 디지털 콘텐츠가 저작권자가 의도한 용도로만 사용되도록 디지털 콘텐츠 관리 및 보호 기술</p>

<h4 id="디지털-저작권-관리drm-구성요소">디지털 저작권 관리(DRM) 구성요소</h4>

<ul>
  <li>콘텐츠 제공자(Content Provider): 콘텐츠를 제공하는 저작권자</li>
  <li>콘텐츠 소비자(Content Customer): 콘텐츠를 구매하여 사용하는 주체</li>
  <li>콘텐츠 분배자(Contents Distributor): 암호화된 콘텐츠를 유통하는 곳이나 사람</li>
  <li>클리어링 하우스(Clearing House): 저작권에 대한 사용 권한, 라이선스 발급, 암호화된 키 관리, 사용량에 따른 결제 관리 등을 수행하는 곳</li>
  <li>DRM 콘텐츠(DRM Content): 서비스하고자 하는 암호화된 콘텐츠, 콘텐츠와 관련된 메타데이터, 콘텐츠 사용정보를 패키징하여 구성된 콘텐츠</li>
  <li>패키저(Packager): 콘텐츠를 메타데이터와 함꼐 배포 가능한 단위로 묶은 도구</li>
  <li>DRM 컨트롤러(DRM Controller): 배포된 디지털 콘텐츠의 이용 권한을 통제</li>
  <li>보안 컨테이너(Security Contatiner): 원본 콘텐츠를 안전하게 유통하기 위한 전자적 보안장치</li>
</ul>

<h4 id="패키징-도구-구성-세부-기술">패키징 도구 구성 세부 기술</h4>

<ul>
  <li>암호화: 콘텐츠 및 라이선스를 암호화하고 전자 서명을 할 수 있는 기술</li>
  <li>키 관리: 콘텐츠를 암호화한 키에 대한 저장 및 분배 기술</li>
  <li>암호화 파일 생성: 콘텐츠 암호화된 콘텐츠로 생성하기 위한 기술</li>
  <li>식별 기술: 콘텐츠에 대한 식별 체계 표현 기술</li>
  <li>저작권 표현: 라이선스의 내용 표현 기술</li>
  <li>정책 관리: 라이선스 발급 및 사용에 대한 정책 표현 및 관리 기술</li>
  <li>크랙방지: 크랙에 의한 콘텐츠 사용 방지 기술</li>
  <li>인증: 라이선스 발급 및 사용의 기준이 되는 사용자 인증 기술</li>
</ul>

<h3 id="제품-소프트웨어-매뉴얼-작성-및-버전-등록">제품 소프트웨어 매뉴얼 작성 및 버전 등록</h3>

<h4 id="제품-소프트웨어-매뉴얼">제품 소프트웨어 매뉴얼</h4>

<p>사용자 측면에서 패키징 이후 설치, 제품 소프트웨어를 사용하는 데 필요한 주요 내용을 기록한 문서</p>

<h4 id="제품-소프트웨어-사용자-매뉴얼">제품 소프트웨어 사용자 매뉴얼</h4>

<p>사용자가 소프트웨어 사용에 필요한 내용을 포함한 문서</p>

<h4 id="제품-소프트웨어-배포본">제품 소프트웨어 배포본</h4>

<p>사용자가 사용하기 편하도록 배포 정보를 포함하여 개발된 컴포넌트 또는 패키지가 제품화된 형태</p>

<h4 id="백업-유형">백업 유형</h4>

<ul>
  <li>전체 백업(Full Backup): 백업받고자 하는 데이터 전체에 대한 백업을 하는 방식</li>
  <li>차등 백업(Differential Backup): 마지막 전체 백업 이후 변경된 모든 데이터를 백업하는 방식</li>
  <li>증분 백업(Incremental Backup): 정해진 시간을 기준으로 그 이후에 변경된 파일만을 백업하는 방식</li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="InfoProcessing" /><category term="정보처리기사" /><category term="정처기" /><category term="제품" /><category term="제품소프트웨어패키징" /><category term="개발" /><summary type="html"><![CDATA[정보처리기사 - 제품 소프트웨어 패키징]]></summary></entry></feed>