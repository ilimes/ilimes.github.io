<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-11T23:18:17+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">공부하며 기록하기 : Today I Learned 📖</title><subtitle>**공부하고 기록하는** 블로그 입니다.</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">Git 기본 CLI 명령어 정리</title><link href="http://localhost:4000/git/post10/" rel="alternate" type="text/html" title="Git 기본 CLI 명령어 정리" /><published>2022-07-11T00:00:00+09:00</published><updated>2022-07-11T00:00:00+09:00</updated><id>http://localhost:4000/git/post10</id><content type="html" xml:base="http://localhost:4000/git/post10/"><![CDATA[<h2 id="git-이란">Git 이란?</h2>

<p><code class="language-plaintext highlighter-rouge">Git</code>이란 형상 관리 도구중 하나로 버전 관리, 백업, 협업 등을 할 수 있는 강력한 도구입니다. Git은 중앙 서버에서 소스코드와 히스토리를 저장하던 SVN과는 달리 소스코드를 여러 개발 PC에 분산 저장하여 관리하는 시스템이라 SVN보다 속도가 더욱 빠르기도 하여 SVN을 사용하던 기존 개발 조직에서도 계속 Git으로 갈아타고 있는 추세입니다.</p>

<h2 id="cli란">CLI란?</h2>

<p><code class="language-plaintext highlighter-rouge">CLI</code>란 Command Line Interface의 약자로 텍스트 터미널을 통해 사용자와 컴퓨터가 상호작용하는 방식을 뜻합니다. 요즘은 GUI가 잘 되어있어서 반드시 CLI 방식으로만 Git을 사용해야만 하는 것은 아니지만 자주 사용하고 익숙해지면 편하고 빠르게 Git을 다룰 수 있어서 대부분의 개발자분들이 CLI방식으로 깃을 사용하고 있습니다.</p>

<h2 id="cli-명령어">CLI 명령어</h2>

<p>[폴더 이동 관련]</p>

<p><code class="language-plaintext highlighter-rouge">cd 폴더 경로</code> : 해당 위치 경로 폴더로 이동 (cd 절대경로 가능)<br />
<code class="language-plaintext highlighter-rouge">cd ..</code> : 이전 폴더(상위 디렉토리)로 이동<br />
<code class="language-plaintext highlighter-rouge">cd ~</code> : 홈 디렉토리로 이동<br />
<code class="language-plaintext highlighter-rouge">dir</code> : 현재 위치 내의 모든 파일을 표시<br />
<code class="language-plaintext highlighter-rouge">ls</code>: list의 약자로 현재 위치 폴더에 어떤 파일이나 디렉토리가 존재하는지 알려줌</p>

<ul>
  <li>ls 명령어 옵션
    <ul>
      <li><code class="language-plaintext highlighter-rouge">-a</code> : 숨김 파일과 디렉토리 모두 표시</li>
      <li><code class="language-plaintext highlighter-rouge">-l</code> : 파일이나 디렉토리 상세 정보 모두 표시</li>
      <li><code class="language-plaintext highlighter-rouge">-r</code> : 파일 정렬 순서를 거꾸로 표시</li>
      <li><code class="language-plaintext highlighter-rouge">-t</code> : 파일의 작성 시간 순서를 내림차순으로 표시</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">pwd</code> : 현재 작업 폴더 위치</p>

<p>[파일 생성 및 삭제 관련]</p>

<p>** 파일</p>

<p><code class="language-plaintext highlighter-rouge">touch 파일명</code> : 파일 생성<br />
<code class="language-plaintext highlighter-rouge">echo 문자열 &gt; 파일명</code> : 새로운 파일 생성하면서 문자열 삽입<br />
<code class="language-plaintext highlighter-rouge">rm 파일명</code> : 파일 삭제<br />
<code class="language-plaintext highlighter-rouge">cp 파일명 위치</code> : 파일 복사<br />
<code class="language-plaintext highlighter-rouge">mv 파일명 변경파일명</code> : 파일명 변경</p>

<p>** 폴더</p>

<p><code class="language-plaintext highlighter-rouge">mkdir 폴더명</code> : 새로운 폴더 생성<br />
<code class="language-plaintext highlighter-rouge">rm -r 폴더명</code> : 폴더 삭제
<code class="language-plaintext highlighter-rouge">cp -r 폴더명 위치</code> : 폴더 복사
<code class="language-plaintext highlighter-rouge">mv 폴더명 변경폴더명</code> : 폴더명 변경</p>

<h2 id="git-기본-명령어">Git 기본 명령어</h2>

<p>[Git 폴더 초기화]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init //버전 관리를 위한 기본 폴더를 생성하는 명령어
</code></pre></div></div>

<p>[Git 상태 확인]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status //현재 상태 출력
git log //현재 커밋 로그 등을 출력
</code></pre></div></div>

<p>[Github에 업로드]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//업로드할 파일 추가
git add 파일명
git add .

//커밋
git commit -m '커밋 메시지'

//최신 커밋 메시지 수정
git commit --amend

//커밋 복구 (히스토리 유지)
git revert 원상복구할 커밋아이디

//푸쉬
git push 저장소명 브랜치명
git push origin main
</code></pre></div></div>

<p>[브랜치 관련]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//저장소 확인
git remote

//모든 브랜치 확인, 현재 브랜치는 다른 색이 표시됨
git branch

//새로운 브랜치 생성
git branch 브랜치명

//브랜치 이동
git checkout 브랜치명

//해당 브랜치가 합쳐짐
git merge 합쳐질 브랜치명
</code></pre></div></div>

<p>[그 외]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//커밋되기 전의 수정 파일들 숨겨놓기
git stash

//숨겨놓은 파일 리스트 보기
git stash -list

//원격 저장소 복제
git clone 원격 저장소 주소
</code></pre></div></div>

<h2 id="today-i-learned">Today I Learned</h2>

<p>이번 포스팅에서는 기본적인 CLI 명령어들을 정리해보았습니다.<br />
아직까지 익숙하지 않지만 앞으로 계속 사용하다보면 금방 익숙해질 것 같네요 😊</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="cli" /><category term="git" /><category term="github" /><summary type="html"><![CDATA[Git에서 사용하는 기본적인 명령어를 정리해보았습니다.]]></summary></entry><entry><title type="html">Node.js-Express</title><link href="http://localhost:4000/nodejs/post11/" rel="alternate" type="text/html" title="Node.js-Express" /><published>2022-07-11T00:00:00+09:00</published><updated>2022-07-11T00:00:00+09:00</updated><id>http://localhost:4000/nodejs/post11</id><content type="html" xml:base="http://localhost:4000/nodejs/post11/"><![CDATA[<h2 id="express란">Express란?</h2>

<p><code class="language-plaintext highlighter-rouge">Express</code>란 Node.js 기반 웹 프레임워크로, 간단하게 서버 쪽 웹 어플리케이션을 쉽게 구현할 수 있도록 도와주는 프레임워크라고 할 수 있습니다.</p>

<h2 id="express-설치하기">Express 설치하기</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install express
</code></pre></div></div>

<p>Express를 설치하기 위해서는 위와 같이 npm 명령어를 사용하면 간단하게 설치할 수 있습니다.<br />
npm 명령어를 사용하기 이전에 Node.js와 npm init 실행이 반드시 선행되어야 합니다.</p>

<h2 id="express-5가지-개념">Express 5가지 개념</h2>

<p><code class="language-plaintext highlighter-rouge">[어플리케이션]</code></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>위와 같은 익스프레스 인스턴스를 어플리케이션이라고 합니다.</li>
  <li>listen 함수를 사용하여 서버를 요청 대기 상태로 만들 수 있습니다.</li>
  <li>라우팅 설정을 할 수 있습니다.</li>
  <li>서버에 필요한 미들웨어를 어플리케이션에 추가합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">[미들웨어]</code></p>

<ul>
  <li>함수들의 연속</li>
  <li>미들웨어 추가 시 use 함수를 사용합니다.</li>
  <li>미들웨어는 반드시 인자로 req, res, next를 가져야합니다.</li>
  <li>미들웨어는 보통 <code class="language-plaintext highlighter-rouge">일반 미들웨어</code>와 <code class="language-plaintext highlighter-rouge">에러 미들웨어</code>로 나뉘는데 일반 미들웨어 같은 경우는 인자를 3개 받으며, 에러 미들웨어 같은 경우는 err, req, res, next 로 인자 4개를 가집니다.</li>
  <li>미들웨어는 본인이 할 일을 다 한 다음에 꼭 next() 함수를 호출해줘야 합니다. 만약 next() 없이 작성을 하게 된다면 다음 요청을 읽지 못해서 계속 대기 상태로 서버가 유지됩니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">[라우팅]</code></p>

<ul>
  <li>요청 url에 대해서 적절한 핸들러 함수로 연결해주는 기능을 라우팅이라고 합니다.</li>
  <li>어플리케이션의 <code class="language-plaintext highlighter-rouge">get()</code>, <code class="language-plaintext highlighter-rouge">post()</code> 메소드로 구현할 수 있습니다.</li>
  <li>또한 라우팅을 위한 전용 Router 클래스를 사용할 수도 있습니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">[요청객체 -&gt; req]</code></p>

<ul>
  <li>클라이언트의 요청 정보를 담은 객체를 요청객체라고 합니다. (http 모듈의 request 객체를 래핑)</li>
  <li>주로 <code class="language-plaintext highlighter-rouge">req.params()</code>, <code class="language-plaintext highlighter-rouge">req.query()</code>, <code class="language-plaintext highlighter-rouge">req.body()</code> 메소드를 사용합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">[응답객체 -&gt; res]</code></p>

<ul>
  <li>클라이언트의 응답 정보를 담은 객체를 응답객체라고 합니다. (http 모듈의 response 객체를 래핑)</li>
  <li>주로 <code class="language-plaintext highlighter-rouge">res.send()</code>, <code class="language-plaintext highlighter-rouge">res.status()</code>, <code class="language-plaintext highlighter-rouge">res.json()</code> 과 같은 함수를 사용할 수 있는데, <code class="language-plaintext highlighter-rouge">res.send()</code>는 문자열을 응답하는 함수이고 <code class="language-plaintext highlighter-rouge">res.status()</code>는 http 상태 코드를 응답하며, <code class="language-plaintext highlighter-rouge">res.json()</code>은 json 데이터를 응답합니다.</li>
</ul>

<h2 id="express-사용하기">Express 사용하기</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>

<span class="c1">// 메인 페이지에 접속했을 때 콜백함수 실행</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello World!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// hi 페이지에 접속했을 때 콜백함수 실행</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/hi</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;h2&gt;Hi!&lt;/h2&gt;</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Example app listening at http://localhost:</span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>위 코드에서 보이는 <code class="language-plaintext highlighter-rouge">get()</code> 메소드는 <code class="language-plaintext highlighter-rouge">라우터</code>라고 하며 어떠한 요청이 들어오면 그것을 처리해주는 역할을 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">send()</code> 라는 함수는 클라이언트에 보내는 역할을 하며, html 요소가 인수로 들어갈 수 있습니다.</li>
</ul>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 Node.js 기반 웹 프레임워크 Express가 무엇인지 알게되었고, 간단한 사용 방법을 익혔습니다.
스프링으로 백엔드 개발을 하다가 자바스크립트로 서버를 공부하니 신기한 것이 정말 많은 것 같네요.
앞으로 백엔드 작업을 할 때 Express를 많이 사용하게 될 것 같은데, 블로그에 꾸준히 정리하면서 열심히 익혀야겠습니다 😊</p>

<h3 id="참고-사이트">참고 사이트</h3>

<p><a href="https://expressjs.com/">https://expressjs.com/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="NodeJs" /><category term="express" /><category term="NodeJs" /><category term="Node.js" /><summary type="html"><![CDATA[Node.js 기반 웹 프레임워크 Express에 대해 공부하기 + 간단한 사용]]></summary></entry><entry><title type="html">Node.js 프로세스 관리도구 pm2</title><link href="http://localhost:4000/nodejs/post9/" rel="alternate" type="text/html" title="Node.js 프로세스 관리도구 pm2" /><published>2022-07-10T00:00:00+09:00</published><updated>2022-07-10T00:00:00+09:00</updated><id>http://localhost:4000/nodejs/post9</id><content type="html" xml:base="http://localhost:4000/nodejs/post9/"><![CDATA[<h2 id="pm2란">pm2란?</h2>

<p><code class="language-plaintext highlighter-rouge">pm2</code>란 Node.js 운영을 효율적이게 할 수 있게 하는 프로세스 관리도구인데요. 기본적으로 싱글스레드 기반이라 멀티스레딩이 불가능한 Node.js에서 멀티스레딩과 비슷하게 내부적으로 서버를 Fork해서 사용할 수 있도록 클러스터라는 기능을 제공하기도 하고 프로세스가 죽었을 때의 처리 등 직접 하나씩 하게 된다면 귀찮은 온갖 일들을 몽땅 관리해주는 강력한 도구입니다.</p>

<h2 id="pm2-설치-방법">pm2 설치 방법</h2>

<p>아래 명령어를 이용하여 전역설치를 해줍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install pm2 -g
</code></pre></div></div>

<p>설치 할 때 뒤에 <code class="language-plaintext highlighter-rouge">-g</code>라는 옵션을 붙이는 이유는 pm2 명령어를 어떤 디렉토리에서든 사용할 수 있도록 하기 위함입니다.</p>

<h2 id="pm2-명령어">pm2 명령어</h2>

<ul>
  <li>프로세스 실행</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 start 시작하고자 하는 파일 명.js
</code></pre></div></div>

<ul>
  <li>실행중인 파일 리스트 보기</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 list
</code></pre></div></div>

<ul>
  <li>상세 정보 보기</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 show 파일명
</code></pre></div></div>

<ul>
  <li>프로세스 종료</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 stop 실행중인 파일 명.js
</code></pre></div></div>

<ul>
  <li>pm2 데몬 자체를 꺼버리기</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 kill
</code></pre></div></div>

<p>(위에서 <code class="language-plaintext highlighter-rouge">stop</code>이라는 명령어를 사용하면 프로세스는 중지되지만 pm2가 여전히 관리하고 있는 상태가 됩니다. 데몬 자체를 꺼버리기 위해서는 <code class="language-plaintext highlighter-rouge">kill</code>명령어를 입력해야합니다.)</p>

<ul>
  <li>프로세스 재시작</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 restart 실행중인 파일 명.js
</code></pre></div></div>

<ul>
  <li>모니터링</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 monit
</code></pre></div></div>

<p>(모니터링 상태에서는 pm2로 관리되는 프로세스별 상태를 볼 수 있고 실시간으로 로그를 확인하는 것이 가능합니다. 모니터링 상태에서 빠져나오기 위해서는 키보드의 <code class="language-plaintext highlighter-rouge">q</code>키를 누르면 됩니다.)</p>

<ul>
  <li>자동 재시작 설정</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 start 실행하고자 하는 파일 명.js --watch
</code></pre></div></div>

<p>(위와 같이 watch 옵션을 추가하게 되면 pm2에서 파일 변경을 파악하고 자동 재시작을 해줍니다. node는 내용을 변경하고 나면 서버를 껐다가 다시 켜줘야만 변경사항이 반영되는데 자동 재시작을 해주기 때문에 굉장히 편리합니다.)</p>

<ul>
  <li>로그 보기</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 log
</code></pre></div></div>

<h2 id="today-i-learned">Today I Learned</h2>

<p>이번 포스팅에서는 pm2에 대해서 공부한 내용들을 간단하게 정리해보았고,
기본적인 pm2 명령어들도 살펴보았습니다.</p>

<h3 id="참고-사이트">참고 사이트</h3>

<p><a href="https://pm2.keymetrics.io/">https://pm2.keymetrics.io/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="NodeJs" /><category term="pm2" /><category term="Node.js" /><summary type="html"><![CDATA[Node.js 운영을 효율적이게 하는 프로세스 관리도구]]></summary></entry><entry><title type="html">리액트에서 styled-components로 스타일링 하기</title><link href="http://localhost:4000/react/post8/" rel="alternate" type="text/html" title="리액트에서 styled-components로 스타일링 하기" /><published>2022-07-06T00:00:00+09:00</published><updated>2022-07-06T00:00:00+09:00</updated><id>http://localhost:4000/react/post8</id><content type="html" xml:base="http://localhost:4000/react/post8/"><![CDATA[<h2 id="styled-components란">styled-components란?</h2>

<p>styled-component는 리액트에서 사용하는 대표적인 CSS-in-JS 라이브러리 입니다. 스타일을 자바스크립트 파일에 내장시켜 사용할 수 있으며 CSS 커스텀 컴포넌트를 만들어서 쉽게 재사용할 수 있습니다.</p>

<h2 id="styled-components-설치-방법">styled-components 설치 방법</h2>

<p>먼저 터미널에 아래 명령어를 입력하여 styled-components를 설치합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">styled</span><span class="o">-</span><span class="nx">components</span>
</code></pre></div></div>

<p>그리고 적용하려는 components 파일 상단에 아래 한 줄을 import 합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="styled-components-사용하기">styled-components 사용하기</h2>

<p>기본적인 사용방법은 아래와 같습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyStyle</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  color: blue;
`</span><span class="p">;</span>
</code></pre></div></div>

<p>위와 같이 고정된 blue 색상을 주는 MyStyle 컴포넌트를 만들어주도록 하겠습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">MyStyle</span><span class="p">&gt;</span>안녕하세요<span class="p">&lt;/</span><span class="nc">MyStyle</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>해당 컴포넌트를 사용하면 아래와 같은 실행결과를 얻을 수 있습니다.</p>

<ul>
  <li>실행 결과<br />
<img src="https://user-images.githubusercontent.com/95404736/177561605-f41b5eb0-afff-4353-aa7f-e2e0296ac044.png" alt="image" /></li>
</ul>

<p>이렇게 고정적인 스타일링을 하는 것은 좋은 예가 아닙니다. 이렇게 만들게 되면 색을 바꾸고 싶을 때 마다 새로운 컴포넌트를 계속 만들어줘야 합니다.</p>

<p>그래서 좀 더 효율적으로 컴포넌트를 만들기 위해서는 props를 잘 활용해야 하는데요. props를 활용한 예는 아래와 같습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyStyle</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">myColor</span><span class="p">}</span><span class="s2">;
`</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">MyStyle</span> <span class="na">myColor</span><span class="p">=</span><span class="s">"red"</span><span class="p">&gt;</span>안녕하세요<span class="p">&lt;/</span><span class="nc">MyStyle</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li>실행 결과<br />
<img src="https://user-images.githubusercontent.com/95404736/177562898-889181a8-85c1-4dc5-b21e-0046e010ac38.png" alt="image" /></li>
</ul>

<h2 id="styled-components를-사용해서-antd-스위치-스타일-바꿔보기">styled-components를 사용해서 AntD 스위치 스타일 바꿔보기</h2>

<p>직접 만든 컴포넌트 뿐만 아니라 AntD와 styled-components를 함께 사용할 수 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Switch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">antd</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">antd/dist/antd.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">StyledSwitch</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">(</span><span class="nx">Switch</span><span class="p">)</span><span class="s2">`
  &amp;[aria-checked="true"] {
    background: green;
  }
  &amp;[aria-checked="false"] {
    background: red;
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>위 코드에서 &amp;은 부모 선택자입니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">StyledSwitch</span> <span class="na">checkedChildren</span><span class="p">=</span><span class="s">"ON"</span> <span class="na">unCheckedChildren</span><span class="p">=</span><span class="s">"OFF"</span> <span class="na">defaultChecked</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>스위치 ON 일 때<br />
<img src="https://user-images.githubusercontent.com/95404736/177559148-366341b3-f62f-4496-b499-77361ed403b3.png" alt="image" /></p>
  </li>
  <li>
    <p>스위치 OFF 일 때<br />
<img src="https://user-images.githubusercontent.com/95404736/177559214-2a2f587c-d72f-4b8d-9bd0-4afe93de5e97.png" alt="image" /></p>
  </li>
</ul>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 리액트에서 styled-components로 스타일링 하는 방법에 대해 공부했습니다. AntD를 사용하다보면 앞으로 가끔씩 커스텀 스타일링을 하게 될 경우가 생길 듯 한데 오늘 공부한 내용을 잘 활용하면 좋을 것 같습니다 :)</p>

<h3 id="참고-사이트">참고 사이트</h3>

<p><a href="https://styled-components.com/docs">https://styled-components.com/docs</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="react" /><category term="style" /><category term="css" /><category term="styled" /><category term="component" /><summary type="html"><![CDATA[React styled-components 사용법]]></summary></entry><entry><title type="html">리액트 이벤트 핸들링</title><link href="http://localhost:4000/react/post7/" rel="alternate" type="text/html" title="리액트 이벤트 핸들링" /><published>2022-07-04T00:00:00+09:00</published><updated>2022-07-04T00:00:00+09:00</updated><id>http://localhost:4000/react/post7</id><content type="html" xml:base="http://localhost:4000/react/post7/"><![CDATA[<h2 id="이벤트event란">이벤트(Event)란?</h2>

<p>이벤트는 사용자가 웹 브라우저에서 <code class="language-plaintext highlighter-rouge">DOM요소</code>들과 상호작용하는 것을 말합니다. (input 요소에 타이핑을 하거나, 버튼을 클릭하는 등..)</p>

<ul>
  <li>문서 객체 모델(DOM, Document Object Model)은 XML이나 HTML 문서에 접근하기 위한 일종의 인터페이스입니다. 이 객체 모델은 문서 내의 모든 요소를 정의하고, 각각의 요소에 접근하는 방법을 제공합니다. -&gt; 문서 객체란 원본 html 문서의 <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> 등 자바스크립트를 이용하여 수정 가능한 객체를 말하며, DOM은 자바스크립트를 이용해 조작할 수 있는 객체를 사용하여 원본 html 문서를 해석하는 방법을 말합니다.</li>
</ul>

<h2 id="react-이벤트-핸들링-주의사항">React 이벤트 핸들링 주의사항</h2>

<ol>
  <li>React에서 이벤트 이름은 카멜케이스(camelCase)로 표기합니다. 예를 들어 HTML에서는 클릭 이벤트를 onclick 으로 작성하였지만 리액트에서는 onClick으로 작성해야 합니다.</li>
  <li>HTML에서는 실행할 코드를 문자열로 전달했다면 리액트는 JSX를 사용하여 함수 형태의 값을 전달해야 합니다. 화살표 함수 문법을 사용해도 되고 외부에서 미리 함수를 만들어서 전달해도 됩니다.</li>
  <li>반드시 DOM요소에서만 이벤트 설정이 가능합니다.</li>
</ol>

<h2 id="이벤트-핸들링-해보기">이벤트 핸들링 해보기</h2>

<p>예제를 만들면서 이벤트 핸들링을 해보도록 하겠습니다.</p>

<p>먼저 src 폴더에 EventPractices.js라는 파일을 만들고 App.js에서 불러오도록 하겠습니다.<br />
EventPractives.js</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">const</span> <span class="nx">EventPractices</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">return</span> <span class="p">(</span>
     <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
       <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Event<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
     <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
   <span class="p">);</span>
 <span class="p">};</span>
 <span class="err">​</span>
 <span class="k">export</span> <span class="k">default</span> <span class="nx">EventPractices</span><span class="p">;</span>
</code></pre></div></div>

<p>App.js</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err"> </span><span class="k">import</span> <span class="dl">'</span><span class="s1">./App.css</span><span class="dl">'</span><span class="p">;</span>
<span class="err"> </span><span class="k">import</span> <span class="nx">EventPractices</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./EventPractices</span><span class="dl">'</span><span class="p">;</span>
<span class="err"> ​</span>
<span class="err"> ​</span>
<span class="err"> </span><span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span>
<span class="err"> </span> <span class="err"> </span><span class="k">return</span> <span class="p">&lt;</span><span class="nc">EventPractices</span> <span class="p">/&gt;;</span>
<span class="err"> ​</span>
<span class="err"> </span><span class="p">};</span>
<span class="err"> ​</span>
<span class="err"> </span><span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p>onChange 이벤트를 핸들링하는 예제를 만들어보도록 하겠습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">EventPractices</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>이벤트<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span>
        <span class="na">type</span><span class="p">=</span><span class="s">"text"</span>
        <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
        <span class="p">}</span><span class="si">}</span>
      <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">EventPractices</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="208" alt="1" src="https://user-images.githubusercontent.com/95404736/177163665-3c1766e6-cfb3-4e1e-b91a-b8003ee24760.png" /><br />
input 박스에 위와 같이 입력하면</p>

<p><img width="335" alt="2" src="https://user-images.githubusercontent.com/95404736/177163672-da2d823e-d161-4502-9f4e-4a17bbd0c184.png" /><br />
입력할 때 마다 값이 콘솔에 기록됩니다.</p>

<p>만약 input이 여러개라면 아래처럼 하면 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">EventPractices</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">setValue</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">value2</span><span class="p">,</span> <span class="nx">setValue2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handleChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">첫 번째 input : </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="nx">setValue</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">handleChange2</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">두 번째 input : </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="nx">setValue2</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>이벤트<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleChange</span><span class="si">}</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span> <span class="p">/&gt;</span>

        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleChange2</span><span class="si">}</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value2</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">EventPractices</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="323" alt="3" src="https://user-images.githubusercontent.com/95404736/177165682-560d905c-724d-455e-8103-7ad05f2c6a78.png" />
<img width="338" alt="4" src="https://user-images.githubusercontent.com/95404736/177165686-95b7aa42-7b55-4cc9-9b61-cb6170dbce99.png" /></p>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 리액트 이벤트 핸들링을 공부했습니다. 문법이 살짝 다르긴 하지만 기존 바닐라JS나 JQuery등에서 이벤트를 다루던 방식과 유사하기 때문에 금방 적응하고 쉽게 활용할 수 있게 되었습니다.</p>

<h3 id="참고-사이트">참고 사이트</h3>

<p><a href="https://ko.reactjs.org/docs/handling-events.html">https://ko.reactjs.org/docs/handling-events.html</a><br />
참고 서적 : 리액트를 다루는 기술(김민준 저자)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="react" /><category term="이벤트" /><category term="이벤트핸들링" /><category term="event" /><summary type="html"><![CDATA[React에서 이벤트 다루기]]></summary></entry><entry><title type="html">자바스크립트 Promise 이해하기</title><link href="http://localhost:4000/javascript/post6/" rel="alternate" type="text/html" title="자바스크립트 Promise 이해하기" /><published>2022-06-29T00:00:00+09:00</published><updated>2022-06-29T00:00:00+09:00</updated><id>http://localhost:4000/javascript/post6</id><content type="html" xml:base="http://localhost:4000/javascript/post6/"><![CDATA[<h2 id="promise란">Promise란?</h2>

<p>Promise는 자바스크립트 비동기 처리에 사용되는 객체입니다. 자바스크립트의 세계에서는 대부분의 작업들이 비동기로 이루어지기 때문에 프론트엔드 개발을 하든 백엔드 개발을 하든 자바스크립트를 활용하여 웹 개발을 한다면 비동기 프로그래밍에 대한 이해가 꼭 필요합니다.</p>

<h2 id="자바스크립트에서-비동기-처리란">자바스크립트에서 비동기 처리란?</h2>

<p>자바스크립트에서 비동기 처리란 “특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 자바스크립트의 특성”을 의미합니다.</p>

<h2 id="promise를-사용하는-이유">Promise를 사용하는 이유</h2>

<p>웹 개발을 하게되면 서버에서 받아온 데이터를 화면에 표시하는 경우가 많습니다. 데이터를 서버에 요청하고, 데이터가 로드되고, 로드된 데이터가 화면에 표시되는 식으로 진행되곤 하는데요. 만약 로드가 완료되지 않은 상태에서 데이터를 다 받아온 것 마냥 표시하려고 하면 오류가 발생하거나 빈 화면이 뜨게됩니다. 이런 문제점을 해결하기 위한 방법 중 하나가 바로 Promise입니다. 즉 Promise를 사용하게 되면 비동기 작업을 순차적으로 처리하거나 병렬로 진행하는 등 작업을 좀 더 수월하게 처리할 수 있게 되는 것입니다.</p>

<h2 id="promise의-특징">Promise의 특징</h2>

<p>Promise의 특징으로는 3가지 상태를 가지고 있다는 점을 말할 수 있는데요. Promise를 생성하고 종료될 때 까지 아래의 3가지 상태를 갖게 됩니다.</p>

<ul>
  <li>Pending(대기) : 비동기 로직 처리가 완료되지 않은 상태(결과를 기다리는 중)</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>Fulfilled(이행) : 비동기 로직 처리가 완료된 상태(정상적으로 수행, 결과값 가짐)</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">resolve</span><span class="p">();</span>
<span class="p">});</span> <span class="c1">//이렇게 resolve가 실행되면 이행 상태가 된다.</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 이행 상태가 된 후에는 then을 이용하여 결과값을 받을 수 있다.</span>
<span class="c1">// resolve()의 결과 값 data를 resolveData로 받음</span>
<span class="nx">getData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolvedData</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">resolvedData</span><span class="p">);</span> <span class="c1">// 100;</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>Rejected(실패) : 비동기 로직 처리의 실패 또는 오류 상태(수행이 비정상적으로 끝남)</li>
</ul>

<h2 id="promise-생성하기">Promise 생성하기</h2>

<p>Promise를 생성하는 방법은 아래와 같이 3가지 방법이 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//1</span>
<span class="kd">const</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>

<span class="c1">//2</span>
<span class="kd">const</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//거부 상태의 Promise 생성</span>

<span class="c1">//3</span>
<span class="kd">const</span> <span class="nx">p3</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">param</span><span class="p">);</span>
</code></pre></div></div>

<p>첫 번째 방법으로 Promise를 만들었을 때는 resolve와 reject라는 콜백 함수를 매개변수로 갖고 비동기로 어떤 작업을 수행하고 난 뒤에 성공하면 resolve를 호출하고 실패하면 reject를 호출하면 됩니다.</p>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 자바의 비동기 처리에 사용되는 <code class="language-plaintext highlighter-rouge">Promise</code>에 대한 이해를 해보았습니다. <code class="language-plaintext highlighter-rouge">async</code>와 <code class="language-plaintext highlighter-rouge">await</code>도 조만간 공부해서 정리해봐야겠다는 생각이 드네요 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="JavaScript" /><category term="js" /><category term="javaScript" /><category term="자바스크립트" /><category term="Promise" /><category term="비동기" /><summary type="html"><![CDATA[자바스크립트 Promise]]></summary></entry><entry><title type="html">자바스크립트 프로토타입(prototype) 이해하기</title><link href="http://localhost:4000/javascript/post5/" rel="alternate" type="text/html" title="자바스크립트 프로토타입(prototype) 이해하기" /><published>2022-06-28T00:00:00+09:00</published><updated>2022-06-28T00:00:00+09:00</updated><id>http://localhost:4000/javascript/post5</id><content type="html" xml:base="http://localhost:4000/javascript/post5/"><![CDATA[<h2 id="prototype이란">prototype이란?</h2>

<p>prototype(프로토타입)은 한국어로 원형이라는 뜻인데 자바스크립트에서는 프로토타입으로 상속 개념을 제공하고 있습니다. <code class="language-plaintext highlighter-rouge">(자바스크립트에서는 객체간의 관계가 복사가 아니라 연결이 맺어진 것이기 때문에 상속보다는 위임이 좀 더 적절한 표현) </code>자바스크립트는 모든 객체들이 부모객체가 가진 메소드와 속성을 상속받는 것이 가능한데 사실 자바스크립트는 Java나 Python 등과 달리 클래스 개념이 없기 때문에 상속 기능이 없지만 프로토 타입이라는 것을 통해 상속을 흉내내도록 구현하고 있습니다. 그래서 자바스크립트는 프로토타입 기반 언어(prototype-based language)라고 불립니다. ES6 이후에 클래스가 생겨나긴 했지만 그것이 위와 같은 프로토타입 객체지향 모델을 폐지하고 나온 새로운 모델은 아니고 Java와 같은 객체 지향 프로그래밍 언어에서 사용하는 것과 유사하게 사용할 수 있도록 문법을 제공하는 것으로, ES6 이후 나온 클래스 또한 어디까지나 자바스크립트의 함수이며 내부적으로는 프로토타입 모델을 따르고 있습니다.</p>

<h2 id="자바스크립트에서-함수란">자바스크립트에서 함수란?</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">()</span> <span class="p">{}</span>
</code></pre></div></div>

<p>자바스크립트에서 함수는 곧 객체입니다. 객체는 속성(property)을 가지고 함수 또한 property를 갖습니다. 기본적으로 위와 같이 함수를 정의한다면 <code class="language-plaintext highlighter-rouge">Person 객체</code>와 함께 <code class="language-plaintext highlighter-rouge">Person의 prototype 객체</code>가 함께 생깁니다. 이 때 생성된 객체의 부모 역할을 하는 것은 생성자 Person 자신이 아니라 prototype 객체입니다.</p>

<h2 id="constructor-prototype-instance">Constructor, prototype, instance</h2>

<p>어떤 생성자 함수(Constructor)를 <code class="language-plaintext highlighter-rouge">new</code> 연산자와 함께 호출한다면 Constructor에서 정의된 내용을 바탕으로 새로운 instance가 생성됩니다. 이 때 instance에는 <code class="language-plaintext highlighter-rouge">__proto__</code> 라는 property가 자동으로 부여되고 이 property는 Constructor의 prototype property를 참조하게 됩니다.</p>

<h2 id="__proto__"><code class="language-plaintext highlighter-rouge">__proto__</code></h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">아기사자</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">;</span> <span class="c1">// 엄마사자</span>
<span class="nx">아기사자</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">엄마사자</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// true;</span>
</code></pre></div></div>

<p>모든 객체는 <code class="language-plaintext highlighter-rouge">__proto__</code> 를 통해 자신이 물려받은 [[Prototype]] 값에 접근할 수 있습니다. 즉 참조하는 용도로 쓰이며 상위 객체가 무엇인지 알 수 있는 것입니다. 그런데 [[Prototype]] 내부 슬롯에는 직접 접근이 불가합니다. 이는 프로토타입 체인의 단방향을 지키기 위해서입니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="p">{};</span>
<span class="c1">//child의 프로토타입을 parent로</span>
<span class="nx">child</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">;</span>
<span class="c1">//parent의 프로토타입을 child로</span>
<span class="nx">parent</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span> <span class="c1">// TypeError:Cyclic__proto__ value</span>
</code></pre></div></div>

<p>프로토타입 체인이 단방향성을 지켜야 하는 이유는 위와 같이 코드를 짜면 서로가 자신의 프로토타입이 되는 비정상적인 경우가 만들어지기 때문입니다.</p>

<h2 id="프로토타입-체인-prototype-chain">프로토타입 체인 (prototype chain)</h2>

<p>자식은 부모로부터 자신이 물려받은 유전자를 활용할 수 있고, 부모 뿐만 아니라 더 상위 부모의 유전자 까지도 활용할 수 있습니다.</p>

<p>모든 프로토타입 체이닝의 종점은 <code class="language-plaintext highlighter-rouge">Object.prototype</code> 입니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayMyName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">LDK</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">//hasOwnProperty는 Object.prototype의 메소드로</span>
<span class="c1">//객체가 특정 property를 가지고 있는지 나타내는 Boolean 값을 리턴한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">));</span> <span class="c1">//true</span>
</code></pre></div></div>

<p>위 예제를 보면 Person 생성자 함수에 의해서 생성된 me라는 객체는 Object.prototype 메소드인 hasOwnProperty를 호출할 수 있다는 것을 알 수 있습니다. 객체는 chain rule(연쇄법칙) 구조로 property나 method를 활용하기 때문에 찾고자 하는게 me에서 없는 경우에는 상위 prototype에서 찾고 거기서 없다면 또 상위 prototype에서 찾고 최종적으로는 Object.prototype에서 찾게 되는 것입니다.</p>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘 이렇게 자바스크립트의 중요한 기본 개념인 프로토타입을 이해하였고 <code class="language-plaintext highlighter-rouge">constructor</code>, <code class="language-plaintext highlighter-rouge">__proto__</code>, <code class="language-plaintext highlighter-rouge">prototype</code>이 어떤 관계를 갖고 있는지 알게되었습니다.</p>

<h3 id="본-포스팅은-아래-사이트를-참고하여-작성하였습니다">본 포스팅은 아래 사이트를 참고하여 작성하였습니다.</h3>

<ul>
  <li>생활코딩 prototype 강의</li>
  <li><a href="https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Object_prototypes">https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Object_prototypes</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="JavaScript" /><category term="js" /><category term="javaScript" /><category term="자바스크립트" /><category term="프로토타입" /><category term="prototype" /><summary type="html"><![CDATA[자바스크립트 프로토타입(prototype)]]></summary></entry><entry><title type="html">리액트에서 UI 라이브러리 앤트 디자인(Ant Design) 사용하기</title><link href="http://localhost:4000/web/post4/" rel="alternate" type="text/html" title="리액트에서 UI 라이브러리 앤트 디자인(Ant Design) 사용하기" /><published>2022-06-27T00:00:00+09:00</published><updated>2022-06-27T00:00:00+09:00</updated><id>http://localhost:4000/web/post4</id><content type="html" xml:base="http://localhost:4000/web/post4/"><![CDATA[<h2 id="ant-design이란">Ant Design이란?</h2>

<p>Ant Design은 알리바바 그룹에서 개발한 UI 라이브러리로 리액트와 타입스크립트(Typescript)를 기반으로 제작되었으며 Layout, Button, Grid, Card 등 다양한 컴포넌트를 지원합니다.</p>

<h2 id="ant-design을-사용하게-된-계기">Ant Design을 사용하게 된 계기</h2>

<p>스프링으로 웹 개발을 하면서 인기 높은 CSS 프레임워크인 부트스트랩을 사용했던 적이 있습니다. 개인적으로 부트스트랩을 사용해보니 커스터마이징도 쉽고 개발 속도도 빨라져서 굉장히 편리하다고 느꼈는데요. 최근 회사에 입사하여 리액트로 개발을 하게 되면서 리액트에도 편하게 개발을 도와주는 Ant Design이 있다는 것을 알게 되었습니다. 많은 부분이 컴포넌트로 구현이 되어 있고 admin 페이지를 만들기 좋은 라이브러리다보니 실제로 회사에서 Antd를 사용하는 경우가 꽤나 많다고 합니다.</p>

<h2 id="ant-design의-장점">Ant Design의 장점</h2>

<p>디자인이 깔끔하고 예쁘다.<br />
엄청나게 많은 컴포넌트들을 제공한다.<br />
빠르게 완성도 높은 admin 페이지를 제작할 수 있다.</p>

<h2 id="ant-design의-단점">Ant Design의 단점</h2>

<p>커스터마이징이 어렵다.<br />
많은 것을 제공하므로 용량이 크다.</p>

<h2 id="설치-방법">설치 방법</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">antd</span>
</code></pre></div></div>

<p><img width="739" alt="1" src="https://user-images.githubusercontent.com/95404736/175957425-2868ad78-6eed-499c-9f18-4217ebf97045.png" /></p>

<h2 id="사용-방법">사용 방법</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">antd/dist/antd.css</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>npm으로 설치가 완료되면 <code class="language-plaintext highlighter-rouge">index.js</code>에 위와 같이 스타일을 import 하고 손쉽게 사용 가능합니다.</p>

<h2 id="툴팁-띄워보기">툴팁 띄워보기</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span><span class="p">,</span> <span class="nx">Tooltip</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">antd</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FilterOutlined</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@ant-design/icons</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"App"</span><span class="p">&gt;</span>
      <span class="p">&lt;&gt;</span>
        <span class="p">&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"Menu"</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Tooltip</span> <span class="na">placement</span><span class="p">=</span><span class="s">"top"</span> <span class="na">title</span><span class="p">=</span><span class="s">"툴팁!!"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">shape</span><span class="p">=</span><span class="s">"round"</span> <span class="na">icon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">FilterOutlined</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;</span>
          <span class="p">&lt;/</span><span class="nc">Tooltip</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="74" alt="2" src="https://user-images.githubusercontent.com/95404736/175968267-3ca1c031-1275-43bb-b9d1-7fd0732fb118.png" /></p>

<h3 id="ant-design-공식-홈페이지">Ant Design 공식 홈페이지</h3>

<p><a href="https://ant.design/">https://ant.design/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="react" /><category term="ui" /><category term="web" /><category term="antdesign" /><category term="design" /><summary type="html"><![CDATA[React UI 라이브러리 Ant Design]]></summary></entry><entry><title type="html">리액트 Hooks : useState()</title><link href="http://localhost:4000/react/post3/" rel="alternate" type="text/html" title="리액트 Hooks : useState()" /><published>2022-06-27T00:00:00+09:00</published><updated>2022-06-27T00:00:00+09:00</updated><id>http://localhost:4000/react/post3</id><content type="html" xml:base="http://localhost:4000/react/post3/"><![CDATA[<h2 id="상태state란-무엇인가">상태(state)란 무엇인가?</h2>

<blockquote>
  <p>리액트 컴포넌트에서 동적인 값을 상태(state) 라고 한다. 리액트 16.8 이전 버전에서는 함수형 컴포넌트에서 상태를 관리할 수 없었지만 16.8 버전 이후 Hooks 라는 기능이 도입되어 함수형 컴포넌트에서도 상태 관리가 가능하게 되었다.</p>
</blockquote>

<h2 id="usestate-함수-사용법">useState() 함수 사용법</h2>

<p>Counter.js</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">setNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">onIncrease</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">onDecrease</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">number</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onIncrease</span><span class="si">}</span><span class="p">&gt;</span>+1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onDecrease</span><span class="si">}</span><span class="p">&gt;</span>-1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Counter</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>useState를 사용하기 위해서는 가장 먼저 위와 같이 리액트 패키지에서 useState 함수를 불러와야 한다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">상태</span> <span class="nx">값</span> <span class="nx">저장</span> <span class="nx">변수</span> <span class="p">,</span> <span class="nx">상태값</span> <span class="nx">변경해주는</span> <span class="nx">setter</span> <span class="nx">함수</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">상태</span> <span class="nx">초기</span> <span class="nx">값</span><span class="p">);</span>
</code></pre></div></div>

<p>useState 함수를 호출하면 위처럼 배열을 반환하게 된다.<br />
첫 번째 원소는 현재 상태 값을 저장하는 변수이고, 두 번째 원소는 상태 값을 바꿔주는 setter 함수다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">onIncrease</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">onDecrease</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>상태 값 저장 변수가 아니라 <code class="language-plaintext highlighter-rouge">setter</code> 함수(setNumber)를 사용해서, 파라미터로 전달받은 값을 최신상태로 바꿀 수 있다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="useState" /><category term="Hooks" /><category term="react" /><category term="setState" /><summary type="html"><![CDATA[useState를 통해서 동적 상태관리하기]]></summary></entry><entry><title type="html">마크다운(Markdown) 문법</title><link href="http://localhost:4000/blog/post2/" rel="alternate" type="text/html" title="마크다운(Markdown) 문법" /><published>2022-06-26T00:00:00+09:00</published><updated>2022-06-26T00:00:00+09:00</updated><id>http://localhost:4000/blog/post2</id><content type="html" xml:base="http://localhost:4000/blog/post2/"><![CDATA[<h2 id="마크다운markdown-이란">마크다운(Markdown) 이란?</h2>

<blockquote>
  <p>텍스트 기반의 마크업 언어로 GitHub에서 README 파일을 편집할 때 많이 쓰인다. 가독성이 좋고 간단해서 배우기 쉽다.</p>
</blockquote>

<h2 id="제목">제목</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 제목 1단계

## 제목 2단계

### 제목 3단계

#### 제목 4단계

##### 제목 5단계

###### 제목 6단계
</code></pre></div></div>

<h1 id="제목-1단계">제목 1단계</h1>

<h2 id="제목-2단계">제목 2단계</h2>

<h3 id="제목-3단계">제목 3단계</h3>

<h4 id="제목-4단계">제목 4단계</h4>

<h5 id="제목-5단계">제목 5단계</h5>

<h6 id="제목-6단계">제목 6단계</h6>

<h2 id="강조">강조</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>**볼드체**
_이탤릭체_
~~취소선~~
&lt;u&gt;밑줄&lt;/u&gt;
</code></pre></div></div>

<p><strong>볼드체</strong><br />
<em>이탤릭체</em><br />
<del>취소선</del><br />
<u>밑줄</u></p>

<h2 id="리스트">리스트</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 첫번째 리스트
1. 두번째 리스트
1. 세번째 리스트

+ 순서 없는 리스트
  - 그 다음 리스트
    * 그 다음 리스트
      + 그 다음 리스트
</code></pre></div></div>

<ol>
  <li>첫번째 리스트</li>
  <li>두번째 리스트</li>
  <li>세번째 리스트</li>
</ol>

<ul>
  <li>순서 없는 리스트
    <ul>
      <li>그 다음 리스트
        <ul>
          <li>그 다음 리스트
            <ul>
              <li>그 다음 리스트</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="인용">인용</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; 첫번째 인용부분
&gt;
&gt; &gt; 두번째 인용부분
&gt; &gt;
&gt; &gt; &gt; 세번째 인용부분
</code></pre></div></div>

<blockquote>
  <p>첫번째 인용부분</p>

  <blockquote>
    <p>두번째 인용부분</p>

    <blockquote>
      <p>세번째 인용부분</p>
    </blockquote>
  </blockquote>
</blockquote>

<h2 id="줄바꿈">줄바꿈</h2>

<p>문장 끝에 공백 두 칸 넣기,<br />
또는 줄을 바꾼 뒤 #적기</p>

<h2 id="링크">링크</h2>

<h3 id="1-url-이름-직접-지정">1. URL 이름 직접 지정</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[LIME'S TIL](https://ilimes.github.io "설명 부분")
</code></pre></div></div>

<p><a href="https://ilimes.github.io" title="설명 부분">LIME’S TIL</a></p>

<h3 id="2-url-주소로-바로-연결">2. URL 주소로 바로 연결</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;https://ilimes.github.io/&gt;
</code></pre></div></div>

<p><a href="https://ilimes.github.io/">https://ilimes.github.io/</a></p>

<h2 id="표-만들기">표 만들기</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| 항목1 | 항목2  |  항목3   |
| :---: | :----: | :------: |
|  표   |  표표  |  표표표  |
| 표표  | 표표표 | 표표표표 |
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">항목1</th>
      <th style="text-align: center">항목2</th>
      <th style="text-align: center">항목3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">표</td>
      <td style="text-align: center">표표</td>
      <td style="text-align: center">표표표</td>
    </tr>
    <tr>
      <td style="text-align: center">표표</td>
      <td style="text-align: center">표표표</td>
      <td style="text-align: center">표표표표</td>
    </tr>
  </tbody>
</table>

<h2 id="이미지-삽입">이미지 삽입</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![](https://cdn.jsdelivr.net/gh/ilimes/ilimes.github.io/avatar.png)
</code></pre></div></div>

<p><img src="https://cdn.jsdelivr.net/gh/ilimes/ilimes.github.io/avatar.png" alt="" /></p>

<h2 id="코드-인용">코드 인용</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
```
function test() {

console.log("test!!!");

}
```
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function test() {
  console.log("test!!!");
}
</code></pre></div></div>

<p>아래와 같이 해당 언어에 맞게 syntax highlighter 적용도 가능.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
```javascript
function test() {

console.log("test!!!");

}```

</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">test!!!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Blog" /><category term="Blog" /><category term="Markdown" /><category term="Jekyll" /><summary type="html"><![CDATA[마크다운(Markdown) 문법에 관한 글]]></summary></entry></feed>