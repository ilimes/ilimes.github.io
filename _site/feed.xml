<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-20T21:39:38+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">React 상태관리 라이브러리 zustand</title><link href="http://localhost:4000/react/post64/" rel="alternate" type="text/html" title="React 상태관리 라이브러리 zustand" /><published>2022-12-15T00:00:00+09:00</published><updated>2022-12-15T00:00:00+09:00</updated><id>http://localhost:4000/react/post64</id><content type="html" xml:base="http://localhost:4000/react/post64/"><![CDATA[<h3 id="️-zustand">✔️ zustand?</h3>

<p>오늘은 리액트 상태관리 라이브러리 중 하나인 zustand를 알아보고자 합니다. 오늘 알아볼 zustand는 직장동료분께서 요즘 많이들 사용하는 라이브러리 중 하나이고 사용하기도 쉽다고 알려주셨는데요. 독일어로 zustand가 상태라고 하더라고요. 과연 zustand는 기존에 사용하던 redux와 비교하여 어떤 차이가 있을지, 사용 방법은 어떤지 알아보도록 하겠습니다.</p>

<h3 id="️-zustand의-장점">✔️ zustand의 장점</h3>

<p>일단 zustand는 코드가 간결합니다. redux를 많이들 기피하는 이유 중 하나가 바로 보일러플레이트 코드가 존재한다는 것인데요. 사실 그러한 단점을 보완하기 위해서 Redux Toolkit이 등장하였지만 보일러플레이트가 존재한다는 점은 여전히 변함이 없는데요. zustand는 보일러플레이트가 거의 없다고 봐도 무방할 정도로 코드가 간결합니다.</p>

<h3 id="️-zustand-사용법">✔️ zustand 사용법</h3>

<h4 id="설치하기">설치하기</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm install zustand
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="store-생성하기">store 생성하기</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">// store.js</span>

<span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// create를 이용하여 zustand 불러옴과 동시에 상태와 상태를 변경하는 액션 정의</span>
<span class="kd">const</span> <span class="nx">useStore</span> <span class="o">=</span> <span class="nx">create</span><span class="p">((</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">increasePopulation</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">bears</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})),</span>
  <span class="na">removeAllBears</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}),</span>
<span class="p">}));</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useStore</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>초기값은 bears로 선언,
그 값을 조작하는 increasePopulation(bears를 1씩 증가)과 removeAllBears(bears를 0으로 리셋)를 선언,
구독할 리스너는 set을 활용하여 관리.</p>

<h4 id="생성한-store-불러와-사용">생성한 store 불러와 사용</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">// App.js</span>

<span class="k">import</span> <span class="nx">useStore</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../store.js</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">bears</span><span class="p">,</span> <span class="nx">increasePopulation</span><span class="p">,</span> <span class="nx">removeAllBears</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useStore</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span>
  <span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">bears</span><span class="si">}</span> around here ...<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">increasePopulation</span><span class="si">}</span><span class="p">&gt;</span>one up<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">removeAllBears</span><span class="si">}</span><span class="p">&gt;</span>remove all<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>생성한 store를 불러와서 간단하게 사용하면 끝입니다 👍
Zustand는 Middleware로 Devtools를 지원하고 있어서 Redux Devtools을 쉽게 연결하여 사용할 수 있기도 합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// store.js</span>

<span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">devtools</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand/middleware</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// ✔️</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="p">(</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">increasePopulation</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">bears</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})),</span>
  <span class="na">removeAllBears</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}),</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">useStore</span> <span class="o">=</span> <span class="nx">create</span><span class="p">(</span><span class="nx">devtools</span><span class="p">(</span><span class="nx">store</span><span class="p">));</span> <span class="c1">// ✔️</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useStore</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 store를 생성하면 개발자 도구에서 store의 상태 확인이 가능합니다. Redux DevTools는 아래 크롬 웹스토어 링크에서 설치할 수 있습니다.</p>

<ul>
  <li>Redux DevTools : <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=ko&amp;refresh=1">https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=ko&amp;refresh=1</a></li>
</ul>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="https://github.com/pmndrs/zustand">https://github.com/pmndrs/zustand</a></li>
  <li><a href="https://codesandbox.io/s/github/pmndrs/zustand/tree/main/examples">https://codesandbox.io/s/github/pmndrs/zustand/tree/main/examples</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="상태관리" /><category term="zustand" /><summary type="html"><![CDATA[zustand 알아보기]]></summary></entry><entry><title type="html">return과 return false 의 차이?</title><link href="http://localhost:4000/javascript/post63/" rel="alternate" type="text/html" title="return과 return false 의 차이?" /><published>2022-12-13T00:00:00+09:00</published><updated>2022-12-13T00:00:00+09:00</updated><id>http://localhost:4000/javascript/post63</id><content type="html" xml:base="http://localhost:4000/javascript/post63/"><![CDATA[<h3 id="return">return</h3>

<p><code class="language-plaintext highlighter-rouge">return</code> 명령문은 함수 실행을 종료하고, 주어진 값을 함수 호출 지점으로 반환합니다.</p>

<h3 id="return과-return-false의-차이">return과 return false의 차이</h3>

<p>자바스크립트로 개발을 하다보면 return으로 함수의 동작을 멈추는 경우가 종종 있습니다. 일반적으로 그냥 return; 을 사용해서 해당 지점을 끝내는 경우가 많은데 return false; 와는 어떤 차이가 있을지 궁금해졌습니다.</p>

<h4 id="구문">구문</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">return</span> <span class="p">[[</span><span class="nx">expression</span><span class="p">]];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">expression</code> : 반환할 값으로 사용할 표현식. 생략할 경우 undefined를 대신 반환합니다.</p>

<p>우선 위와 같이 return시 표현식을 생략하는 경우에는 undefined를 반환하게 됩니다. 보통 함수는 리턴값을 보고 어떤 값을 가지는지 알게 되는데, return 만 사용하게 되는 경우 의미 전달이 애매해지게 되는데요. return false; 를 사용하게 되면 리턴값이 명시되어 있으므로 명확한 의미 전달과 가독성 향상 측면에서 좋다는 의견이 꽤나 많더라고요.</p>

<p>둘 중 무엇을 사용해도 퍼포먼스 측면에서는 큰 차이가 없지만 명확한 의미전달, 가독성 향상 때문이라도 되도록이면 return false; 사용을 지향해야겠다는 생각이 듭니다.</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/return">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/return</a><br />
<a href="https://yongblog.tistory.com/entry/onclick-%EC%97%90%EC%84%9C-return-false-%EC%9D%98-%EC%9D%98%EB%AF%B8">https://yongblog.tistory.com/entry/onclick-%EC%97%90%EC%84%9C-return-false-%EC%9D%98-%EC%9D%98%EB%AF%B8</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="JavaScript" /><category term="js" /><category term="return" /><category term="return false" /><category term="자바스크립트" /><summary type="html"><![CDATA[return; return false; 는 어떤 차이가 있을까]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (6)</title><link href="http://localhost:4000/uiux/post62/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (6)" /><published>2022-12-07T00:00:00+09:00</published><updated>2022-12-07T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post62</id><content type="html" xml:base="http://localhost:4000/uiux/post62/"><![CDATA[<p>Project Management Dashboard<br />
by. <a href="https://dribbble.com/Dedewahidin">Ciptasmara</a></p>

<p><img width="793" alt="image" src="https://user-images.githubusercontent.com/95404736/206194128-71147734-d336-4a8c-bfc7-24af5ce0e8bf.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/14417690-Project-Management-Dashboard/">https://dribbble.com/shots/14417690-Project-Management-Dashboard/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">React Query 알아보기</title><link href="http://localhost:4000/react/post61/" rel="alternate" type="text/html" title="React Query 알아보기" /><published>2022-12-06T00:00:00+09:00</published><updated>2022-12-06T00:00:00+09:00</updated><id>http://localhost:4000/react/post61</id><content type="html" xml:base="http://localhost:4000/react/post61/"><![CDATA[<h3 id="️-react-query란">✔️ React-Query란?</h3>

<p><code class="language-plaintext highlighter-rouge">React Query</code> 는 서버에 있던 값을 클라이언트로 가져오거나, 캐싱 또는 동기화 등 일련의 비동기 과정들을 편하게 하는 데 사용되는 리액트 라이브러리 입니다.</p>

<h3 id="️-react-query의-장점">✔️ React-Query의 장점</h3>

<p>리액트 쿼리를 사용하면 프로젝트 구조가 단순해지고, 프론트엔드 개발시 귀찮을 수 있는 몇가지 일들을 수행해줍니다.</p>

<ul>
  <li>효율적인 캐싱 관리</li>
  <li>같은 데이터에 대하여 여러번의 요청이 있을 시 중복을 제거 (옵션으로 중복 호출 허용 시간 조절도 가능)</li>
  <li>데이터가 오래되었을 경우 알아서 업데이트 해줌</li>
  <li>페이징 처리 성능 최적화</li>
  <li>Redux로 비동기 데이터를 관리하는 것 보다 코드 분량이 적음</li>
</ul>

<h3 id="️-설치하기">✔️ 설치하기</h3>

<p>리액트 쿼리는 npm 또는 yarn으로 손쉽게 설치할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>npm <span class="nb">install </span>react-query
yarn <span class="nb">install </span>react-query
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-react-query-기본-세팅">✔️ React-Query 기본 세팅</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">// src/index.js</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">QueryClient</span><span class="p">,</span> <span class="nx">QueryClientProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-query</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ReactQueryDevtools</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-query/devtools</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">queryClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueryClient</span><span class="p">();</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">StrictMode</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">QueryClientProvider</span> <span class="na">client</span><span class="p">=</span><span class="si">{</span><span class="nx">queryClient</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="cm">/* devtools */</span><span class="si">}</span>
      <span class="p">&lt;</span><span class="nc">ReactQueryDevtools</span> <span class="na">initialIsOpen</span><span class="p">=</span><span class="si">{</span><span class="kc">true</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">App</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">QueryClientProvider</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">StrictMode</span><span class="p">&gt;,</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">)</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-queries">✔️ Queries</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">useQuery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-query</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">useQuery</span><span class="p">(</span><span class="dl">"</span><span class="s2">todos</span><span class="dl">"</span><span class="p">,</span> <span class="nx">fetchTodoList</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">useQuery</code> 의 첫번째 파라미터는 unique key를 입력합니다. 두번째 파라미터는 데이터를 패칭하기 위한 비동기 함수를 넣어줍니다.</li>
  <li>첫번째 파라미터로 설정한 unique key 는 다른 컴포넌트에서도 해당 키를 사용하여 호출하는 식으로 활용 가능합니다.</li>
  <li>unique key는 String과 Array를 받습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">useQuery</code> 는 비동기로 작동합니다.</li>
</ul>

<h4 id="usequery-return-값에-포함된-states">useQuery return 값에 포함된 states</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">isLoading</code> or status === ‘loading’ : 현재 데이터를 요청 중이나 아직 데이터가 없을 경우</li>
  <li><code class="language-plaintext highlighter-rouge">isError</code> or status === ‘error’: 쿼리에서 에러가 났을 경우</li>
  <li><code class="language-plaintext highlighter-rouge">isSuccess</code> or status === ‘success’ - 쿼리 요청 성공한 경우</li>
  <li><code class="language-plaintext highlighter-rouge">isIdle</code> or status === ‘idle’: 이 쿼리는 현재 사용할 수 없을 때 나옴</li>
  <li><code class="language-plaintext highlighter-rouge">isFetching</code> : 데이터 요청 중일 때는 (내부적으로 리패칭 중 일때도 포함) 항상 True를 리턴한다</li>
</ul>

<h4 id="usequery-동기적으로-실행">useQuery 동기적으로 실행</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="nx">todoList</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">isFetching</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useQuery</span><span class="p">(</span><span class="dl">"</span><span class="s2">todos</span><span class="dl">"</span><span class="p">,</span> <span class="nx">fetchTodoList</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span>
  <span class="na">data</span><span class="p">:</span> <span class="nx">nextTodo</span><span class="p">,</span>
  <span class="nx">error</span><span class="p">,</span>
  <span class="nx">isFetching</span><span class="p">,</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">useQuery</span><span class="p">(</span><span class="dl">"</span><span class="s2">nextTodos</span><span class="dl">"</span><span class="p">,</span> <span class="nx">fetchNextTodoList</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">enabled</span><span class="p">:</span> <span class="o">!!</span><span class="nx">todoList</span><span class="p">,</span> <span class="c1">// true가 되면 fetchNextTodoList를 실행한다</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">enabled</code> 옵션을 사용하는 경우 useQuery를 사용할 때 동기적으로 사용가능하게 해줍니다.</p>

<h4 id="usequeries">useQueries</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">App</span><span class="p">({</span> <span class="nx">users</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">userQueries</span> <span class="o">=</span> <span class="nx">useQueries</span><span class="p">(</span>
    <span class="nx">users</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="na">queryKey</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">user</span><span class="dl">"</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span>
        <span class="na">queryFn</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">fetchUserById</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">),</span>
      <span class="p">};</span>
    <span class="p">})</span>
  <span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="쿼리-무효화-시키기">쿼리 무효화 시키기</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="p">{</span> <span class="nx">mutate</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useMutation</span><span class="p">(</span><span class="nx">apis</span><span class="p">.</span><span class="nx">update</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">onSuccess</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">queryClient</span><span class="p">.</span><span class="nx">invalidateQueries</span><span class="p">(</span><span class="dl">"</span><span class="s2">all</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//invalidateQueries(무효화 시킬 queryKey 이름)</span>
    <span class="nx">day_input</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
    <span class="nx">time_input</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">invalidateQueries</code> 를 사용하게 되면 데이터가 최신으로 변경되었을 때 이전 데이터를 무효화 시킬 수 있습니다.</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://tanstack.com/query/v4/docs/guides/window-focus-refetching?from=reactQueryV3&amp;original=https://react-query-v3.tanstack.com/guides/window-focus-refetching">https://tanstack.com/query/v4/docs/guides/window-focus-refetching?from=reactQueryV3&amp;original=https://react-query-v3.tanstack.com/guides/window-focus-refetching</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="리액트쿼리" /><category term="reactquery" /><summary type="html"><![CDATA[리액트 쿼리 알아보기]]></summary></entry><entry><title type="html">Git - Git bash에서 로그인한 계정 변경 방법</title><link href="http://localhost:4000/git/post60/" rel="alternate" type="text/html" title="Git - Git bash에서 로그인한 계정 변경 방법" /><published>2022-12-01T00:00:00+09:00</published><updated>2022-12-01T00:00:00+09:00</updated><id>http://localhost:4000/git/post60</id><content type="html" xml:base="http://localhost:4000/git/post60/"><![CDATA[<p>윈도우 환경에서 Git bash 터미널 사용 시 깃허브 계정을 바꾸고 싶은 경우가 종종 있습니다. 그런 경우 간단하게 바꾸는 방법을 알려드리도록 하겠습니다.</p>

<h3 id="️-현재-로그인한-계정-확인-방법">✔️ 현재 로그인한 계정 확인 방법</h3>

<ul>
  <li>이름 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git config user.name
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>이메일 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git config user.email
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-로그인-계정-변경하기">✔️ 로그인 계정 변경하기</h3>

<ul>
  <li>이름 바꾸기</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git config --global user.name 이름
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>이메일 바꾸기</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git config --global user.email 로그인할 이메일
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-자격증명-변경하기">✔️ 자격증명 변경하기</h3>

<p>로그인 계정 변경을 완료하여도 여전히 계정이 바뀌어 있지 않습니다. 계정을 완전히 바꾸기 위해서는 자격증명을 변경해줘야합니다.</p>

<ol>
  <li>검색 - 자격 증명 관리자</li>
  <li>Windows 자격증명 선택</li>
  <li>하단에 위치한 일반 자격 증명 - 깃허브 관련 항목(git:https://github.com) 찾기</li>
  <li>우측 화살표 눌러 창 늘리기 - 편집 또는 삭제버튼 누르기</li>
  <li>사용자 이름과 암호 형태면 변경해주기, token이라면 지워주기</li>
</ol>

<p>자격증명 지운 상태로 푸쉬를 하게되면 새로 로그인 하라는 화면이 나타나게 됩니다.<br />
그 때 새로운 계정 or 토큰으로 로그인 하면 정상적으로 사용이 가능합니다.</p>

<h3 id="️-토큰-생성하기">✔️ 토큰 생성하기</h3>

<p>혹시나 새로운 토큰을 생성하는 방법을 잊어버리셨다면 아래 방법대로 따라하시면 됩니다.</p>

<ol>
  <li>깃허브 Settings - Developer settings</li>
  <li>Personal access tokens - Generate new token</li>
  <li>repo 혹은 원하는 항목 선택 후 ‘Generate token’ 클릭</li>
  <li>토큰이 발급되는데 한 번 밖에 볼 수 없으니 잘 보관해두기</li>
</ol>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="github" /><category term="깃" /><category term="login" /><category term="계정" /><summary type="html"><![CDATA[Git bash 로그인 계정 변경]]></summary></entry><entry><title type="html">Nginx랑 Apache의 차이 알아보기</title><link href="http://localhost:4000/web/post59/" rel="alternate" type="text/html" title="Nginx랑 Apache의 차이 알아보기" /><published>2022-11-30T00:00:00+09:00</published><updated>2022-11-30T00:00:00+09:00</updated><id>http://localhost:4000/web/post59</id><content type="html" xml:base="http://localhost:4000/web/post59/"><![CDATA[<h3 id="️-웹-서버-web-server">✔️ 웹 서버 (Web Server)</h3>

<p>웹 서버란 HTTP를 통하여 웹 클라이언트가 요청한 데이터를 제공해주는 (=요청에 응답하는) 프로그램 입니다.<br />
에전에는 웹 서버로 Apache를 많이 사용했지만 최근에는 Nginx를 많이 사용합니다.</p>

<h3 id="️-apache">✔️ Apache</h3>

<p>프로세스 기반 접근 방식으로 하나의 스레드가 아닌 하나의 스레드가 하나의 요청을 처리하는 구조입니다.</p>

<h3 id="️-ngnix">✔️ Ngnix</h3>

<p>이벤트 중심 접근 방식으로 하나의 스레드 내에서 여러가지 요청을 처리하는 구조입니다.</p>

<h3 id="️-ngnix가-인기-많은-이유">✔️ Ngnix가 인기 많은 이유</h3>

<p>Ngnix는 대용량 트래픽 처리에 용이한 경량 웹서버입니다. Ngnix가 인기를 끌게 된 것에는 다양한 이유가 있을테지만, 그중에서도 몇 가지를 꼽자면 클라이언트의 요청을 처리하고 응답하는 방식이 다르고(Apache : 프로세스 기반 접근 방식, Ngnix : 이벤트 중심 접근 방식), 동적 컨텐츠 제공 시에는 성능이 비슷하지만 정적 컨텐츠를 제공할 때 Ngnix는 적은 비용으로 효율적인 제공이 가능하게 된다는 점을 들 수 있습니다.</p>

<h3 id="️-apache-vs-nginx">✔️ Apache vs Nginx</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Apache</th>
      <th style="text-align: center">NginX</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">요청 당 스레드 또는 프로세스가 처리하는 구조</td>
      <td style="text-align: center">비동기 이벤트 기반으로 요청</td>
    </tr>
    <tr>
      <td style="text-align: center">CPU/메모리 자원 낭비 심함</td>
      <td style="text-align: center">CPU/메모리 자원 사용률 낮음</td>
    </tr>
    <tr>
      <td style="text-align: center">NginX보다 모듈이 다양</td>
      <td style="text-align: center">Apache에 비해 다양한 모듈이 없음</td>
    </tr>
    <tr>
      <td style="text-align: center">PHP 모듈 등 직접 적재 가능</td>
      <td style="text-align: center">많은 접속자들 대응 가능</td>
    </tr>
    <tr>
      <td style="text-align: center">안정성, 확장성, 호환성 우세</td>
      <td style="text-align: center">성능 우세</td>
    </tr>
    <tr>
      <td style="text-align: center">동적 컨텐츠 단독 처리 가능</td>
      <td style="text-align: center">동적 컨텐츠 단독 처리 불가능</td>
    </tr>
  </tbody>
</table>

<p>오늘은 Ngnix에 대해 알아보았습니다. Apach를 사용하여 배포해본 경험은 있으니 조만간 Ngnix를 사용한 배포도 해보도록 하겠습니다.</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="https://www.nginx.com/blog/thread-pools-boost-performance-9x/">https://www.nginx.com/blog/thread-pools-boost-performance-9x/</a></li>
  <li><a href="https://serverguy.com/comparison/apache-vs-nginx/">https://serverguy.com/comparison/apache-vs-nginx/</a></li>
  <li><a href="https://velog.io/@deannn/Apache%EC%99%80-NginX-%EB%B9%84%EA%B5%90-%EC%B0%A8%EC%9D%B4%EC%A0%90">https://velog.io/@deannn/Apache%EC%99%80-NginX-%EB%B9%84%EA%B5%90-%EC%B0%A8%EC%9D%B4%EC%A0%90</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="개발" /><category term="웹" /><category term="웹개발" /><category term="ngnix" /><summary type="html"><![CDATA[Nhinx / Apache 차이는 무엇일까?]]></summary></entry><entry><title type="html">M1맥 iTerm2 터미널 꾸미기: zsh-syntax-highlighting 적용</title><link href="http://localhost:4000/setting/post58/" rel="alternate" type="text/html" title="M1맥 iTerm2 터미널 꾸미기: zsh-syntax-highlighting 적용" /><published>2022-11-26T00:00:00+09:00</published><updated>2022-11-26T00:00:00+09:00</updated><id>http://localhost:4000/setting/post58</id><content type="html" xml:base="http://localhost:4000/setting/post58/"><![CDATA[<h3 id="️-zsh-syntax-highlighting란">✔️ zsh-syntax-highlighting란?</h3>

<p>터미널 명령어에 하이라이트를 넣어주는 기능입니다.</p>

<h3 id="️-설치방법">✔️ 설치방법</h3>

<ul>
  <li>brew로 설치</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>brew <span class="nb">install </span>zsh-syntax-highlighting
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-zsh-파일-수정">✔️ zsh 파일 수정</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>vi ~/.zshrc
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 명령어 입력하여 설정 파일을 들어간 후<br />
i를 눌러 INSERT 모드로 변경하고나서<br />
하단 코드를 추가해줍니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>📌 M1맥인 경우
<span class="nb">source</span> /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

📌 인텔맥인 경우
<span class="nb">source</span> /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-저장하기">✔️ 저장하기</h3>

<p>코드 작성 후 ESC를 누르고 :wq를 입력해줍니다.<br />
soruce ~/.zshrc 명령어 까지 입력하면 즉시 적용됩니다.</p>

<h3 id="️-적용결과">✔️ 적용결과</h3>

<p><img width="475" alt="image" src="https://user-images.githubusercontent.com/95404736/204058051-2dd5f6cf-e351-48a3-959c-94798a266454.png" /></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Setting" /><category term="터미널" /><category term="iTerm2" /><category term="terminal" /><category term="zsh-syntax-highlighting" /><summary type="html"><![CDATA[터미널 꾸미기]]></summary></entry><entry><title type="html">[Lv.2] 루시와 엘라 찾기 (MySQL)</title><link href="http://localhost:4000/codingtest/post57/" rel="alternate" type="text/html" title="[Lv.2] 루시와 엘라 찾기 (MySQL)" /><published>2022-11-23T00:00:00+09:00</published><updated>2022-11-23T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post57</id><content type="html" xml:base="http://localhost:4000/codingtest/post57/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/59046">https://school.programmers.co.kr/learn/courses/30/lessons/59046</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">SELECT</span> <span class="n">ANIMAL_ID</span><span class="p">,</span> <span class="n">NAME</span><span class="p">,</span> <span class="n">SEX_UPON_INTAKE</span>
<span class="k">FROM</span> <span class="n">ANIMAL_INS</span>
<span class="k">WHERE</span> <span class="n">NAME</span> <span class="k">IN</span> <span class="p">(</span><span class="nv">"Lucy"</span><span class="p">,</span> <span class="nv">"Ella"</span><span class="p">,</span> <span class="nv">"Pickle"</span><span class="p">,</span> <span class="nv">"Rogan"</span><span class="p">,</span> <span class="nv">"Sabrina"</span><span class="p">,</span> <span class="nv">"Mitty"</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ANIMAL_ID</span> <span class="k">ASC</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>IN을 사용하면 특정 이름만 조회할 수 있습니다. 만약 특정 값이 아닌 경우에만 찾고싶다면 NOT IN을 사용할 수 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">Intersection Observer API 활용하여 React에서 무한스크롤 구현하기</title><link href="http://localhost:4000/react/post56/" rel="alternate" type="text/html" title="Intersection Observer API 활용하여 React에서 무한스크롤 구현하기" /><published>2022-11-22T00:00:00+09:00</published><updated>2022-11-22T00:00:00+09:00</updated><id>http://localhost:4000/react/post56</id><content type="html" xml:base="http://localhost:4000/react/post56/"><![CDATA[<h3 id="️-infinite-scroll">✔️ Infinite Scroll?</h3>

<p>무한스크롤(Infinite Scroll) 이란 말 그대로 스크롤을 무한으로 할 수 있는 기능을 말합니다. 불러와야 하는 게시글 목록이 많은 경우 무한스크롤을 활용하면 사용자 편의성과 클라이언트 부담을 덜 수 있다는 장점이 있습니다.</p>

<h3 id="️-intersection-observer-api-란">✔️ Intersection Observer API 란?</h3>

<blockquote>
  <p>Intersection Observer API는 타겟 요소와 상위 요소 또는 최상위 document 의 viewport 사이의 intersection 내의 변화를 비동기적으로 관찰하는 API입니다.</p>
</blockquote>

<p>MDN에서는 Intersection Observer API를 위와 같이 정의하고 있습니다. 쉽게 말하면 관찰 중인 요소가 사용자가 보고 있는 영역 안에 들어왔는지 알려주는 API라고 할 수 있습니다.</p>

<h4 id="️-options">✔️ Options</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">io</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>옵션부에는 root, rootMargin, threshold 3가지가 있습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">root</code> : 타겟 엘리먼트가 보이는지 안보이는지 결정할 뷰포트로 사용되는 엘리먼트 (기본값은 Browser Viewport)</li>
  <li><code class="language-plaintext highlighter-rouge">rootMargin</code> : root에 정의된 Element가 가진 마진값 (기본값은 0)</li>
  <li><code class="language-plaintext highlighter-rouge">threshold</code> : 타겟 엘리먼트가 root에 정의된 Element에 얼마나 노출되었을 때 Callback 함수를 실행할지 정의하는 옵션 (기본값은 0)</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">io</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="p">{</span> <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.7</span> <span class="p">});</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">관찰할</span> <span class="nx">요소</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>예를 들어 관찰하고자 하는 대상이 화면 내 70% 안에 들어왔을 경우 위와 같이 작성할 수 있습니다.</p>

<h4 id="️-콜백함수">✔️ 콜백함수</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">entries</span><span class="p">,</span> <span class="nx">io</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">entries</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 화면 안에 요소가 들어왔는지 체크</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">isIntersecting</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 기존 관찰하던 요소는 더 이상 관찰하지 않음</span>
      <span class="nx">io</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
      <span class="c1">// TODO: 새로운 컨텐츠 추가</span>
      <span class="c1">// TODO: 새로운 컨텐츠의 마지막 요소를 관찰 시작</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>콜백 함수는 위와 같이 entries와 io를 매개변수로 갖습니다.<br />
Intersection Observer를 쓰기 이전에는 무한스크롤을 구현할 때 성능 문제로 인해 <code class="language-plaintext highlighter-rouge">debounce</code> 나 <code class="language-plaintext highlighter-rouge">throttle</code> 과 같은 호출수 제한 최적화 작업이 반드시 이뤄져야 했지만 지금은 필요하지 않습니다.</p>

<h3 id="️-무한스크롤-구현">✔️ 무한스크롤 구현</h3>

<p>이제 본격적으로 무한스크롤 구현 코드를 작성해보도록 하겠습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nx">$</span> <span class="nx">npx</span> <span class="nx">create</span><span class="o">-</span><span class="nx">react</span><span class="o">-</span><span class="nx">app</span> <span class="nx">infinite</span><span class="o">-</span><span class="nx">scroll</span><span class="o">-</span><span class="nx">example</span>
<span class="nx">$</span> <span class="nx">npm</span> <span class="nx">i</span> <span class="nx">styled</span><span class="o">-</span><span class="nx">components</span> <span class="nx">react</span><span class="o">-</span><span class="nx">loading</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>우선 위와 같은 CRA 명령어를 입력하여 초기 세팅을 하고 styled와 react-loading 라이브러리를 설치해주도록 하겠습니다.</p>

<ul>
  <li>Item.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ItemWrap</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 350px;
  height: 370px;
  padding-top: 140px;
  font-size: 70px;
  display: flex;
  flex-direction: column;
  background-color: #ffffff;
  margin: 1rem;
  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
  border-radius: 6px;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Item</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">number</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">ItemWrap</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">number</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">ItemWrap</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Item</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Loader.js =&gt; 로딩 스피너 컴포넌트</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactLoading</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-loading</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">LoaderWrap</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 100%;
  height: 80%;
  display: flex;
  justify-content: center;
  text-align: center;
  align-items: center;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Loader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">LoaderWrap</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">ReactLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"spin"</span> <span class="na">color</span><span class="p">=</span><span class="s">"#455560"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">LoaderWrap</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Loader</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>App.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span><span class="p">,</span> <span class="p">{</span> <span class="nx">createGlobalStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Item</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Item</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Loader</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Loader</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">GlobalStyle</span> <span class="o">=</span> <span class="nx">createGlobalStyle</span><span class="s2">`
  *, *::before, *::after {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }

  body {
    background-color: #f2f5f7;
  }
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AppWrap</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  align-items: center;

  .Target-Element {
    width: 100vw;
    height: 140px;
    display: flex;
    justify-content: center;
    text-align: center;
    align-items: center;
  }
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">target</span><span class="p">,</span> <span class="nx">setTarget</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isLoaded</span><span class="p">,</span> <span class="nx">setIsLoaded</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">itemLists</span><span class="p">,</span> <span class="nx">setItemLists</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([</span><span class="mi">1</span><span class="p">]);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">itemLists</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">itemLists</span><span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">getMoreItem</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setIsLoaded</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
    <span class="k">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="mi">1500</span><span class="p">));</span>
    <span class="kd">let</span> <span class="nx">Items</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
    <span class="nx">setItemLists</span><span class="p">((</span><span class="nx">itemLists</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">itemLists</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">Items</span><span class="p">));</span>
    <span class="nx">setIsLoaded</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onIntersect</span> <span class="o">=</span> <span class="k">async</span> <span class="p">([</span><span class="nx">entry</span><span class="p">],</span> <span class="nx">observer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">isIntersecting</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isLoaded</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
      <span class="k">await</span> <span class="nx">getMoreItem</span><span class="p">();</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">observer</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">onIntersect</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
      <span class="p">});</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">observer</span> <span class="o">&amp;&amp;</span> <span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">target</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">GlobalStyle</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">AppWrap</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">itemLists</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">v</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Item</span> <span class="na">number</span><span class="p">=</span><span class="si">{</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">i</span><span class="si">}</span> <span class="p">/&gt;;</span>
        <span class="p">})</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">setTarget</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"Target-Element"</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">isLoaded</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">Loader</span> <span class="p">/&gt;</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nc">AppWrap</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-적용-화면">✔️ 적용 화면</h3>

<p><img src="https://user-images.githubusercontent.com/95404736/203347423-fa5b0df0-e094-4726-a99a-0f4137145e35.gif" alt="Nov-22-2022 23-59-52" /></p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API">https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API</a></li>
  <li><a href="https://velog.io/@yejinh/Intersection-Observer%EB%A1%9C-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0">https://velog.io/@yejinh/Intersection-Observer%EB%A1%9C-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0</a></li>
  <li><a href="https://velog.io/@jce1407/React-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-with-Intersection-Observer">https://velog.io/@jce1407/React-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-with-Intersection-Observer</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="무한스크롤" /><category term="InfiniteScroll" /><category term="리액트" /><summary type="html"><![CDATA[React 무한스크롤 (Infinite Scroll) 구현]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (5)</title><link href="http://localhost:4000/uiux/post55/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (5)" /><published>2022-11-22T00:00:00+09:00</published><updated>2022-11-22T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post55</id><content type="html" xml:base="http://localhost:4000/uiux/post55/"><![CDATA[<p>ProManage Dashboard - Freebie Light &amp; Dark Themes<br />
by. <a href="https://dribbble.com/vibeeshkv">vibeesh kv</a></p>

<p><img width="1185" alt="image" src="https://user-images.githubusercontent.com/95404736/203337690-8c700fcc-1c2e-42b5-ab5e-58e6b25d64ef.png" /><br />
<img width="1190" alt="image" src="https://user-images.githubusercontent.com/95404736/203337836-e4ca600c-2225-4a72-89df-7ae05cfb6c6b.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/8286525-ProManage-Dashboard-Freebie-Light-Dark-Themes">https://dribbble.com/shots/8286525-ProManage-Dashboard-Freebie-Light-Dark-Themes</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry></feed>