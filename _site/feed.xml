<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-26T06:48:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">M1맥 iTerm2 터미널 꾸미기: zsh-syntax-highlighting 적용</title><link href="http://localhost:4000/setting/post58/" rel="alternate" type="text/html" title="M1맥 iTerm2 터미널 꾸미기: zsh-syntax-highlighting 적용" /><published>2022-11-26T00:00:00+09:00</published><updated>2022-11-26T00:00:00+09:00</updated><id>http://localhost:4000/setting/post58</id><content type="html" xml:base="http://localhost:4000/setting/post58/"><![CDATA[<h3 id="️-zsh-syntax-highlighting란">✔️ zsh-syntax-highlighting란?</h3>

<p>터미널 명령어에 하이라이트를 넣어주는 기능입니다.</p>

<h3 id="️-설치방법">✔️ 설치방법</h3>

<ul>
  <li>brew로 설치</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>brew <span class="nb">install </span>zsh-syntax-highlighting
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-zsh-파일-수정">✔️ zsh 파일 수정</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>vi ~/.zshrc
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 명령어 입력하여 설정 파일을 들어간 후<br />
i를 눌러 INSERT 모드로 변경하고나서<br />
하단 코드를 추가해줍니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>📌 M1맥인 경우
<span class="nb">source</span> /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

📌 인텔맥인 경우
<span class="nb">source</span> /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-저장하기">✔️ 저장하기</h3>

<p>코드 작성 후 ESC를 누르고 :wq를 입력해줍니다.<br />
soruce ~/.zshrc 명령어 까지 입력하면 즉시 적용됩니다.</p>

<h3 id="️-적용결과">✔️ 적용결과</h3>

<p><img width="475" alt="image" src="https://user-images.githubusercontent.com/95404736/204058051-2dd5f6cf-e351-48a3-959c-94798a266454.png" /></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Setting" /><category term="터미널" /><category term="iTerm2" /><category term="terminal" /><category term="zsh-syntax-highlighting" /><summary type="html"><![CDATA[터미널 꾸미기]]></summary></entry><entry><title type="html">[Lv.2] 루시와 엘라 찾기 (MySQL)</title><link href="http://localhost:4000/codingtest/post57/" rel="alternate" type="text/html" title="[Lv.2] 루시와 엘라 찾기 (MySQL)" /><published>2022-11-23T00:00:00+09:00</published><updated>2022-11-23T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post57</id><content type="html" xml:base="http://localhost:4000/codingtest/post57/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/59046">https://school.programmers.co.kr/learn/courses/30/lessons/59046</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">SELECT</span> <span class="n">ANIMAL_ID</span><span class="p">,</span> <span class="n">NAME</span><span class="p">,</span> <span class="n">SEX_UPON_INTAKE</span>
<span class="k">FROM</span> <span class="n">ANIMAL_INS</span>
<span class="k">WHERE</span> <span class="n">NAME</span> <span class="k">IN</span> <span class="p">(</span><span class="nv">"Lucy"</span><span class="p">,</span> <span class="nv">"Ella"</span><span class="p">,</span> <span class="nv">"Pickle"</span><span class="p">,</span> <span class="nv">"Rogan"</span><span class="p">,</span> <span class="nv">"Sabrina"</span><span class="p">,</span> <span class="nv">"Mitty"</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ANIMAL_ID</span> <span class="k">ASC</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>IN을 사용하면 특정 이름만 조회할 수 있습니다. 만약 특정 값이 아닌 경우에만 찾고싶다면 NOT IN을 사용할 수 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">Intersection Observer API 활용하여 React에서 무한스크롤 구현하기</title><link href="http://localhost:4000/react/post56/" rel="alternate" type="text/html" title="Intersection Observer API 활용하여 React에서 무한스크롤 구현하기" /><published>2022-11-22T00:00:00+09:00</published><updated>2022-11-22T00:00:00+09:00</updated><id>http://localhost:4000/react/post56</id><content type="html" xml:base="http://localhost:4000/react/post56/"><![CDATA[<h3 id="️-infinite-scroll">✔️ Infinite Scroll?</h3>

<p>무한스크롤(Infinite Scroll) 이란 말 그대로 스크롤을 무한으로 할 수 있는 기능을 말합니다. 불러와야 하는 게시글 목록이 많은 경우 무한스크롤을 활용하면 사용자 편의성과 클라이언트 부담을 덜 수 있다는 장점이 있습니다.</p>

<h3 id="️-intersection-observer-api-란">✔️ Intersection Observer API 란?</h3>

<blockquote>
  <p>Intersection Observer API는 타겟 요소와 상위 요소 또는 최상위 document 의 viewport 사이의 intersection 내의 변화를 비동기적으로 관찰하는 API입니다.</p>
</blockquote>

<p>MDN에서는 Intersection Observer API를 위와 같이 정의하고 있습니다. 쉽게 말하면 관찰 중인 요소가 사용자가 보고 있는 영역 안에 들어왔는지 알려주는 API라고 할 수 있습니다.</p>

<h4 id="️-options">✔️ Options</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">io</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>옵션부에는 root, rootMargin, threshold 3가지가 있습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">root</code> : 타겟 엘리먼트가 보이는지 안보이는지 결정할 뷰포트로 사용되는 엘리먼트 (기본값은 Browser Viewport)</li>
  <li><code class="language-plaintext highlighter-rouge">rootMargin</code> : root에 정의된 Element가 가진 마진값 (기본값은 0)</li>
  <li><code class="language-plaintext highlighter-rouge">threshold</code> : 타겟 엘리먼트가 root에 정의된 Element에 얼마나 노출되었을 때 Callback 함수를 실행할지 정의하는 옵션 (기본값은 0)</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">io</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="p">{</span> <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.7</span> <span class="p">});</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">관찰할</span> <span class="nx">요소</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>예를 들어 관찰하고자 하는 대상이 화면 내 70% 안에 들어왔을 경우 위와 같이 작성할 수 있습니다.</p>

<h4 id="️-콜백함수">✔️ 콜백함수</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">entries</span><span class="p">,</span> <span class="nx">io</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">entries</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 화면 안에 요소가 들어왔는지 체크</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">isIntersecting</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 기존 관찰하던 요소는 더 이상 관찰하지 않음</span>
      <span class="nx">io</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
      <span class="c1">// TODO: 새로운 컨텐츠 추가</span>
      <span class="c1">// TODO: 새로운 컨텐츠의 마지막 요소를 관찰 시작</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>콜백 함수는 위와 같이 entries와 io를 매개변수로 갖습니다.<br />
Intersection Observer를 쓰기 이전에는 무한스크롤을 구현할 때 성능 문제로 인해 <code class="language-plaintext highlighter-rouge">debounce</code> 나 <code class="language-plaintext highlighter-rouge">throttle</code> 과 같은 호출수 제한 최적화 작업이 반드시 이뤄져야 했지만 지금은 필요하지 않습니다.</p>

<h3 id="️-무한스크롤-구현">✔️ 무한스크롤 구현</h3>

<p>이제 본격적으로 무한스크롤 구현 코드를 작성해보도록 하겠습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nx">$</span> <span class="nx">npx</span> <span class="nx">create</span><span class="o">-</span><span class="nx">react</span><span class="o">-</span><span class="nx">app</span> <span class="nx">infinite</span><span class="o">-</span><span class="nx">scroll</span><span class="o">-</span><span class="nx">example</span>
<span class="nx">$</span> <span class="nx">npm</span> <span class="nx">i</span> <span class="nx">styled</span><span class="o">-</span><span class="nx">components</span> <span class="nx">react</span><span class="o">-</span><span class="nx">loading</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>우선 위와 같은 CRA 명령어를 입력하여 초기 세팅을 하고 styled와 react-loading 라이브러리를 설치해주도록 하겠습니다.</p>

<ul>
  <li>Item.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ItemWrap</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 350px;
  height: 370px;
  padding-top: 140px;
  font-size: 70px;
  display: flex;
  flex-direction: column;
  background-color: #ffffff;
  margin: 1rem;
  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
  border-radius: 6px;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Item</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">number</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">ItemWrap</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">number</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">ItemWrap</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Item</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Loader.js =&gt; 로딩 스피너 컴포넌트</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactLoading</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-loading</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">LoaderWrap</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 100%;
  height: 80%;
  display: flex;
  justify-content: center;
  text-align: center;
  align-items: center;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Loader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">LoaderWrap</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">ReactLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"spin"</span> <span class="na">color</span><span class="p">=</span><span class="s">"#455560"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">LoaderWrap</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Loader</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>App.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span><span class="p">,</span> <span class="p">{</span> <span class="nx">createGlobalStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Item</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Item</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Loader</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Loader</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">GlobalStyle</span> <span class="o">=</span> <span class="nx">createGlobalStyle</span><span class="s2">`
  *, *::before, *::after {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }

  body {
    background-color: #f2f5f7;
  }
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AppWrap</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  align-items: center;

  .Target-Element {
    width: 100vw;
    height: 140px;
    display: flex;
    justify-content: center;
    text-align: center;
    align-items: center;
  }
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">target</span><span class="p">,</span> <span class="nx">setTarget</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isLoaded</span><span class="p">,</span> <span class="nx">setIsLoaded</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">itemLists</span><span class="p">,</span> <span class="nx">setItemLists</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([</span><span class="mi">1</span><span class="p">]);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">itemLists</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">itemLists</span><span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">getMoreItem</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setIsLoaded</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
    <span class="k">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="mi">1500</span><span class="p">));</span>
    <span class="kd">let</span> <span class="nx">Items</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
    <span class="nx">setItemLists</span><span class="p">((</span><span class="nx">itemLists</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">itemLists</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">Items</span><span class="p">));</span>
    <span class="nx">setIsLoaded</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onIntersect</span> <span class="o">=</span> <span class="k">async</span> <span class="p">([</span><span class="nx">entry</span><span class="p">],</span> <span class="nx">observer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">isIntersecting</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isLoaded</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
      <span class="k">await</span> <span class="nx">getMoreItem</span><span class="p">();</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">observer</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">onIntersect</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
      <span class="p">});</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">observer</span> <span class="o">&amp;&amp;</span> <span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">target</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">GlobalStyle</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">AppWrap</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">itemLists</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">v</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Item</span> <span class="na">number</span><span class="p">=</span><span class="si">{</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">i</span><span class="si">}</span> <span class="p">/&gt;;</span>
        <span class="p">})</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">setTarget</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"Target-Element"</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">isLoaded</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">Loader</span> <span class="p">/&gt;</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nc">AppWrap</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-적용-화면">✔️ 적용 화면</h3>

<p><img src="https://user-images.githubusercontent.com/95404736/203347423-fa5b0df0-e094-4726-a99a-0f4137145e35.gif" alt="Nov-22-2022 23-59-52" /></p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API">https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API</a></li>
  <li><a href="https://velog.io/@yejinh/Intersection-Observer%EB%A1%9C-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0">https://velog.io/@yejinh/Intersection-Observer%EB%A1%9C-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0</a></li>
  <li><a href="https://velog.io/@jce1407/React-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-with-Intersection-Observer">https://velog.io/@jce1407/React-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-with-Intersection-Observer</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="무한스크롤" /><category term="InfiniteScroll" /><category term="리액트" /><summary type="html"><![CDATA[React 무한스크롤 (Infinite Scroll) 구현]]></summary></entry><entry><title type="html">[Lv.1] 어린 동물 찾기 (MySQL)</title><link href="http://localhost:4000/codingtest/post54/" rel="alternate" type="text/html" title="[Lv.1] 어린 동물 찾기 (MySQL)" /><published>2022-11-22T00:00:00+09:00</published><updated>2022-11-22T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post54</id><content type="html" xml:base="http://localhost:4000/codingtest/post54/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/59037">https://school.programmers.co.kr/learn/courses/30/lessons/59037</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">SELECT</span> <span class="n">ANIMAL_ID</span><span class="p">,</span> <span class="n">NAME</span>
<span class="k">FROM</span> <span class="n">ANIMAL_INS</span>
<span class="k">WHERE</span> <span class="n">INTAKE_CONDITION</span> <span class="o">!=</span> <span class="s1">'Aged'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>SELECT를 사용하여 ANIMAL_ID, NAME 두 컬럼을 ANIMAL_INS 테이블에서 조회하고 WHERE 절에서 Aged가 아닌 조건을 걸어주면 됩니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">SELECT</span> <span class="n">ANIMAL_ID</span><span class="p">,</span> <span class="n">NAME</span>
<span class="k">FROM</span> <span class="n">ANIMAL_INS</span>
<span class="k">WHERE</span> <span class="n">INTAKE_CONDITION</span> <span class="o">&lt;&gt;</span> <span class="s1">'Aged'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>풀고 나서 알아보니 != 는 &lt;&gt; 로 자동 변환 된다고 하는데 퍼포먼스면에서는 &lt;&gt;를 바로 사용해주는 것이 좋다고 합니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (5)</title><link href="http://localhost:4000/uiux/post55/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (5)" /><published>2022-11-22T00:00:00+09:00</published><updated>2022-11-22T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post55</id><content type="html" xml:base="http://localhost:4000/uiux/post55/"><![CDATA[<p>ProManage Dashboard - Freebie Light &amp; Dark Themes<br />
by. <a href="https://dribbble.com/vibeeshkv">vibeesh kv</a></p>

<p><img width="1185" alt="image" src="https://user-images.githubusercontent.com/95404736/203337690-8c700fcc-1c2e-42b5-ab5e-58e6b25d64ef.png" /><br />
<img width="1190" alt="image" src="https://user-images.githubusercontent.com/95404736/203337836-e4ca600c-2225-4a72-89df-7ae05cfb6c6b.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/8286525-ProManage-Dashboard-Freebie-Light-Dark-Themes">https://dribbble.com/shots/8286525-ProManage-Dashboard-Freebie-Light-Dark-Themes</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">Webpack 알아보기 &amp;amp; 설치방법</title><link href="http://localhost:4000/web/post53/" rel="alternate" type="text/html" title="Webpack 알아보기 &amp;amp; 설치방법" /><published>2022-11-17T00:00:00+09:00</published><updated>2022-11-17T00:00:00+09:00</updated><id>http://localhost:4000/web/post53</id><content type="html" xml:base="http://localhost:4000/web/post53/"><![CDATA[<h3 id="️-webpack웹팩-이란">✔️ Webpack(웹팩) 이란?</h3>

<p><code class="language-plaintext highlighter-rouge">웹팩</code> 은 오픈 소스 자바스크립트 모듈 번들러로 요즘 프론트엔드 개발에 필수라고 할 수 있는 요소 중 하나인데요. 여러개로 나눠져 있는 파일들을 하나의 js코드로 압축하고 최적화 하는 라이브러리입니다.</p>

<h3 id="️-webpack웹팩-구성요소">✔️ Webpack(웹팩) 구성요소</h3>

<p>웹팩은 Entry, Output, Loaders, Plugins, Mode로 구성되어 있습니다.</p>

<h4 id="entry">Entry</h4>

<ul>
  <li>웹팩이 빌드할 파일의 시작 위치를 나타냅니다.</li>
  <li>entry 지점으로부터 import되어 있는 다른 모듈과 라이브러리의 연관성을 찾습니다.</li>
  <li>entry의 디폴트로 설정된 값은 ./src/index.js 입니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1"> ./src/index.js</span><span class="dl">'</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="output">Output</h4>

<ul>
  <li>웹팩에 의해 생성되는 번들을 내보낼 위치와 파일의 이름을 정합니다.</li>
  <li>output의 기본값은 ./dist/main.js 입니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./path/to/my/entry/file.js</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dist</span><span class="dl">'</span><span class="p">),</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">main.js</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="loaders">Loaders</h4>

<ul>
  <li>loaders를 통해 자바스크립트 파일이 아닌 파일들도 유효한 모듈로 변환해줍니다.</li>
  <li>loaders의 설정은 싱글 모듈에 대한 rules 프로퍼티를 정의해야 하며, rules 프로퍼티는 test와 use를 필수 프로퍼티로 가집니다.</li>
  <li><code class="language-plaintext highlighter-rouge">test</code> 프로퍼티는 변환해야하는 파일들을 식별하는 역할을 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">use</code> 프로퍼티는 변환되어야 하는 파일에 대하여 어떤 로더를 사용해야하는지 설정합니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">my-first-webpack.bundle.js</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">txt$/</span><span class="p">,</span> <span class="na">use</span><span class="p">:</span> <span class="dl">'</span><span class="s1">raw-loader</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="plugins">Plugins</h4>

<ul>
  <li>로더가 파일단위로 처리하는 반면 플러그인은 번들된 결과물을 처리합니다.</li>
  <li>번들된 자바스크립트를 난독화 한다거나 특정 텍스트를 추출하는 용도로 사용할 수 있습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">html-webpack-plugin</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//to access built-in plugins</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">txt$/</span><span class="p">,</span> <span class="na">use</span><span class="p">:</span> <span class="dl">'</span><span class="s1">raw-loader</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span><span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/index.html</span><span class="dl">'</span><span class="p">})</span>
  <span class="p">]</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="mode">Mode</h4>

<ul>
  <li>mode는 웹팩을 세팅함에 있어서 development, production, none 중 하나를 파라미터로 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">production</code> 은 최적화되어 빌드됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">development</code> 는 빠르게 빌드됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">none</code> 은 아무 기능 없이 웹팩으로 빌드됩니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-webpack-설치-방법">✔️ Webpack 설치 방법</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>npm init
npm install -D webpack webpack-cli
npx webpack-cli .src/index.js
</pre></td></tr></tbody></table></code></pre></div></div>

<p>웹팩 설치 방법은 매우 간단합니다. 번들링을 할 디렉토리에 들어가서 위 명렁어를 차례로 입력해주면 됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npx create-react-app [파일명]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>웹팩으로 빌드를 하고 싶은 경우는 위 명령어를 입력해주면 됩니다.</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://medium.com/@woody_dev/js-webpack-1-%EC%9B%B9%ED%8C%A9%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-f29ebca31da4">https://medium.com/@woody_dev/js-webpack-1-%EC%9B%B9%ED%8C%A9%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-f29ebca31da4</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="웹팩" /><category term="Webpack" /><category term="개발" /><category term="Frontend" /><summary type="html"><![CDATA[오픈 소스 자바스크립트 모듈 번들러 Webpack]]></summary></entry><entry><title type="html">Git - Stash 사용법</title><link href="http://localhost:4000/git/post52/" rel="alternate" type="text/html" title="Git - Stash 사용법" /><published>2022-11-17T00:00:00+09:00</published><updated>2022-11-17T00:00:00+09:00</updated><id>http://localhost:4000/git/post52</id><content type="html" xml:base="http://localhost:4000/git/post52/"><![CDATA[<h3 id="️-git-stash란">✔️ Git stash란?</h3>

<p>작업을 하다 보면 브랜치를 변경할 일이 생기곤 합니다. 그런데 만약 브랜치를 변경할 때 작업물이 커밋되어 있지 않다면 변경 시 conflict가 일어나게 됩니다.<br />
작업이 마무리 되지 않은 상태에서 commit 하지 않고 브랜치를 이동시키고 싶은 경우 stash를 사용하면 잠시 스택에 저장해놓고 다시 가져오는 등의 작업을 할 수 있습니다.</p>

<h3 id="️-git-stash-사용법">✔️ Git stash 사용법</h3>

<h4 id="git-stash">git stash</h4>

<p>작업 임시 저장, 명령어 사용 시 스택에 새로운 stash가 생성됨</p>

<h4 id="git-stash-list">git stash list</h4>

<p>stash 목록 확인</p>

<h4 id="git-stash-apply">git stash apply</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>git stash apply  // 가장 최근의 stash를 가져오기
git stash apply [stash명]  // 해당 stash명의 stash 가져오기
git stash apply --index  // Staged 상태였던 작업들을 다시 Staged상태로 복원
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="git-stash-drop">git stash drop</h4>

<p>stash 제거</p>

<h4 id="git-stash-pop">git stash pop</h4>

<p>apply + drop 같은 느낌, 적용과 동시에 해당 stash를 제거</p>

<h4 id="git-stash-show--p--git-apply--r">git stash show -p | git apply -R</h4>

<p>stash 잘못 적용한 경우 사용</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>// 가장 최근의 stash를 사용하여 패치를 만들고 거꾸로 적용
git stash show -p | git apply -R 

// stash 이름에 해당하는 stash를 이용하여 거꾸로 적용
git stash show -p [stash 이름] | git apply -R
</pre></td></tr></tbody></table></code></pre></div></div>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="stash" /><category term="깃" /><category term="commit" /><category term="커밋" /><summary type="html"><![CDATA[git stash 사용하여 변경 사항 저장 및 꺼내기]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (4)</title><link href="http://localhost:4000/uiux/post51/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (4)" /><published>2022-11-15T00:00:00+09:00</published><updated>2022-11-15T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post51</id><content type="html" xml:base="http://localhost:4000/uiux/post51/"><![CDATA[<p>Dashboard<br />
by. <a href="https://dribbble.com/shots/15384601-Ecommerce-Dashboard-UI">Dimo.ui</a></p>

<p><img width="1045" alt="image" src="https://user-images.githubusercontent.com/95404736/201929424-043cda83-f50a-40ff-8278-f58e41ba7fd1.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/15384601-Ecommerce-Dashboard-UI">https://dribbble.com/shots/15384601-Ecommerce-Dashboard-UI</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">[Lv.1] 부족한 금액 계산하기</title><link href="http://localhost:4000/codingtest/post49/" rel="alternate" type="text/html" title="[Lv.1] 부족한 금액 계산하기" /><published>2022-11-14T00:00:00+09:00</published><updated>2022-11-14T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post49</id><content type="html" xml:base="http://localhost:4000/codingtest/post49/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/82612">https://school.programmers.co.kr/learn/courses/30/lessons/82612</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">price</span><span class="p">,</span> <span class="nx">money</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">answer</span> <span class="o">+=</span> <span class="nx">price</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">answer</span> <span class="o">&gt;</span> <span class="nx">money</span> <span class="p">?</span> <span class="p">(</span><span class="nx">answer</span> <span class="o">=</span> <span class="nx">answer</span> <span class="o">-</span> <span class="nx">money</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>이용 횟수 만큼 반복문 돌려주고 더한 값 구한 뒤 money와 비교하여 answer값 return</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry><entry><title type="html">[Lv.1] 없는 숫자 더하기</title><link href="http://localhost:4000/codingtest/post48/" rel="alternate" type="text/html" title="[Lv.1] 없는 숫자 더하기" /><published>2022-11-14T00:00:00+09:00</published><updated>2022-11-14T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/post48</id><content type="html" xml:base="http://localhost:4000/codingtest/post48/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/86051">https://school.programmers.co.kr/learn/courses/30/lessons/86051</a></p>

<h3 id="️-코드">✔️ 코드</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="nx">answer</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-풀이">✔️ 풀이</h3>

<p>0부터 9까지 반복하면서 includes로 값 있는지 확인하고 없으면 answer에 더해주었습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="CodingTest" /><category term="코테" /><category term="알고리즘" /><category term="프로그래머스" /><summary type="html"><![CDATA[프로그래머스]]></summary></entry></feed>