<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-24T00:17:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">PureComponent와 React.memo</title><link href="http://localhost:4000/react/post27/" rel="alternate" type="text/html" title="PureComponent와 React.memo" /><published>2022-08-23T00:00:00+09:00</published><updated>2022-08-23T00:00:00+09:00</updated><id>http://localhost:4000/react/post27</id><content type="html" xml:base="http://localhost:4000/react/post27/"><![CDATA[<p>유저들은 반응이 빠른 UI를 선호합니다. 최근 리액트로 개발을 하다보니 자식 컴포넌트가 필요 이상으로 계속해서 렌더링이 되는 경우가 생겼고, 이는 곧 성능 저하로 이어지기 때문에 개선이 필요하다는 생각이 들었습니다.</p>

<p>우선 React의 특성으로, React 앱은 state가 변화하거나 관련된 props가 변경되는 경우 전체적으로 렌더링이 됩니다. React는 먼저 컴포넌트를 렌더링 한 뒤, 이전 렌더링 결과와 비교하여 DOM 업데이트 결정 여부를 결정하게 되며 만약에 렌더링 결과가 이전과 다르다면 React는 DOM을 업데이트하게 됩니다.</p>

<p>리액트의 특성상 부모 컴포넌트가 다시 렌더링 되는 경우에는 자식 컴포넌트도 렌더링 되는 것이죠.</p>

<p>같은 내용이 업데이트 되었을 때 계속 그 내용을 불러와서 렌더링한다면 굉장히 불필요한 렌더링이 수행될 것입니다. 그러한 쓸데 없는 렌더링을 줄이는 방법으로 pureComponent나 React.memo가 사용되는데요. 해당 내용은 메모이제이션 기법의 이점을 얻고자 하는 경우에 사용하면 가장 좋습니다.</p>

<h3 id="️-purecomponent">✔️ PureComponent</h3>

<ul>
  <li>React.PureComponent는 React.Component와 비교하여 생명주기 메소드 중 하나인 <code class="language-plaintext highlighter-rouge">shouldComponentUpdate()</code> 를 어떻게 쓰는지에 대한 부분에서 차이가 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">shouldComponentUpdate()</code> 는 state나 props가 새로운 값으로 갱신되어서 렌더링이 발생하기 직전에 호출됩니다.</li>
  <li>기본적으로 <code class="language-plaintext highlighter-rouge">shouldComponentUpdate()</code> 메소드의 return 값은 true 지만, false를 리턴하는 경우에는 <code class="language-plaintext highlighter-rouge">render()</code> 와 <code class="language-plaintext highlighter-rouge">componentDidUpdate()</code> 는 호출되지 않습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">PureComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Lime</span> <span class="kd">extends</span> <span class="nx">PureComponent</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">count</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">};</span>
  <span class="nx">counter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
      <span class="na">count</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">,</span> <span class="c1">// 값이 변경되지는 않으나, setState는 작성한다</span>
    <span class="p">});</span>
  <span class="p">}</span>
  <span class="nx">componentDidUpdate</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 컴포넌트가 업데이트되면 값을 출력한다.</span>
  <span class="p">}</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">counter</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>counterButton<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Lime</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-reactmemo">✔️ React.memo</h3>

<ul>
  <li>React.memo는 함수형 컴포넌트에서 PureComponent와 같은 기능을 수행합니다.</li>
  <li>공식 문서를 확인해보면 pureComponent에는 <code class="language-plaintext highlighter-rouge">shouldComponenetUpdate</code> 함수가, React.memo에는 <code class="language-plaintext highlighter-rouge">areEqual</code> 함수가 구현되어 있어서 변화가 없을 때 다시 렌더링 하지 않는 것을 알 수 있습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Lime</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
   <span class="p">...</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Lime</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>React.memo 사용법은 매우 간단합니다. 위 처럼 감싸주기만 하면 됩니다 :)</li>
  <li>기본 동작은 얕은 비교이며 깊은 비교의 경우에는 아래 사용 방법을 참고하시면 됩니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">areEqual</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
  nextProp가 prevProps와 동일한 값을 가지면 true를 반환하고, 그렇지 않다면 false를 반환
  */</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">,</span> <span class="nx">areEqual</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>[React공식문서] :
areEqual 함수는 props들이 서로 같으면 true를 반환하고, props들이 서로 다르면 false를 반환합니다. 이것은 shouldComponentUpdate와 정반대의 동작입니다.</li>
</ul>

<h3 id="today-i-learned">Today I Learned</h3>

<p>React 성능 개선을 위해 사용되어지는 PureComponent &amp; React.memo에 대해 알게 되었습니다.<br />
state나 props의 데이터가 변경 되지 않는 경우, 컴포넌트를 업데이트 하지 않아도 된다면 PureComponent나 React.memo를 사용하여 불필요한 수행을 줄일 수 있습니다.</p>

<h3 id="참고사이트">참고사이트</h3>

<p><a href="https://reactjs.org/docs/react-api.html#reactmemo">https://reactjs.org/docs/react-api.html#reactmemo</a>
<a href="https://ui.toast.com/weekly-pick/ko_20190731">https://ui.toast.com/weekly-pick/ko_20190731</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="React.memo" /><category term="memo" /><category term="PureComponent" /><summary type="html"><![CDATA[리액트 성능개선, React.memo 현명하게 사용하기]]></summary></entry><entry><title type="html">리액트 Hooks : useRef()</title><link href="http://localhost:4000/react/post26/" rel="alternate" type="text/html" title="리액트 Hooks : useRef()" /><published>2022-08-21T00:00:00+09:00</published><updated>2022-08-21T00:00:00+09:00</updated><id>http://localhost:4000/react/post26</id><content type="html" xml:base="http://localhost:4000/react/post26/"><![CDATA[<h3 id="️-useref-언제-사용할까">✔️ useRef, 언제 사용할까?</h3>

<p><code class="language-plaintext highlighter-rouge">useRef</code>는 크게 <strong>DOM 요소에 접근</strong>하는 경우, <strong>렌더링을 일으키지 않고 값을 변경</strong>시키는 두 가지 경우에 사용합니다.<br />
<br />
Vanilla JavaScript로 특정 DOM 요소에 접근하고자 하는 경우에는 <code class="language-plaintext highlighter-rouge">getElementById</code> 혹은 <code class="language-plaintext highlighter-rouge">querySelector</code> 같은 함수를 사용하였는데요. 리액트에서는 useRef라는 Hook를 사용하거나, 콜백 함수 혹은 React.createRef(클래스형 컴포넌트) 라는 함수를 사용합니다.</p>

<h3 id="️-useref-사용법">✔️ useRef 사용법</h3>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>useRef를 사용하기 위해서는 가장 먼저 react에서 useRef를 import 받아야 합니다.</p>

<p>기본 형태는 아래와 같습니다.</p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">//Ref 객체 생성</span>
<span class="kd">const</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">();</span>

<span class="c1">//current -&gt; DOM 가리킴. 아래의 경우는 &lt;input /&gt; 태그 DOM을 가리킨다.</span>
<span class="nx">nameInput</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>

<span class="c1">//접근하고 싶은 태그에는 ref 속성을 준다.</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">name</span><span class="p">=</span><span class="s">"lime"</span>
  <span class="na">placeholder</span><span class="p">=</span><span class="s">"focus!!"</span>
  <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onChange</span><span class="si">}</span>
  <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span>
  <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">nameInput</span><span class="si">}</span>
<span class="p">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-예시">✔️ 예시</h3>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">Sample</span><span class="p">()</span> <span class="p">{</span>

  <span class="kd">const</span> <span class="nx">nameInput</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">();</span>

  <span class="c1">//포커스 잡기</span>
  <span class="kd">const</span> <span class="nx">onFocus</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">nameInput</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">input</span> <span class="na">name</span><span class="p">=</span><span class="s">"lime"</span>
            <span class="na">placeholder</span><span class="p">=</span><span class="s">"focus!!"</span>
            <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onChange</span><span class="si">}</span>
            <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span>
            <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">nameInput</span><span class="si">}</span>
          <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onFocus</span><span class="si">}</span><span class="p">&gt;</span>포커스<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 예시는 useRef를 사용하여 포커스 버튼을 눌렀을 때 해당 input에 포커스가 잡히도록 한 것입니다.</p>

<h3 id="️-변수-관리">✔️ 변수 관리</h3>

<p>useState를 사용하여 변수를 상태값으로 관리하게 되면 값이 바뀔 때 마다 컴포넌트가 렌더링 되는데, useRef를 사용하여 변수를 관리한다면 컴포넌트가 리렌더링 되지 않습니다. 또한 상태로 관리하는 경우에는 상태를 바꾸는 함수를 호출한 다음 렌더링 하고 나서 업데이트 된 상태를 조회할 수 있는데, useRef를 사용하는 경우에는 설정 후 바로 조회하는 것이 가능합니다. 더불어 useRef로 만들어진 변수는 React의 전역 저장소에 저장되기 때문에 함수를 다시 호출하더라도 마지막으로 업데이트한 current 값이 유지됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">nextId</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">onCreate</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">nextId</span><span class="p">.</span><span class="nx">current</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>해당 기능이 유용하게 사용되는 경우</p>

<ul>
  <li>setTimeout, setInterval을 통해 만들어진 id</li>
  <li>scroll 위치</li>
  <li>외부 라이브러리를 사용하여 생성된 인스턴스</li>
</ul>

<h4 id="today-i-learned">Today I Learned</h4>

<p>React에서 특정 DOM을 가리키는 경우에 <code class="language-plaintext highlighter-rouge">useRef</code>를 사용한다는 것과, 어떤 식으로 사용되는지에 대해 알게되었습니다 :)</p>

<h4 id="참고사이트">참고사이트</h4>
<p><a href="https://react.vlpt.us/basic/10-useRef.html">https://react.vlpt.us/basic/10-useRef.html</a><br />
<a href="https://ko.reactjs.org/docs/hooks-reference.html#useref">https://ko.reactjs.org/docs/hooks-reference.html#useref</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="useRef" /><category term="Hooks" /><category term="리액트" /><summary type="html"><![CDATA[useRef로 DOM 요소에 접근하기]]></summary></entry><entry><title type="html">jekyll 실행 시 ‘require’: cannot load such file – webrick (LoadError) 오류 해결 방법</title><link href="http://localhost:4000/blog/post25/" rel="alternate" type="text/html" title="jekyll 실행 시 ‘require’: cannot load such file – webrick (LoadError) 오류 해결 방법" /><published>2022-08-20T00:00:00+09:00</published><updated>2022-08-20T00:00:00+09:00</updated><id>http://localhost:4000/blog/post25</id><content type="html" xml:base="http://localhost:4000/blog/post25/"><![CDATA[<h3 id="문제-상황">문제 상황</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>                    <span class="nt">------------------------------------------------</span>
      Jekyll 4.2.0   Please append <span class="sb">`</span><span class="nt">--trace</span><span class="sb">`</span> to the <span class="sb">`</span>serve<span class="sb">`</span> <span class="nb">command
                     </span><span class="k">for </span>any additional information or backtrace.
                    <span class="nt">------------------------------------------------</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>bundle exec jekyll serve 명령어를 사용하여 로컬에서 지킬 서버를 구동하려고 할 때 위와 같은 오류가 발생하는 경우가 있습니다.</p>

<h3 id="해결-방법">해결 방법</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ bundle add webrick
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이런 경우에는 bundle add webrick으로 Webrick를 추가하면 오류 없이 실행됩니다. 
위와 같은 오류가 발생하는 이유는 ruby 3.x 버전 부터 webrick이 bundle로 제공되지 않기 때문입니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Blog" /><category term="지킬" /><category term="jekyll" /><category term="blog" /><summary type="html"><![CDATA[jekyll blog - 'require': cannot load such file -- webrick (LoadError)]]></summary></entry><entry><title type="html">jekyll serve 할 때 install missing gem executables with ‘bundle install’ 오류 해결 방법</title><link href="http://localhost:4000/blog/post24/" rel="alternate" type="text/html" title="jekyll serve 할 때 install missing gem executables with ‘bundle install’ 오류 해결 방법" /><published>2022-08-19T00:00:00+09:00</published><updated>2022-08-19T00:00:00+09:00</updated><id>http://localhost:4000/blog/post24</id><content type="html" xml:base="http://localhost:4000/blog/post24/"><![CDATA[<p>오늘은 jekyll 블로그를 serve할 때 install missing gem executables with ‘bundle install’ 오류가 나는 경우 해결하는 방법에 대한 포스팅입니다 :)</p>

<h3 id="문제-상황">문제 상황</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>bundle <span class="nb">exec </span>jekyll serve

bundler: <span class="nb">command </span>not found: jekyll
Install missing gem executables with <span class="sb">`</span>bundle <span class="nb">install</span><span class="sb">`</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="해결-방법">해결 방법</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>$ rm .bundle/config
$ gem update --system 
$ gem update bundler
$ bundle install
</pre></td></tr></tbody></table></code></pre></div></div>

<p>손상된 번들을 제거하고 위와 같은 작업을 하면 오류가 해결됩니다 😆</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Blog" /><category term="지킬" /><category term="jekyll" /><category term="blog" /><summary type="html"><![CDATA[jekyll blog - install missing gem executables with 'bundle install']]></summary></entry><entry><title type="html">Git 커밋 되돌리기 (Reset, Revert)</title><link href="http://localhost:4000/git/post23/" rel="alternate" type="text/html" title="Git 커밋 되돌리기 (Reset, Revert)" /><published>2022-08-16T00:00:00+09:00</published><updated>2022-08-16T00:00:00+09:00</updated><id>http://localhost:4000/git/post23</id><content type="html" xml:base="http://localhost:4000/git/post23/"><![CDATA[<p>Git을 사용하여 작업하다 보면 이미 커밋한 내용을 되돌리고 싶은 경우가 종종 생기곤 합니다. Git에서 이력을 되돌리기 위해서 사용하는 것 중에서 대표적인 것 2개가 바로 Reset과 Revert인데요. 둘 다 과거로 되돌린다는 의미라 언뜻 보기엔 비슷해 보이는데 과연 차이점은 무엇일까요?</p>

<h3 id="reset과-revert의-차이점">Reset과 Revert의 차이점</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Reset</code>: 과거 커밋으로 되돌린다. (이력 남기지 않음)</li>
  <li><code class="language-plaintext highlighter-rouge">Revert</code> : 과거로 돌아간다. (이력 남김)</li>
</ul>

<p>쉽게 말해서 <code class="language-plaintext highlighter-rouge">Reset</code>은 시계를 다시 맞추듯이 이력을 그 당시로 되돌리는 것이고, <code class="language-plaintext highlighter-rouge">Revert</code>는 이전 커밋 내역을 남겨둔 채 새로운 커밋으로 과거로 돌아가게 되는 것을 의미하는 것입니다.</p>

<h3 id="사용법">사용법</h3>

<h4 id="reset">Reset</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>git reset &lt;옵션&gt; &lt;돌아가고 싶은 커밋&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="옵션">옵션</h5>

<ul>
  <li>hard</li>
</ul>

<p>돌아가고자 하는 이력 이후의 모든 내용을 지웁니다. (working directory에서 삭제)</p>

<ul>
  <li>soft</li>
</ul>

<p>이력을 되돌린 후, 이후의 내용을 지우지 않고 다시 커밋할 수 있는 상태로 남겨놓습니다. (staging area로 돌려놓기 - commit 전 상태로)</p>

<ul>
  <li>mixed (default)</li>
</ul>

<p>변경된 내용은 남아있지만 인덱스가 초기화 되기 때문에 커밋을 하려면 다시 추가해야합니다. (working directory로 돌려놓기 - add 전 상태로)</p>

<ul>
  <li>HEAD~취소할 커밋 수</li>
</ul>

<p>현재로부터 원하는 만큼의 커밋을 취소할 수 있습니다.</p>

<ul>
  <li>HEAD^</li>
</ul>

<p>가장 최근 커밋이 취소됩니다. (default: mixed)</p>

<h4 id="revert">Revert</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>git revert &lt;되돌릴 커밋&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Revert 사용 시 되돌릴 커밋의 [commit ID]를 적어주면 됩니다.</p>

<h3 id="언제-무엇을-사용하면-좋을까">언제 무엇을 사용하면 좋을까?</h3>

<p><code class="language-plaintext highlighter-rouge">Reset</code> 같은 경우는 커밋 히스토리를 깔끔하게 정리할 수 있다는 장점이 있기 때문에 혼자 작업하는 경우에 쓰기 좋고, <code class="language-plaintext highlighter-rouge">Revert</code> 는 왜 돌아갔는지에 대한 기록이 가능하기 때문에 협업할 때 사용하기 좀 더 좋을 수 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="reset" /><category term="revert" /><category term="git" /><summary type="html"><![CDATA[Reset과 Revert 알고 사용하기]]></summary></entry><entry><title type="html">Antd Table 컴포넌트 column render</title><link href="http://localhost:4000/web/post22/" rel="alternate" type="text/html" title="Antd Table 컴포넌트 column render" /><published>2022-08-15T00:00:00+09:00</published><updated>2022-08-15T00:00:00+09:00</updated><id>http://localhost:4000/web/post22</id><content type="html" xml:base="http://localhost:4000/web/post22/"><![CDATA[<h3 id="antd-table-column-render">AntD Table column render</h3>

<p>AntD를 사용하면서 multi line으로 데이터를 표시하거나, 조건에 맞게 데이터를 표시하는 경우 등 렌더링이 필요한 경우에 render 옵션을 활용하면 쉽게 원하는대로 표현할 수 있습니다.</p>

<h3 id="render-옵션">render 옵션</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// render 옵션은 Array.map()처럼 작동합니다.</span>
<span class="nx">render</span><span class="p">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="c1">// text: name의 data [String]</span>
<span class="c1">// row: 하나의 row data [Object]</span>
<span class="c1">// index: row index [Number]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="사용하기">사용하기</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">월</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">month</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">month</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// render: (text) =&gt; &lt;a&gt;{text}&lt;/a&gt;,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">전력 소비량</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">energy1</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">energy1</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">권장 소비량 대비 초과 %</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">percent</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">percent</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">render</span><span class="p">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;&gt;</span>
          <span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">style</span><span class="p">=&gt;</span><span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span><span class="si">}</span>%<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
          <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">style</span><span class="p">=&gt;</span><span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span><span class="si">}</span>%<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
          <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>
      <span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="결과">결과</h3>

<p><img width="664" alt="image" src="https://user-images.githubusercontent.com/95404736/184610941-2f59da62-1dcd-461d-8da2-e8e66c40addd.png" /></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="웹개발" /><category term="antd" /><category term="ant design" /><summary type="html"><![CDATA[앤트디자인 테이블 컴포넌트 사용]]></summary></entry><entry><title type="html">[Mac] 사용중인 포트 kill 하는법</title><link href="http://localhost:4000/issue/post20/" rel="alternate" type="text/html" title="[Mac] 사용중인 포트 kill 하는법" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/issue/post20</id><content type="html" xml:base="http://localhost:4000/issue/post20/"><![CDATA[<h3 id="사용중-포트-찾기">사용중 포트 찾기</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>lsof <span class="nt">-i</span> :[포트번호]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>ex)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>lime@laim-ui-MacBookAir ~ % lsof <span class="nt">-i</span> :3000
COMMAND     PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
node      13736 lime   31u  IPv4 0x35b417c98f796509      0t0  TCP localhost:hbci-&gt;localhost:62414 <span class="o">(</span>ESTABLISHED<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="kill-하기">kill 하기</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">kill</span> <span class="nt">-9</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>ex)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">kill</span> <span class="nt">-9</span> 13736
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 해당 포트번호 PID 를 찾은 후 kill 명령어로 포트를 간단하게 죽일 수 있습니다.</p>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://stackoverflow.com/questions/3855127/find-and-kill-process-locking-port-3000-on-mac">https://stackoverflow.com/questions/3855127/find-and-kill-process-locking-port-3000-on-mac</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="port" /><category term="lsof" /><category term="kill" /><category term="mac" /><summary type="html"><![CDATA[포트 죽이기!!]]></summary></entry><entry><title type="html">[Mac] 맥북에게 5000번 포트를 뺏겼을 때 해결방법</title><link href="http://localhost:4000/issue/post21/" rel="alternate" type="text/html" title="[Mac] 맥북에게 5000번 포트를 뺏겼을 때 해결방법" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/issue/post21</id><content type="html" xml:base="http://localhost:4000/issue/post21/"><![CDATA[<h3 id="문제">문제</h3>

<p>5000번 포트를 사용하려는데 계속 403에러가 발생합니다. 5000번을 쓰고싶어서 kill -9로 죽이려고 했는데 계속 살아납니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>lime@laim-ui-MacBookAir ~ % lsof <span class="nt">-i</span> :5000
COMMAND     PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
ControlCe 10422 lime   29u  IPv4 0x35b417c98db2da79      0t0  TCP <span class="k">*</span>:commplex-main <span class="o">(</span>LISTEN<span class="o">)</span>
ControlCe 10422 lime   30u  IPv6 0x35b417d328e92061      0t0  TCP <span class="k">*</span>:commplex-main <span class="o">(</span>LISTEN<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>대체 왜 그런가 알아보니 <code class="language-plaintext highlighter-rouge">ControlCenter</code>라는 자체프로그램이 5000번 포트를 잡아먹고 있는 것이었는데요. 좀 더 자세히 살펴보니 MacOS Monterey에서 <code class="language-plaintext highlighter-rouge">AirPlay 수신모드</code> 기능이 해당 포트를 사용하기 때문이었습니다.</p>

<h3 id="해결하기">해결하기</h3>

<p>Mac에서 5000번 포트를 사용하고 싶다면 <code class="language-plaintext highlighter-rouge">AirPlay 수신모드</code> 를 해제하는 간단한 방법으로 문제를 해결할 수 있습니다.</p>

<ul>
  <li><strong>시스템 환경설정 - 공유 - AirPlay 수신 모드</strong></li>
</ul>

<p><img width="654" alt="image" src="https://user-images.githubusercontent.com/95404736/184541821-01863f4a-7b5b-4323-8677-d558717f9429.png" /></p>

<p>위와 같이 체크가 되어 있다면 그냥 체크를 해제해주기만 하면 됩니다. 정말 간단합니다.</p>

<p>다만 5000번 포트를 기본으로 사용하는 분들이 분명 많을 것 같은데 왜 애플에서 기본으로 5000번을 잡아먹게 한 건지는 당최 이해할 수가 없네요 🤣</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="port" /><category term="AirPlay" /><category term="5000" /><summary type="html"><![CDATA[AirPlay 수신모드에게 뺏긴 5000번 포트..]]></summary></entry><entry><title type="html">Sequelize - 데이터타입</title><link href="http://localhost:4000/sequelize/post19/" rel="alternate" type="text/html" title="Sequelize - 데이터타입" /><published>2022-08-09T00:00:00+09:00</published><updated>2022-08-09T00:00:00+09:00</updated><id>http://localhost:4000/sequelize/post19</id><content type="html" xml:base="http://localhost:4000/sequelize/post19/"><![CDATA[<h3 id="sequelize-datatypes">Sequelize DataTypes</h3>

<p>시퀄라이즈 데이터타입을 정리해보았습니다. 추가로 업데이트 된 목록을 확인하고 싶으시다면 <a href="https://sequelize.org/api/v6/variable/index.html#static-variable-DataTypes" title="sequelize DataTypes :)">여기</a>를 클릭해서 DataTypes를 참고해주시기 바랍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="rouge-code"><pre>Sequelize.STRING                      // VARCHAR(255)
Sequelize.STRING(1234)                // VARCHAR(1234)
Sequelize.STRING.BINARY               // VARCHAR BINARY
Sequelize.TEXT                        // TEXT
Sequelize.TEXT('tiny')                // TINYTEXT
Sequelize.CITEXT                      // CITEXT      PostgreSQL and SQLite only.

Sequelize.INTEGER                     // INTEGER
Sequelize.BIGINT                      // BIGINT
Sequelize.BIGINT(11)                  // BIGINT(11)

Sequelize.FLOAT                       // FLOAT
Sequelize.FLOAT(11)                   // FLOAT(11)
Sequelize.FLOAT(11, 10)               // FLOAT(11,10)

Sequelize.REAL                        // REAL        PostgreSQL only.
Sequelize.REAL(11)                    // REAL(11)    PostgreSQL only.
Sequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.

Sequelize.DOUBLE                      // DOUBLE
Sequelize.DOUBLE(11)                  // DOUBLE(11)
Sequelize.DOUBLE(11, 10)              // DOUBLE(11,10)

Sequelize.DECIMAL                     // DECIMAL
Sequelize.DECIMAL(10, 2)              // DECIMAL(10,2)

Sequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres
Sequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision
Sequelize.DATEONLY                    // DATE without time.
Sequelize.BOOLEAN                     // TINYINT(1)

Sequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'
Sequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.
Sequelize.ARRAY(Sequelize.ENUM)       // Defines an array of ENUM. PostgreSQL only.

Sequelize.JSON                        // JSON column. PostgreSQL, SQLite and MySQL only.
Sequelize.JSONB                       // JSONB column. PostgreSQL only.

Sequelize.BLOB                        // BLOB (bytea for PostgreSQL)
Sequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)

Sequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)

Sequelize.CIDR                        // CIDR datatype for PostgreSQL
Sequelize.INET                        // INET datatype for PostgreSQL
Sequelize.MACADDR                     // MACADDR datatype for PostgreSQL

Sequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.
Sequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.

Sequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.

Sequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY('POINT')           // Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY('POINT', 4326)     // Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://sequelize.org/api/v6/variable/index.html#static-variable-DataTypes">https://sequelize.org/api/v6/variable/index.html#static-variable-DataTypes</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Sequelize" /><category term="시퀄라이즈" /><category term="Sequelize" /><category term="백엔드" /><category term="backend" /><summary type="html"><![CDATA[Sequelize 데이터타입 정리]]></summary></entry><entry><title type="html">MacOS에서 MongoDB, compass 설치하기</title><link href="http://localhost:4000/mongodb/post18/" rel="alternate" type="text/html" title="MacOS에서 MongoDB, compass 설치하기" /><published>2022-08-03T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><id>http://localhost:4000/mongodb/post18</id><content type="html" xml:base="http://localhost:4000/mongodb/post18/"><![CDATA[<h3 id="몽고디비mongodb란">몽고디비(MongoDB)란?</h3>

<p><a href="https://ilimes.github.io/mongodb/post16/">https://ilimes.github.io/mongodb/post16/</a><br />
위 링크를 참고해주세요 :)</p>

<h3 id="mongodb-설치하기">MongoDB 설치하기</h3>

<ul>
  <li>설치환경 : MacOS(M1), Homebrew를 통해 설치(만약 Homebrew 설치가 되어있지 않은 경우에는 먼저 Homebrew부터 설치해주세요.)</li>
</ul>

<p><br />
<strong>1) 먼저 터미널에 아래의 명령어를 입력해주세요.</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>brew tap mongodb/brew
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>brew install mongodb-community
</pre></td></tr></tbody></table></code></pre></div></div>

<p>(arm맥에서 설치하시는 경우 brew install 앞에 arch -arm64를 붙이면 됩니다.)</p>

<p><br />
<strong>2) MongoDB 실행 및 정지 명령어</strong></p>

<p>▼ 실행</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>brew services start mongodb-community
</pre></td></tr></tbody></table></code></pre></div></div>

<p>▼ 정지</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>brew services stop mongodb-community
</pre></td></tr></tbody></table></code></pre></div></div>

<p>정상적으로 설치 및 실행이 완료되었다면 <code class="language-plaintext highlighter-rouge">http://localhost:27017/</code> 와 같이 몽고디비 기본 포트 주소로 접속하였을 때 아래와 같은 메시지가 나타나게 됩니다.</p>

<p><img width="667" alt="image" src="https://user-images.githubusercontent.com/95404736/182624997-f387e09f-a18c-4071-8b4b-285593741fcc.png" /></p>

<h3 id="rdb-논리적-구조-vs-mongodb-비교">RDB 논리적 구조 vs MongoDB 비교</h3>

<p>RDB와 MongoDB에서의 용어를 비교하는 경우 아래와 같습니다.</p>

<table>
  <thead>
    <tr>
      <th>RDB</th>
      <th>MongoDB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Table</td>
      <td>Collection</td>
    </tr>
    <tr>
      <td>Row</td>
      <td>Document</td>
    </tr>
    <tr>
      <td>Column</td>
      <td>Field</td>
    </tr>
    <tr>
      <td>Primary Key</td>
      <td>Object_Id Field</td>
    </tr>
    <tr>
      <td>Relationship</td>
      <td>Embedded &amp; Link</td>
    </tr>
  </tbody>
</table>

<h3 id="테스트-하기">테스트 하기</h3>

<p>몽고디비를 CLI 기반으로 간단하게 테스트해보도록 하겠습니다. 컬렉션 생성 및 삭제를 해보면서 테스트를 진행해보겠습니다.</p>

<p>일단 가장 먼저 몽고디비가 실행된 상태로 <code class="language-plaintext highlighter-rouge">mongo</code>를 터미널에서 입력해줍니다.<br />
그럼 <code class="language-plaintext highlighter-rouge">&gt;</code> 가 활성화되고 명령어를 입력할 수 있게 됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>zsh: command not found: mongo
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이 과정에서 저는 위와 같은 에러를 마주하게 되었는데요.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>brew install mongodb-community-shell
</pre></td></tr></tbody></table></code></pre></div></div>

<p>만약 같은 에러가 뜨신다면 위 명령어를 입력하여 간단하게 해결할 수 있구요.<br />
에러가 뜨지 않는다면 바로 테스트를 진행하시면 됩니다.<br />
<br />
몽고디비 데이터베이스 및 컬렉션 관련 문법은 아래와 같습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>// 데이터베이스 생성
use 데이터베이스명

// 데이터베이스 확인
show dbs;

// 컬렉션 생성
db.createCollection('컬렉션명');

// 컬렉션 확인
show collections;

// 컬렉션 삭제
db.컬렉션명.drop();

// 데이터베이스 삭제
db.dropDatabase()
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 문법 대로 테스트를 진행해보았습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>&gt; use limedb
switched to db limedb
&gt; show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
&gt; db.createCollection('test')
{ "ok" : 1 }
&gt; show collections
test
&gt; db.test.drop()
true
&gt; db.dropDatabase()
{ "ok" : 1 }
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="mongodb-gui-clientcompass-설치하기">MongoDB GUI Client(compass) 설치하기</h3>

<p><a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p>

<p>compass 설치방법은 아주 간단합니다.<br />
위 사이트에서 MacOS 전용 설치파일을 다운로드 받을 수 있습니다 :)<br />
(따로 버전을 선택 할 필요없이 그대로 다운로드 하면 됩니다.)</p>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://zzang9ha.tistory.com/361">https://zzang9ha.tistory.com/361</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MongoDB" /><category term="몽고디비" /><category term="mongoDB" /><category term="MongoDB" /><category term="데이터베이스" /><category term="mac" /><summary type="html"><![CDATA[맥에서 몽고디비를 설치하는 방법]]></summary></entry></feed>