<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-25T23:10:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">CH04. 통합 구현</title><link href="http://localhost:4000/infoprocessing/post71/" rel="alternate" type="text/html" title="CH04. 통합 구현" /><published>2023-02-25T00:00:00+09:00</published><updated>2023-02-25T00:00:00+09:00</updated><id>http://localhost:4000/infoprocessing/post71</id><content type="html" xml:base="http://localhost:4000/infoprocessing/post71/"><![CDATA[<h3 id="연계-요구사항-분석">연계 요구사항 분석</h3>

<h4 id="연계-요구사항-분석-1">연계 요구사항 분석</h4>

<p>서로 다른 두 시스템 · 장치 · 소프트웨어를 이어주는 중계 역할을 하는 연계 시스템과 관련된 요구사항을 분석하는 과정</p>

<h4 id="연계-요구사항-분석-참고문서">연계 요구사항 분석 참고문서</h4>

<ul>
  <li>개체(Entitiy) 정의서: 데이터베이스 개념 모델링 단계에서 도출한 개체의 타입과 관련 속성, 식별자 등의 정보를 개괄적으로 명세화한 정의서</li>
  <li>테이블(Table) 정의서: 논리 및 물리 모델링 과정 설계 산출물</li>
  <li>인터페이스 명세서: 인터페이스 정의서에 작성한항목을 자세히 작성한 것</li>
</ul>

<h3 id="연계-메커니즘-구성">연계 메커니즘 구성</h3>

<h4 id="연계-메커니즘">연계 메커니즘</h4>

<p>응용 소프트웨어와 연계 대상 모듈 간의 데이터 연계시 요구사항을 고려한 연계방법과 주기를 설계하기 위한 메커니즘</p>

<ul>
  <li>기능: 데이터를 생성하여 전송하는 송신 시스템과 송신 데이터를 수신하여 DB에 반영하는 수신 시스템으로 구성</li>
</ul>

<h4 id="주요-연계-기술">주요 연계 기술</h4>

<ul>
  <li>직접 연계
    <ul>
      <li>DB 링크: 데이터베이스에서 제공하는 DB링크 객체를 이용</li>
      <li>DB 연결: 수신 시스템의 WAS에서 송신 시스템 DB로 연결하는 DB커넥션 풀을 생성하고 연계 프로그램에서 해당 DB커넥션 풀 명을 이용하여 연결</li>
      <li>API/Open API: 송신 시스템의 DB에서 데이터를 읽어서 제공하는 애플리케이션 프로그래밍 인터페이스 프로그램</li>
      <li>JDBC: 수신 시스템의 프로그램에서 JDBC 드라이버를 이용하여 송신 시스템 DB와 연결</li>
      <li>하이퍼 링크: 현재 페이지에서 다른 부분으로 가거나 전혀 다른 페이지로 이동하게 해주는 속성</li>
    </ul>
  </li>
  <li>간접 연계
    <ul>
      <li>연계 솔루션(EAI): 기업에서 운영되는 서로 다른 플랫폼 및 애플리케이션들 간의 정보 전달, 연계, 통합을 가능하게 해주는 솔루션</li>
      <li>Web Service/ESB: 웹 서비스가 설명된 WSDL과 SOAP 프로토콜을 이용한 시스템 간 연계</li>
      <li>소켓(Socket): 소켓을 생성하여 포트를 할당하고, 클라이언트의 요청을 연결하여 통신</li>
    </ul>
  </li>
</ul>

<h3 id="내외부-연계-모듈-구현">내외부 연계 모듈 구현</h3>

<h4 id="eaienterprise-application-intergration">EAI(Enterprise Application Intergration)</h4>

<p>기업에서 운영되는 서로 다른 플랫폼 및 애플리케이션 간의 정보를 전달, 연계 통합이 가능하도록 해주는 솔루션</p>

<ul>
  <li>미들웨어를 이용하여 비즈니스 로직을 중심으로 기업 내 애플리케이션을 통합 연계</li>
</ul>

<h4 id="eai-구성요소">EAI 구성요소</h4>

<ul>
  <li>EAI 플랫폼: 이기종 시스템 간 애플리케이션 상호 운영</li>
  <li>어댑터: 다양한 애플리케이션을 연결하는 EAI의 핵심 장치로 데이터 입출력 도구</li>
  <li>브로커: 데이터 포맷과 코드를 변환하는 솔루션</li>
  <li>메시지 큐: 비동기 메세지를 사용하는 다른 응용 프로그램 사이에서 데이터를 송수신하는 기술</li>
  <li>비지니스 워크플로우: 미리 정의된 기업의 비즈니스 workflow에 따라 업무를 처리하는 기능</li>
</ul>

<h4 id="eai-구축-유형">EAI 구축 유형</h4>

<ul>
  <li>포인트 투 포인트(Point-to-point): 가장 기초적인 애플리케이션 통합방법. 1:1 단순 통합방법</li>
  <li>허브 앤 스포크(Hub &amp; Spoke): 단일한 접점의 허브 시스템을 통하여 데이터를 젆송하는 중앙 집중식 방식</li>
  <li>메시지 버스(Message Bus): 애플리케이션 사이 미들웨어를 두어 연계하는 미들웨어 통합 방식</li>
  <li>하이브리드(Hybrid): 그룹 내는 허브앤 스포크 방식을 사용, 그룹 간에는 메시지 버스 방식을 사용하는 통합 방식</li>
</ul>

<h4 id="esbenterprise-service-bus">ESB(Enterprise Service Bus)</h4>

<p>기업에서 운영되는 서로 다른 플랫폼 및 애플리케이션들 간을 하나의 시스템으로 관리 운영할 수 있도록 서비스 중심의 통합을 지향하는 아키텍처. 느슨한 결합 방식 지원(서비스 변경이 있어도 연결된 다른 서비스에 영향이 없음)</p>

<ul>
  <li>미들웨어를 이용하여 서비스 중심으로 서비스를 지원하기 위한 관련시스템과 유기적 연계</li>
</ul>

<h4 id="esb-구축-유형">ESB 구축 유형</h4>

<p>버스 방식의 분산형 토폴로지 구성</p>

<h4 id="웹-서비스web-service">웹 서비스(Web Service)</h4>

<p>넽워크에 분산된 정보를 서비스 형태로 개방하여 표준화된 방식으로 공유하는 기술. 서비스 지향 아키텍처</p>

<h4 id="웹-서비스-유형">웹 서비스 유형</h4>

<ul>
  <li>SOAP(Simple Objet Access Protocol): HTTP, HTTPS, SMTP등을 사용하여 XML 기반의 메시지를 네트워크 상태에서 교환하는 프로토콜</li>
  <li>WSDL(Web Service Description Language): 웹 서비스명, 제공 위치, 메시지 포맷, 프로토콜 정보 등 웹서비스에 대한 상세 정보가 기술된 XML 형식으로 구현되어 있는 언어</li>
  <li>UDDI(Universal Description, Discovery and Intergration): 웹 서비스에 대한 정보인 WSDL을 등록하고 검색하기 위한 저장소로 공개적으로 접근, 검색이 가능한 레지스트</li>
</ul>

<h4 id="ipcinter-process-communication">IPC(Inter-Process Communication)</h4>

<p>운영체제에서 프로세스 간 서로 데이터를 주고받기 위한 통신 기술</p>

<h4 id="연계-테스트">연계 테스트</h4>

<p>송신 시스템과 수신 시스템을 연계하였을 경우 데이터의 정합성과 데이터 전송 여부에 대한 테스트</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="InfoProcessing" /><category term="정보처리기사" /><category term="정처기" /><category term="통합" /><category term="통합구현" /><category term="개발" /><summary type="html"><![CDATA[정보처리기사 - 통합 구현]]></summary></entry><entry><title type="html">CH02. 화면 설계</title><link href="http://localhost:4000/infoprocessing/post69/" rel="alternate" type="text/html" title="CH02. 화면 설계" /><published>2023-02-21T00:00:00+09:00</published><updated>2023-02-21T00:00:00+09:00</updated><id>http://localhost:4000/infoprocessing/post69</id><content type="html" xml:base="http://localhost:4000/infoprocessing/post69/"><![CDATA[<h3 id="uiuser-interface">UI(User Interface)</h3>

<p>사용자와 시스템 사이에서 의사소통 할 수 있도록 고안된 물리적, 가상의 매개체</p>

<h4 id="ui유형">UI유형</h4>

<ul>
  <li>CLI(Command Line Interface): 명령어를 텍스트로 입력하여 조작하는 사용자 인터페이스</li>
  <li>GUI(Graphical User Interface): 그래픽 환경을 기반으로 한 마우스나 전자펜을 이용한 사용자 인터페이스</li>
  <li>NUI(Natural User Interface): 신체 부위를 이용하는 사용자 인터페이스</li>
  <li>OUI(Organic User Interface): 현실에 존재하는 모든 사물이 입출력장치로 변화할 수 있는 사용자 인터페이스</li>
</ul>

<h4 id="ui-설계-원칙">UI 설계 원칙</h4>

<ul>
  <li>직관성: 누구나 쉽게 이해하고, 쉽게 사용할 수 있어야함</li>
  <li>유효성: 정확하고 완벽하게 사용자의 목표가 달성될 수 있도록 제작</li>
  <li>학습성: 초보와 숙련자 모두가 쉽게 배우고 사용할 수 있게 제작</li>
  <li>유연성: 사용자의 요구사항을 최대한 수용하고, 실수를 방지할 수 있도록 제작</li>
</ul>

<h4 id="ui-설계-지침">UI 설계 지침</h4>

<ul>
  <li>사용자 중심, 일관성, 단순성, 결과 예측 가능, 가시성, 표준화, 접근성, 명확성, 오류 발생 해결</li>
</ul>

<h4 id="ui-품질-요구사항isoiec-9126-기반">UI 품질 요구사항(ISO/IEC 9126 기반)</h4>

<ul>
  <li>기능성: 실제 수행 결과와 품질 요구사항과의 차이를 분석, 시스템 동작을 관찰하기 위한 품질 기준
    <ul>
      <li>적절성, 정밀성, 상호 운용성, 보안성, 호환성</li>
    </ul>
  </li>
  <li>신뢰성: 시스템이 일정한 시간 또는 작동되는 시간동안 의도하는 기능을 수행함을 보증하는 품질 기준
    <ul>
      <li>성숙성, 고장 허용성, 회복성</li>
    </ul>
  </li>
  <li>사용성: 사용자와 컴퓨터 사이에 발생하는 어떠한 행위를 정확하고 쉽게 인지할 수 있는 품질 기준
    <ul>
      <li>이해성, 학습성, 운용성</li>
    </ul>
  </li>
  <li>효율성: 할당된 시간에 한정된 자원으로 얼마나 빨리 처리할 수 있는가에 대한 품질 기준
    <ul>
      <li>시간 효율성, 자원 효율성</li>
    </ul>
  </li>
  <li>유지보수성: 요구사항을 개선하고 확장하는 데 있어 얼마나 용이한가에 대한 품질 기준
    <ul>
      <li>분석성, 변경성, 안정성, 시험성</li>
    </ul>
  </li>
  <li>이식성: 다른 플랫폼에서도 추가 작업 없이 얼마나 쉽게 적용 가능한가에 대한 품질 기준
    <ul>
      <li>적용성, 설치성, 대체성</li>
    </ul>
  </li>
</ul>

<h4 id="ui-표준">UI 표준</h4>

<ul>
  <li>디자인 철학과 원칙 기반하에 전체 시스템에 공통으로 적용되는 화면 간 이동, 화면구성 등에 관한 규약</li>
</ul>

<h4 id="crudcreate-read-update-delete">CRUD(Create, Read, Update, Delete)</h4>

<ul>
  <li>컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능</li>
</ul>

<h4 id="ui-개발을-위한-주요-기법">UI 개발을 위한 주요 기법</h4>

<ul>
  <li>3C 분석: 고객(Customer), 자사(Company), 경쟁사(Competitor)를 비교하고 분석하여 자사를 어떻게 차별화해서 경쟁에서 이길 것인가를 분석하는 기법</li>
  <li>SWOT 분석: 기업의 내/외부 환경을 분석하여 Strength(강점), Weakness(약점), Opportunity(기회), Treat(위협) 요인을 규정하고 이를 토대로 경영 저냑을 수립하는 방법</li>
  <li>시나리오 플래닝: 상황 변화를 사전에 예측하고 다양한 시나리오를 설계하여 불확실성을 제거하는 경영 전략 방법</li>
  <li>사용성 테스트: 사용자가 직접 제품을 사용하면서 시나리오에 맞춰 과제를 수행한 후 질문에 응답하는 테스트</li>
  <li>워크숍: 특정 문제나 과제에 대한 새로운 지식, 기술, 아이디어, 방법들을 서로 교환하고 검토하는 세미나</li>
</ul>

<h4 id="ui-화면-설계-구분">UI 화면 설계 구분</h4>

<ul>
  <li>와이어프레임: 화면 단위의 레이아웃을 설계하는 작업 (ppt, 키노트, 스케치, 일러스트)</li>
  <li>스토리보드: 서비스 구축을 위한 모든 정보(정책, 프로세스,와이어프레임, 기능 정의 등)가 담겨 있는 설계 산출물 (ppt, 키노트, 스케치)</li>
  <li>프로토타입: 정적인 화면(와이어프레임, 스토리보드)에 동적 효과를 적용하여 실제 구현된 것처럼 시뮬레이션 할 수 있는 모형. 전체적인 기능을 간략한 형태로 구현한 시제품 (HTML, CSS)</li>
</ul>

<h3 id="ui-설계">UI 설계</h3>

<h4 id="umlunified-modeling-language">UML(Unified Modeling Language)</h4>

<ul>
  <li>객체 지향 소프트웨어 개발 과정에서 산출물을 명세화, 시각화, 문서화할 때 사용되는 모델링 기술과 방법론을 통합해서 만든 표준화된 범용 모델링 언어</li>
</ul>

<h5 id="uml-특징">UML 특징</h5>

<ul>
  <li>가시화 언어, 구축 언어, 명세화 언어, 문서화 언어</li>
</ul>

<h5 id="uml-구성요소">UML 구성요소</h5>

<ul>
  <li>사물, 관계, 다이어그램</li>
</ul>

<h5 id="uml다이어그램">UML다이어그램</h5>

<ul>
  <li>구조적 다이어그램 / 정적 다이어그램
    <ul>
      <li>클래스(Class): 클래스의 속성 및 연산과 클래스간 정적인 관계를 표현</li>
      <li>객체(Object): 클래스에 속한 사물(객체 =인스턴스)를 특정 시점의 객체와 객체 사이의 관계로 표현</li>
      <li>컴포넌트(Component): 시스템을 구성하는 물리적인 컴포넌트와 그들 사이의 의존 관계 표현</li>
      <li>배치(Deployment): 컴포넌트 사이의 종속성을 표현하고, 물리적 요소들의 위치를 표현</li>
      <li>복합체 구조(Composite Structure): 클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현</li>
      <li>패키지(Package): 유스케이스, 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계</li>
    </ul>
  </li>
  <li>행위적 다이어그램 / 동적 다이어그램
    <ul>
      <li>유스케이스(Usecase): 시스템이 제공하고 있는 기능 및 그와 관련된 외부 요소를 사용자의 곤점에서 표현</li>
      <li>시퀀스(Sequence): 객체 간 동적 상호 작용을 시간적 개념을 중심으로 메시지 흐름으로 표현</li>
      <li>커뮤니케이션(Communication): 동작에 참여하는 객체들이 주고받는 메시지를 표현하고, 객체 간의 연관까지 표현</li>
      <li>상태(State): 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 상태가 어떻게 변화하는지 표현</li>
      <li>활동(Activity): 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서대로 표현</li>
      <li>타이밍(Timing): 객체 상태 변화와 시간 제약을 명시적으로 표현</li>
    </ul>
  </li>
</ul>

<h4 id="ui-시나리오-문서의-작성요건">UI 시나리오 문서의 작성요건</h4>

<ul>
  <li>완전성, 일관성, 이해성, 가독성, 추적 용이성, 수정 용이성</li>
</ul>

<h4 id="ui-설계-도구의-유형">UI 설계 도구의 유형</h4>

<ul>
  <li>화면 설계 도구: 파워목업, 발사믹목업, 카카오 오븐</li>
  <li>프로토타이핑 도구: UX핀, 액슈어, 네이버 프로토나우</li>
  <li>UI 디자인 도구: 스케치, Adobe XD</li>
  <li>UI 디자인 산출물로 작업하는 프로토타이핑 도구: 인버전, 픽사에이트, 프레이머</li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="InfoProcessing" /><category term="정보처리기사" /><category term="정처기" /><category term="화면" /><category term="화면설계" /><category term="개발" /><summary type="html"><![CDATA[정보처리기사 - 화면 설계]]></summary></entry><entry><title type="html">CH03. 데이터 입출력 구현</title><link href="http://localhost:4000/infoprocessing/post70/" rel="alternate" type="text/html" title="CH03. 데이터 입출력 구현" /><published>2023-02-21T00:00:00+09:00</published><updated>2023-02-21T00:00:00+09:00</updated><id>http://localhost:4000/infoprocessing/post70</id><content type="html" xml:base="http://localhost:4000/infoprocessing/post70/"><![CDATA[<h3 id="논리-데이터-저장소-확인">논리 데이터 저장소 확인</h3>

<h4 id="데이터-모델data-model">데이터 모델(Data Model)</h4>

<ul>
  <li>현실 세계의 정보를 인간과 컴퓨터가 이해할 수 있도록 추상화하여 표현한 모델</li>
</ul>

<h4 id="데이터-모델-절차">데이터 모델 절차</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">요구사항 분석</code> → <code class="language-plaintext highlighter-rouge">개념적 설계</code> → <code class="language-plaintext highlighter-rouge">논리적 설계</code> → <code class="language-plaintext highlighter-rouge">물리적 설계</code></li>
</ul>

<h4 id="논리-데이터-모델링">논리 데이터 모델링</h4>

<ul>
  <li>업무의 모습을 모델링 표기법으로 형상화하여 사람이 이해하기 쉽게 표현하는 프로세스</li>
</ul>

<h4 id="논리적-데이터-모델링-종류">논리적 데이터 모델링 종류</h4>

<ul>
  <li>관계 데이터 모델: 테이블 형태, 1:1, 1:N, N:M</li>
  <li>계층 데이터 모델: 트리 형태(상하 관계), 1:N</li>
  <li>네트워크 데이터 모델: 그래프 형태, N:M</li>
</ul>

<h4 id="관계-대수">관계 대수</h4>

<ul>
  <li>관계형 데이터베이스에서 원하는 정보와 그 정보를 어떻게 유도하는가를 기술하는 절차적 정형 언어</li>
</ul>

<h5 id="관계-대수-연산자-종류">관계 대수 연산자 종류</h5>

<ul>
  <li>일반 집합 연산자
    <ul>
      <li>합집합(Union): ∪</li>
      <li>교집합(Intersection): ∩</li>
      <li>차집합(Difference): －</li>
      <li>카티션 프로덕트(CARTESIAN Product): ×</li>
    </ul>
  </li>
  <li>순수 관계 연산자
    <ul>
      <li>셀렉트(Select): σ</li>
      <li>프로젝트(Project): π</li>
      <li>조인(Join): ⋈</li>
      <li>디비전(Division): ÷</li>
    </ul>
  </li>
</ul>

<h4 id="관계-해석">관계 해석</h4>

<ul>
  <li>튜플 관계해석과 도메인 해석을 하는 비절차적 언어</li>
</ul>

<h4 id="논리-데이터-모델링-속성">논리 데이터 모델링 속성</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">개체(Entitiy)</code>, <code class="language-plaintext highlighter-rouge">속성(Attributes)</code>, <code class="language-plaintext highlighter-rouge">관계(Relationship)</code></li>
</ul>

<h4 id="개체-관계e-r-모델">개체-관계(E-R) 모델</h4>

<ul>
  <li>데이터와 그들간의 관계를 사람이 이해할 수 있는 형태로 표현한 모델</li>
</ul>

<h4 id="정규화">정규화</h4>

<ul>
  <li>데이터 모델에서 데이터의 중복성을 제거하여 이상 현상을 방지하고, 데이터의 일관성과 정확성을 유지하기 위해 무손실 분해하는 과정</li>
</ul>

<h5 id="이상현상anomaly">이상현상(Anomaly)</h5>

<ul>
  <li>데이터의 중복성으로 인해 릴레이션을 조작할때 발생하는 비합리적 현상
    <ul>
      <li>삽입이상: 불필요한 세부정보 입력하는 경우</li>
      <li>삭제이상: 원치 않는 다른 정보가 같이 삭제되는 경우</li>
      <li>갱신이상: 특정부분만 수정되어 중복된 값이 모순을 일으키는 경우</li>
    </ul>
  </li>
</ul>

<h5 id="정규화-단계">정규화 단계</h5>

<ul>
  <li>1정규형(1NF): 도메인이 원자값으로 구성</li>
  <li>2정규형(2NF): 부분함수 종속제거 (완전 함수적 종속을 만족)</li>
  <li>3정규형(3NF): 이행함수 종속제거</li>
  <li>보이스-코드 정규형(BCNF): 결정자 후보 키가 아닌 함수 종속 제거</li>
  <li>4정규형(4NF): 다중 값 종속제거</li>
  <li>5정규형(5NF): 조인 종속 제거</li>
</ul>

<h5 id="반정규화de-nomalization">반정규화(De-Nomalization)</h5>

<ul>
  <li>정규화된 개체, 속성, 관계에 대해 성능향상과 개발운영의 단순화를 위해 중복, 통합, 분리 등을 수행하는 데이터 모델링 기법</li>
</ul>

<h3 id="물리-데이터-저장소-설계">물리 데이터 저장소 설계</h3>

<h4 id="참조무결성-제약조건">참조무결성 제약조건</h4>

<ul>
  <li>릴레이션과 릴레이션 사이에 대한 참조의 일관성을 보장하기 위한 조건
    <ul>
      <li>제한(Restricted): 다른테이블이 삭제할 테이블을 참조 중이면 제거하지 않는 옵션</li>
      <li>연쇄(Cascade): 참조하는 테이블까지 연쇄적으로 제거하는 옵션</li>
      <li>널값(Set Null): 참조되는 리레이션에서 튜플을 삭제하고, 참조하는 튜플들의 외래값에 NULL값을 넣는 옶션. / 만약, NOT NULL 명시시 삭제 연산 거절됨.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>ALTER TABLE 테이블 ADD
FOREIGN KEY (외래키)
REFERENCES 참조테이블(기본키)
ON DELETE [ RESTRICT | CASCADE | SET NULL ] ;
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="인덱스index">인덱스(Index)</h4>

<ul>
  <li>데이터 레코드를 빠르게 접근하기 위해 ‘키값, 포인터’ 쌍으로 구성되는 데이터 구조
    <ul>
      <li>클러스터드 인덱스: 인덱스 키의 순서에 따라 데이터가 정렬되어 저장되는 방식</li>
      <li>넌클러스터드 인덱스: 인덱스의 키값만 정렬되어 있고 실제 데이터는 정렬되지 않는 방식</li>
    </ul>
  </li>
</ul>

<h4 id="뷰view">뷰(View)</h4>

<ul>
  <li>접근이 허용된 자료만을 제한적으로 보여주기 위해 하나 이상의 기본 테이블로 구성된 가상 테이블</li>
</ul>

<h4 id="클러스터cluster">클러스터(Cluster)</h4>

<ul>
  <li>데이터 액세스 효율을 향상시키기 위해 동일한 성격의 데이터를 동일한 데이터 블록에 저장하는 물리적 저장 방법. 클러스터의 분포도가 넓을수록 유리하다</li>
</ul>

<h4 id="파티션partition">파티션(Partition)</h4>

<ul>
  <li>대용량의 테이블이나 인덱스를 작은 논리적 단위인 파티션으로 나누는 것
    <ul>
      <li>범위분할(Range Partitioning): 지정한 열의 값을 기준으로 분할함</li>
      <li>해시분할(Hash Partitioning): 해시 함수를 적용한 결과 값에 따라 데이터를 분할.</li>
      <li>리스트분할(List Partitioning): 특정 파티션에 저장 될 데이터에 대한 명시적 제어가 가능한 분할 기법</li>
      <li>조합분할(Composite Partitioning): 범위,해시,리스트 분할 중 2개의이상의 파티셔닝을 결합하는 방식. 파티션이 너무 클떄 사용</li>
    </ul>
  </li>
</ul>

<h5 id="파티션-장점">파티션 장점</h5>

<ul>
  <li>성능 향상, 가용성 향상, 백업 가능, 경합 감소</li>
</ul>

<h3 id="데이터베이스-기초-활용하기">데이터베이스 기초 활용하기</h3>

<h4 id="데이터베이스database">데이터베이스(Database)</h4>

<ul>
  <li>다수의 인원, 시스템 또는 프로그램이 사용할 목적으로 통합하여 관리되는 데이터의 집합</li>
</ul>

<h4 id="데이터베이스-정의">데이터베이스 정의</h4>

<ul>
  <li>통합된 데이터: 자료의 중복을 배제한 데이터의 모임</li>
  <li>저장된 데이터: 저장 매체에 저장된 데이터</li>
  <li>운영 데이터: 조직의 업무를 수행하는 데 필요한 데이터</li>
  <li>공용 데이터: 여러 애플리케이션, 시스템들이 공동으로 사용하는 데이터</li>
</ul>

<h4 id="데이터베이스-특성">데이터베이스 특성</h4>

<ul>
  <li>실시간 접근성: 쿼리에 대하여 실시간 응답이 가능해야 함</li>
  <li>계속적인 변화: 새로운 데이터의 삽입, 삭제 갱신 으로 항상 최신의 데이터를 유지</li>
  <li>동시공용: 다수의 사용자가 동시에 같은 내용의 데이터를 이용할 수 있어야함</li>
  <li>내용참조: 사용자가 요구하는 데이터 내용으로 데이터를 찾음</li>
</ul>

<h4 id="데이터베이스-종류">데이터베이스 종류</h4>

<ul>
  <li>파일 시스템(File System): 파일에 이름을 부여하고 저장이나 검색을 위해 논리적으로 그것들을 어디에 위치시켜야 하는지 등을 정의한 뒤 관리하는 데이터베이스 전 단계의 데이터 관리 방식</li>
  <li>관계형 데이터베이스 시스템(RDBMS): 관계형 모델을 기반
    <ul>
      <li>종류: Oracle, SQL Server, MySQL, MariaDB 등</li>
    </ul>
  </li>
  <li>계층형 데이터베이스 시스템(HDBMS): 데이터를 상하 종속적인 관계로 계층화화여 관리
    <ul>
      <li>종류: IMS, System 2000 등</li>
    </ul>
  </li>
  <li>네트워크 데이터베이스 관리시스템(NDBMS): 데이터를 네트워크상의 망상 형태로 표현한 데이터 모델
    <ul>
      <li>종류: IDS, IDMS 등</li>
    </ul>
  </li>
</ul>

<h4 id="dbmsdatabase-management-system">DBMS(Database Management System)</h4>

<ul>
  <li>데이터 관리의 복잡성을 해결하는 동시에 데이터 추가, 변경, 검색, 삭제 및 백업, 복구, 보안 등의 기능을 지원하는 소프트웨어</li>
</ul>

<h5 id="dmbs-유형">DMBS 유형</h5>

<ul>
  <li>키-값(Key-Value) DBMS: Unique 한 키에 하나의 값을 가지고 있는 형태</li>
  <li>컬럼 기반 데이터 저장(Column Family Data Store) DMBS: Key안에(Column, Value) 조합으로 된 여러개의 필드를 갖는 DBMS</li>
  <li>문서 저장(Document Store) DBMS: 값(Value)의 데이터 타입이 문서(Documnet)라는 타입을 사용하는 DBMS</li>
  <li>그래프(Graph) DBMS: 시맨틱 웹과 온톨로지 분야에서 활용되는 그래프로 데이터를 표현하는 DBMS</li>
</ul>

<h5 id="dbms-특징">DBMS 특징</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">무결성</code>, <code class="language-plaintext highlighter-rouge">일관성</code>, <code class="language-plaintext highlighter-rouge">회복성</code>, <code class="language-plaintext highlighter-rouge">보안성</code>, <code class="language-plaintext highlighter-rouge">효율성</code></li>
</ul>

<h4 id="빅-테이터big-data">빅 테이터(Big Data)</h4>

<ul>
  <li>시스템, 서비스, 조직(회사) 등에서 주어진 비용, 시간 내에 처리 가능한 수십 페타바이트(PB) 크기의 비정형 데이터</li>
</ul>

<h5 id="빅데이터-특성">빅데이터 특성</h5>

<ul>
  <li>데이터의 양, 데이터의 다양성, 데이터의 속도</li>
</ul>

<h5 id="빅데이터-수집-저장-처리-기술">빅데이터 수집, 저장, 처리 기술</h5>

<ul>
  <li>비정형/반정형 데이터 수집: 내/외부 정제되지 않은 데이터를 확보하여 수집 및 전송하는 기술</li>
  <li>정형 데이터 수집: 내/외부 정제된 대용량 데이터의 수집 및 전송 기술</li>
  <li>분산데이터 저장/처리: 대용량 파일의 효과적인 부산 저장 및 분산 처리 기술</li>
  <li>분산데이터 베이스: HDFS 칼럼 기반 데이터베이스로 실시간 랜덤 조회 및 업데이트 가능
    <ul>
      <li>HDFS:대용량 데이터의 집합을 처리하는 응용 프로그램에 적합하도록 설계된 하둡 분산 파일 시스템</li>
    </ul>
  </li>
</ul>

<h4 id="nosqlnot-only-sql">NoSQL(Not Only SQL)</h4>

<ul>
  <li>데이터 저장에 고정된 테이블 스키마가 필요하지 않고 조인 연산을 사용할 수 없으며, 수평적으로 확장이 가능한 DBMS</li>
</ul>

<h5 id="nosql-특성">NoSQL 특성</h5>

<ul>
  <li>Basically Available: 언제든지 데이터 접근 할 수 있는 속성</li>
  <li>Soft-State: 외부에서 전송된 정보를 통해 결정되는 속성</li>
  <li>Eventually Consistency: 이관성이 유지되는 속성</li>
</ul>

<h5 id="nosql-유형">NoSQL 유형</h5>

<ul>
  <li>Key-Value Store: Unique 한 키에 하나의 값을 가지고 있는 형태</li>
  <li>Column Family Data Store : Key안에(Column, Value) 조합으로 된 여러개의 필드를 갖는 DB</li>
  <li>Document Store: 값(Value)의 데이터 타입이 문서(Documnet)라는 타입을 사용하는 DB</li>
  <li>Graph DBMS: 시맨틱 웹과 온톨로지 분야에서 활용되는 그래프로 데이터를 표현하는 DBMS’
    <ul>
      <li>시맨틱 웹: 온톨로지를 활용하여 서비스를 기술하고, 온톨로지의 의미적 상호 운용성을 이용해서 서비스 검색, 조합, 중재 기능을 자동화하는 웹</li>
      <li>온톨로지: 실세계에 존재하는 모든 개념들과 개념들의 속성, 그리고 개념들간의 관계 정보를 컴퓨터가 이해할 수 있도록 서술해 놓은 지식베이스</li>
    </ul>
  </li>
</ul>

<h4 id="데이터-마이닝data-minning">데이터 마이닝(Data Minning)</h4>

<ul>
  <li>대규모로 저장된 데이터 안에서 체계적이고 자동적으로 통계적 규칙이나 패턴을 찾아내는 기술</li>
</ul>

<h5 id="데이터-마이닝-절차">데이터 마이닝 절차</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">목적 설정</code> → <code class="language-plaintext highlighter-rouge">데이터 준비</code> → <code class="language-plaintext highlighter-rouge">가공</code> → <code class="language-plaintext highlighter-rouge">마이닝 기법 적용</code> → <code class="language-plaintext highlighter-rouge">정보 검증</code></li>
</ul>

<h5 id="데이터-마이닝-주요-기법">데이터 마이닝 주요 기법</h5>

<ul>
  <li>분류 규칙: 과거 데이터로를 토대로 새로운 레코드의 결과 값을 예측하는 기법</li>
  <li>연과 규칙: 데이터 안에 항목들 간의 종속관계를 찾아내는 기법</li>
  <li>연속 규칙: 연관 규칙에 시간 관련 정보가 포함된 형태의 기법</li>
  <li>데이터 군집화: 대상 레코드들을 유사한 특성을 지닌 몇 개의 소그룹으로 분할하는 작업</li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="InfoProcessing" /><category term="정보처리기사" /><category term="정처기" /><category term="데이터" /><category term="데이터입출력구현" /><category term="개발" /><summary type="html"><![CDATA[정보처리기사 - 데이터 입출력 구현]]></summary></entry><entry><title type="html">CH01. 소프트웨어 개발 방법론</title><link href="http://localhost:4000/infoprocessing/post68/" rel="alternate" type="text/html" title="CH01. 소프트웨어 개발 방법론" /><published>2023-01-29T00:00:00+09:00</published><updated>2023-01-29T00:00:00+09:00</updated><id>http://localhost:4000/infoprocessing/post68</id><content type="html" xml:base="http://localhost:4000/infoprocessing/post68/"><![CDATA[<h3 id="소프트웨어-생명주기sdlc">소프트웨어 생명주기(SDLC)</h3>

<p>시스템의 요구분석 부터 유지보수까지 전 공정을 체계화 한 절차</p>

<ul>
  <li>폭포수 모델: 가장 오래된 모델, 각 단계를 확실히 마무리 지은 후 다음 단계로 넘어감</li>
  <li>프로토타이핑 모델: 주요기능을 프로토타입으로 구현해, 고객의 피드백을 반영하여 S/W 만듦</li>
  <li>나선형 모델: 위험을 최소화하기 위해 점진적으로 시스템 개발</li>
  <li>반복적 모델: 구축대상을 나누어 병렬적으로 개발 후 통합하거나, 반복적으로 개발</li>
</ul>

<h3 id="소프트웨어-개발-방법론">소프트웨어 개발 방법론</h3>

<p>소프트웨어 개발의 시작부터 시스템을 사용하지 않는 과정까지의 전 과정을 형상화한 방법론</p>

<ul>
  <li>구조적 방법론: 전체 시스템을 기능에 따라 나누어 개발하고, 이를 통합하는 방법론
    <ul>
      <li>나씨-슈나이더만 차트: 논리의 기술에 중점을 둔 도형식 표현방법</li>
    </ul>
  </li>
  <li>정보공학 방법론: 정보시스템 개발에 필요한 관리 절차와 작업 기법을 체계화한 방법론</li>
  <li>객체 지향 방법론: ‘객체’라는 기본 단위로 시스템을 분석 및 설계하는 방법론</li>
  <li>컴포넌트 기반 방법론 (CBD): 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 작성하는 방법론</li>
  <li>애자일 방법론: 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적인 시스템 개발할 수 있는 신속 적응적 개량 개발 방법론</li>
  <li>제품 계열 방법론: 특정 제품에 적용하고 싶은 공통된 기능을 정의해 개발하는 방법론, 임베디드 S/W작성에 유용</li>
</ul>

<h4 id="애자일agile-방법론">애자일(Agile) 방법론</h4>

<ul>
  <li>XP(eXtreme Programming): 의사소통 개선과 즉각적 피드백으로 스프트웨어 품질을 높이기 위한 방법론
    <ul>
      <li>XP 5가지 가치: 용기, 단순성, 의사소통, 피드백, 존중</li>
    </ul>
  </li>
  <li>스크럼(Scrum): 매일 정해진 시간, 장소에서 짤은 시간의 개발을 하는 팀을 위한 프로젝트 관리 중심 방법론</li>
  <li>린(Lean): 도요타의 린 시스템 품질기법을 소프트웨어 개발 프로세스에 적용해서 낭비 요소를 제거하여 품질을 향상시킨 방법론
    <ul>
      <li>Lean 7가지 가치: 낭비제거, 품질 내재화, 지식 창출, 늦은 확정, 빠른 인도, 사람 존중, 전체 최적화</li>
    </ul>
  </li>
</ul>

<h4 id="객체-지향-분석-방법론">객체 지향 분석 방법론</h4>

<p>객체 지향 분석(OOA) : 사용자의 요구사항을 분석하여 요구된 문제와 관련된 모든 클래스(객체), 속성과 연산, 관계를 정의</p>

<ul>
  <li>OOSE(Object Oriented Software Engineering): 유스케이스를 모든 모델의 근간으로 활용되는 방법론, 야콥슨 만듦</li>
  <li>OMT(Object Modeling Technology): 그래픽 표기법을 이용하여 소프트웨어 구성요소를 모델링, 럼바우 만듦
    <ul>
      <li>분석 절차: 객체 모델링 → 동적 모델링 → 기능 모델링</li>
      <li>객체 모델링: 객체들 간의 관계를 정의하여 ER 다이어그램을 만드는 과정까지의 모델링, 객체 다이어그램 활용</li>
      <li>동적 모델링: 시간의 흐름에 따라 객체들의 동적인 행위를 표현하는 모델링, 상태 다이어그램 활용</li>
      <li>기능 모델링: 프로세스들의 자료 흐름을 중심으로 처리 과정 표현하는 모델링, 자료 흐름도(DFD) 활용</li>
    </ul>
  </li>
</ul>

<h3 id="비용-산정-모형-분류">비용 산정 모형 분류</h3>

<ul>
  <li>하향식 산정방법: 경험이 많은 전문가에게 비용산정 의뢰 또는 전문가와 조정자를 통해 비용산정
    <ul>
      <li>전문가 판단</li>
      <li>델파이 기법: 전문가의 경험적 지식을 통한 문제 해결 및 미래예측을 위한 기법</li>
    </ul>
  </li>
  <li>상향식 산정방법: 세부적인 요구사항과 기능에 따라 필요한 비용 산정
    <ul>
      <li>코드 라인 수(LoC: Lines of Code): 원시 코드 라인수의 낙관치, 중간치, 비관치를 측정하여 예측치를 구해 비용산정</li>
      <li>Man Month: 한 사람이 1개월 동안 할 수 있는 일의 양을 기준으로 비용산정</li>
      <li>COCOMO 모형: 보헴이 제안한 모형으로 프로그램의 규모에 따라 비용산정
        <ul>
          <li>조직형(Organic Mode): 5만(50KDSI)라인 이하</li>
          <li>반 분리형(Semi-Detached Mode): 30만(300KDSI)라인 이하</li>
          <li>임베디드형(Embedded Mode): 30만(300KDSI)라인 이상</li>
        </ul>
      </li>
      <li>푸트남(Putnam) 모형: 개발주기의 단계별로 요구할 인력의 분포를 가정하는 방식</li>
      <li>기능점수(FP) 모형: 소프트웨어 기능을 증대시키는 요인별로 가중치를 부여하여 비용산정</li>
    </ul>
  </li>
</ul>

<h4 id="비용-산정-자동화-추정-도구">비용 산정 자동화 추정 도구</h4>

<ul>
  <li>SLIM: Rayleigh-Norden곡선과 Putnam예측 모델을 기초로 하여 개발된 자동화 추정 도구</li>
  <li>ESTIMACS: 다양한 프로젝트와 개인별 요소를 수용하도록 FP모형을 기초로 하여 개발된 자동화 추정 도구</li>
</ul>

<h3 id="일정관리-모델">일정관리 모델</h3>

<p>프로젝트가 일정 기한 내에 완료될 수 있도록 관리하는 모델</p>

<ul>
  <li>주 공정법(CPM): 여러 작업의 수행 순서가 얽혀 있는 프로젝트의 일정을 계산하는 기법
    <ul>
      <li>주 공정(Critical Path: 임계 경로): 프로젝트의 시작에서 종료까지 가장 긴 시간이 걸리는 경로</li>
    </ul>
  </li>
  <li>PERT: 일의 순서를 계획적으로 정리하기 위한 수렴 기법. 비관치, 중간치, 낙관치 이용</li>
  <li>중요 연쇄 프로젝트 관리(CCPM): 주 공정 연쇄법으로 자원제약사항을 고려하여 일정을 작성하는 기법</li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="InfoProcessing" /><category term="정보처리기사" /><category term="정처기" /><category term="소프트웨어" /><category term="소프트웨어개발방법론" /><category term="개발" /><summary type="html"><![CDATA[정보처리기사 - 소프트웨어 개발 방법론]]></summary></entry><entry><title type="html">React Router에서 render와 component 차이</title><link href="http://localhost:4000/react/post66/" rel="alternate" type="text/html" title="React Router에서 render와 component 차이" /><published>2022-12-21T00:00:00+09:00</published><updated>2022-12-21T00:00:00+09:00</updated><id>http://localhost:4000/react/post66</id><content type="html" xml:base="http://localhost:4000/react/post66/"><![CDATA[<p>React에서는 Route를 사용하여 라우팅을 하는 것이 가능합니다. react-router에서 컴포넌트를 렌더링 하는 방법은 3가지가 있습니다.</p>

<h3 id="자식으로-렌더링-하기">자식으로 렌더링 하기</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Link</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PageOne</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/PageOne</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PageTwo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/PageTwo</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/pageone"</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">PageOne</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/pagetwo"</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">PageTwo</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="component-사용">component 사용</h3>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PageOne</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/PageOne</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
       <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/pageone"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">PageOne</span><span class="si">}</span><span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;Route&gt;</code>의 자식으로 렌더링 하거나 <code class="language-plaintext highlighter-rouge">&lt;Route component&gt;</code>를 활용하여 렌더링 하는 방법 모두 간편하게 이용할 수 있지만 두 방법 모두 props를 사용할 수 없다는 단점이 있고, component를 사용하는 경우는 React.createElement 사용해서 새로운 요소를 계속 만들기 때문에 비효율적입니다. 그래서 최종적으로 가장 권장되는 방법이 바로 아래의 <code class="language-plaintext highlighter-rouge">render</code>를 사용하는 방법이라고 할 수 있습니다.</p>

<h3 id="render-사용">render 사용</h3>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Link</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PageOne</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/PageOne</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PageTwo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/PageTwo</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
       <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/pageone"</span> <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">PageOne</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;</span>
       <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/pagetwo"</span> <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">PageTwo</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 사용하면 불필요한 컴포넌트 재마운트 없이 쉽게 렌더링 할 수 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">&lt;</span><span class="nc">Route</span> 
  <span class="na">path</span><span class="p">=</span><span class="s">"/pageone"</span> 
  <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">PageOne</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">isAuthed</span><span class="p">=</span><span class="s">"{true}"</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>props를 전달하고 싶은 경우에는 위 방식으로 사용할 수 있습니다 :)</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="https://nyang-in.tistory.com/228">https://nyang-in.tistory.com/228</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="router" /><category term="라우터" /><category term="render" /><category term="component" /><summary type="html"><![CDATA[render / component]]></summary></entry><entry><title type="html">React Router - useHistory로 경로 설정</title><link href="http://localhost:4000/react/post67/" rel="alternate" type="text/html" title="React Router - useHistory로 경로 설정" /><published>2022-12-21T00:00:00+09:00</published><updated>2022-12-21T00:00:00+09:00</updated><id>http://localhost:4000/react/post67</id><content type="html" xml:base="http://localhost:4000/react/post67/"><![CDATA[<p>react-router-dom의 useHistory Hooks를 사용하여 경로 설정을 해보도록 하겠습니다.</p>

<h3 id="일반적인-usehistory-사용">일반적인 useHistory 사용</h3>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">BrowserRouter</span><span class="p">,</span>
  <span class="nx">Switch</span><span class="p">,</span>
  <span class="nx">Route</span><span class="p">,</span>
  <span class="nx">Redirect</span><span class="p">,</span>
  <span class="nx">useHistory</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// App 컴포넌트</span>
<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Buttons</span> <span class="p">/&gt;</span>
      <span class="si">{</span><span class="cm">/* 라우팅 */</span><span class="si">}</span>
      <span class="p">&lt;</span><span class="nc">Switch</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="p">=</span><span class="s">"/about"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">About</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="p">=</span><span class="s">"/skills"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Skills</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="p">=</span><span class="s">"/projects"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Projects</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/"</span> <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Redirect</span> <span class="na">to</span><span class="p">=</span><span class="s">"about"</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Switch</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">useHistory</span><span class="p">();</span>

<span class="k">return</span> <span class="p">(</span> 
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">/skills</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>Skills<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">/projects</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>Project<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="c1">// 기타 컴포넌트들</span>
<span class="kd">const</span> <span class="nx">About</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>This is About Component<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="kd">const</span> <span class="nx">Skills</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>This is Skills Component<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="kd">const</span> <span class="nx">Projects</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>This is Projects Component<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">useHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">useHistory</span><span class="p">();</span>

<span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Next</span><span class="dl">"</span><span class="p">)}</span><span class="si">}</span> <span class="p">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>보통 위와 같은 형태로 history.push()를 사용합니다.</p>

<h3 id="props-넘기기">props 넘기기</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">useHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">useHistory</span><span class="p">();</span>

 <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
   <span class="na">pathname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/Next</span><span class="dl">"</span><span class="p">,</span>
   <span class="na">state</span><span class="p">:</span> <span class="p">{</span><span class="na">displays</span><span class="p">:</span> <span class="nx">displays</span><span class="p">}</span>
  <span class="p">})}</span><span class="si">}</span> <span class="p">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>props를 넘기고 싶은 경우에는 위와 같이 사용할 수 있습니다.</p>

<h3 id="props-받기">props 받기</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">useLocation</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">location</span> <span class="o">=</span> <span class="nx">useLocation</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">displays</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>props를 받아서 사용하고 싶은 경우에는 위와 같이 useLocation을 사용하여 받으면 됩니다. useLocation은 현재 페이지에 대한 url 정보를 알려주는 Hooks로 url이 바뀔 때마다 새로운 location이 반환됩니다.</p>

<h4 id="uselocation의-내용물">useLocation의 내용물</h4>

<ol>
  <li>pathname : 현재 경로</li>
  <li>search: ?부터 나오는 문자열 ex) ?id=1</li>
  <li>hash : #부터 나오는 문자열 ex) #id=1
(search와 hash 동시에 사용할 수 있다!)</li>
  <li>state: 숨겨서 보내는 정보</li>
  <li>key: 고유한 문자열 키.</li>
</ol>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="https://byul91oh.tistory.com/467">https://byul91oh.tistory.com/467</a></li>
  <li><a href="https://velog.io/@duswn38/React-react-router%EB%A1%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99%EC%8B%9C-props-%EB%84%98%EA%B8%B0%EA%B8%B0">https://velog.io/@duswn38/React-react-router%EB%A1%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99%EC%8B%9C-props-%EB%84%98%EA%B8%B0%EA%B8%B0</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="router" /><category term="라우터" /><category term="useHistory" /><category term="Hooks" /><summary type="html"><![CDATA[render / component]]></summary></entry><entry><title type="html">User Agent 브라우저 정보 얻기 (Chrome 인지 아닌지 체크, 모바일 디바이스 구분)</title><link href="http://localhost:4000/javascript/post65/" rel="alternate" type="text/html" title="User Agent 브라우저 정보 얻기 (Chrome 인지 아닌지 체크, 모바일 디바이스 구분)" /><published>2022-12-20T00:00:00+09:00</published><updated>2022-12-20T00:00:00+09:00</updated><id>http://localhost:4000/javascript/post65</id><content type="html" xml:base="http://localhost:4000/javascript/post65/"><![CDATA[<p>크롬 브라우저가 아닌 다른 브라우저에서 접속한 경우, 크롬 브라우저 다운로드를 권장하는 배너를 띄우고 싶거나 접속한 디바이스가 모바일 디바이스인지 구분하려면 어떻게 해야할까요? 바로 DOM 객체 Navigator의 userAgent라는 속성을 사용하면 됩니다.</p>

<h3 id="️-useragent-문법">✔️ UserAgent 문법</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-브라우저-정보-확인-예제">✔️ 브라우저 정보 확인 예제</h3>

<h4 id="예제">예제</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">demo</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="kd">var</span> <span class="nx">txt</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Browser CodeName: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">appCodeName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Browser Name: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">appName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Browser Version: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">appVersion</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Cookies Enabled: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">cookieEnabled</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Browser Language: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">language</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Browser Online: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">onLine</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Platform: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">platform</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">txt</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;User-agent header: </span><span class="dl">"</span> <span class="o">+</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">demo</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">;</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span>
<span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>
<span class="c1">//결과</span>
<span class="nx">Browser</span> <span class="nx">CodeName</span><span class="p">:</span> <span class="nx">Mozilla</span>

<span class="nx">Browser</span> <span class="nx">Name</span><span class="p">:</span> <span class="nx">Netscape</span>

<span class="nx">Browser</span> <span class="nx">Version</span><span class="p">:</span> <span class="mf">5.0</span> <span class="p">(</span><span class="nx">Macintosh</span><span class="p">;</span> <span class="nx">Intel</span> <span class="nx">Mac</span> <span class="nx">OS</span> <span class="nx">X</span> <span class="mi">10</span><span class="nx">_13_3</span><span class="p">)</span> <span class="nx">AppleWebKit</span><span class="o">/</span><span class="mf">537.36</span> <span class="p">(</span><span class="nx">KHTML</span><span class="p">,</span> <span class="nx">like</span> <span class="nx">Gecko</span><span class="p">)</span> <span class="nx">Chrome</span><span class="o">/</span><span class="mf">64.0</span><span class="p">.</span><span class="mf">3282.167</span> <span class="nx">Safari</span><span class="o">/</span><span class="mf">537.36</span>

<span class="nx">Cookies</span> <span class="nx">Enabled</span><span class="p">:</span> <span class="kc">true</span>

<span class="nx">Browser</span> <span class="nx">Language</span><span class="p">:</span> <span class="nx">ko</span>

<span class="nx">Browser</span> <span class="nx">Online</span><span class="p">:</span> <span class="kc">true</span>

<span class="nx">Platform</span><span class="p">:</span> <span class="nx">MacIntel</span>

<span class="nx">User</span><span class="o">-</span><span class="nx">agent</span> <span class="nx">header</span><span class="p">:</span> <span class="nx">Mozilla</span><span class="o">/</span><span class="mf">5.0</span> <span class="p">(</span><span class="nx">Macintosh</span><span class="p">;</span> <span class="nx">Intel</span> <span class="nx">Mac</span> <span class="nx">OS</span> <span class="nx">X</span> <span class="mi">10</span><span class="nx">_13_3</span><span class="p">)</span> <span class="nx">AppleWebKit</span><span class="o">/</span><span class="mf">537.36</span> <span class="p">(</span><span class="nx">KHTML</span><span class="p">,</span> <span class="nx">like</span> <span class="nx">Gecko</span><span class="p">)</span> <span class="nx">Chrome</span><span class="o">/</span><span class="mf">64.0</span><span class="p">.</span><span class="mf">3282.167</span> <span class="nx">Safari</span><span class="o">/</span><span class="mf">537.36</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="모바일-디바이스-구분하는-함수">모바일 디바이스 구분하는 함수</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="c1">// 모바일 에이전트 구분</span>
<span class="kd">var</span> <span class="nx">isMobile</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">Android</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/Android/i</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">false</span> <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="na">BlackBerry</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/BlackBerry/i</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">false</span> <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="na">IOS</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPhone|iPad|iPod/i</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">false</span> <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="na">Opera</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/Opera Mini/i</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">false</span> <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="na">Windows</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/IEMobile/i</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">false</span> <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="na">any</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="p">(</span><span class="nx">isMobile</span><span class="p">.</span><span class="nx">Android</span><span class="p">()</span> <span class="o">||</span> <span class="nx">isMobile</span><span class="p">.</span><span class="nx">BlackBerry</span><span class="p">()</span> <span class="o">||</span> <span class="nx">isMobile</span><span class="p">.</span><span class="nx">IOS</span><span class="p">()</span> <span class="o">||</span> <span class="nx">isMobile</span><span class="p">.</span><span class="nx">Opera</span><span class="p">()</span> <span class="o">||</span> <span class="nx">isMobile</span><span class="p">.</span><span class="nx">Windows</span><span class="p">());</span>
        <span class="p">}</span>
<span class="p">};</span>
<span class="nx">Colored</span> <span class="nx">by</span> <span class="nx">Color</span> <span class="nx">Scripter</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="모바일-디바이스-구분-함수-사용">모바일 디바이스 구분 함수 사용</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">isMobile</span><span class="p">.</span><span class="nx">any</span><span class="p">())</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isMobile</span><span class="p">.</span><span class="nx">Android</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isMobile</span><span class="p">.</span><span class="nx">IOS</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isMobile</span><span class="p">.</span><span class="nx">BlackBerry</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isMobile</span><span class="p">.</span><span class="nx">Opera</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isMobile</span><span class="p">.</span><span class="nx">Windows</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">//1# : any 함수로 모바일인지 아닌지를 구분</span>
<span class="c1">//2# ~ : 각 모바일 디바이스를 구분</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-크롬인지-아닌지-확인하는-예제">✔️ 크롬인지 아닌지 확인하는 예제</h3>

<p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="rNrNXQO" data-user="ilimes" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/ilimes/pen/rNrNXQO">
  Untitled</a> by Daegyu Lee (<a href="https://codepen.io/ilimes">@ilimes</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="http://cofs.tistory.com/214">http://cofs.tistory.com/214</a></li>
  <li><a href="https://amagrammer91.tistory.com/48">https://amagrammer91.tistory.com/48</a></li>
  <li><a href="https://zinee-world.tistory.com/512">https://zinee-world.tistory.com/512</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="JavaScript" /><category term="브라우저정보" /><category term="자바스크립트" /><category term="UserAgent" /><category term="Browser" /><summary type="html"><![CDATA[User Agent 브라우저 정보 얻기]]></summary></entry><entry><title type="html">React 상태관리 라이브러리 zustand</title><link href="http://localhost:4000/react/post64/" rel="alternate" type="text/html" title="React 상태관리 라이브러리 zustand" /><published>2022-12-15T00:00:00+09:00</published><updated>2022-12-15T00:00:00+09:00</updated><id>http://localhost:4000/react/post64</id><content type="html" xml:base="http://localhost:4000/react/post64/"><![CDATA[<h3 id="️-zustand">✔️ zustand?</h3>

<p>오늘은 리액트 상태관리 라이브러리 중 하나인 zustand를 알아보고자 합니다. 오늘 알아볼 zustand는 직장동료분께서 요즘 많이들 사용하는 라이브러리 중 하나이고 사용하기도 쉽다고 알려주셨는데요. 독일어로 zustand가 상태라고 하더라고요. 과연 zustand는 기존에 사용하던 redux와 비교하여 어떤 차이가 있을지, 사용 방법은 어떤지 알아보도록 하겠습니다.</p>

<h3 id="️-zustand의-장점">✔️ zustand의 장점</h3>

<p>일단 zustand는 코드가 간결합니다. redux를 많이들 기피하는 이유 중 하나가 바로 보일러플레이트 코드가 존재한다는 것인데요. 사실 그러한 단점을 보완하기 위해서 Redux Toolkit이 등장하였지만 보일러플레이트가 존재한다는 점은 여전히 변함이 없는데요. zustand는 보일러플레이트가 거의 없다고 봐도 무방할 정도로 코드가 간결합니다.</p>

<h3 id="️-zustand-사용법">✔️ zustand 사용법</h3>

<h4 id="설치하기">설치하기</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm install zustand
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="store-생성하기">store 생성하기</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">// store.js</span>

<span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// create를 이용하여 zustand 불러옴과 동시에 상태와 상태를 변경하는 액션 정의</span>
<span class="kd">const</span> <span class="nx">useStore</span> <span class="o">=</span> <span class="nx">create</span><span class="p">((</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">increasePopulation</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">bears</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})),</span>
  <span class="na">removeAllBears</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}),</span>
<span class="p">}));</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useStore</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>초기값은 bears로 선언,
그 값을 조작하는 increasePopulation(bears를 1씩 증가)과 removeAllBears(bears를 0으로 리셋)를 선언,
구독할 리스너는 set을 활용하여 관리.</p>

<h4 id="생성한-store-불러와-사용">생성한 store 불러와 사용</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">// App.js</span>

<span class="k">import</span> <span class="nx">useStore</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../store.js</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">bears</span><span class="p">,</span> <span class="nx">increasePopulation</span><span class="p">,</span> <span class="nx">removeAllBears</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useStore</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span>
  <span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">bears</span><span class="si">}</span> around here ...<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">increasePopulation</span><span class="si">}</span><span class="p">&gt;</span>one up<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">removeAllBears</span><span class="si">}</span><span class="p">&gt;</span>remove all<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>생성한 store를 불러와서 간단하게 사용하면 끝입니다 👍
Zustand는 Middleware로 Devtools를 지원하고 있어서 Redux Devtools을 쉽게 연결하여 사용할 수 있기도 합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// store.js</span>

<span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">devtools</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand/middleware</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// ✔️</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="p">(</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">increasePopulation</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">bears</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})),</span>
  <span class="na">removeAllBears</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}),</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">useStore</span> <span class="o">=</span> <span class="nx">create</span><span class="p">(</span><span class="nx">devtools</span><span class="p">(</span><span class="nx">store</span><span class="p">));</span> <span class="c1">// ✔️</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useStore</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 store를 생성하면 개발자 도구에서 store의 상태 확인이 가능합니다. Redux DevTools는 아래 크롬 웹스토어 링크에서 설치할 수 있습니다.</p>

<ul>
  <li>Redux DevTools : <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=ko&amp;refresh=1">https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=ko&amp;refresh=1</a></li>
</ul>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<ul>
  <li><a href="https://github.com/pmndrs/zustand">https://github.com/pmndrs/zustand</a></li>
  <li><a href="https://codesandbox.io/s/github/pmndrs/zustand/tree/main/examples">https://codesandbox.io/s/github/pmndrs/zustand/tree/main/examples</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="상태관리" /><category term="zustand" /><summary type="html"><![CDATA[zustand 알아보기]]></summary></entry><entry><title type="html">return과 return false 의 차이?</title><link href="http://localhost:4000/javascript/post63/" rel="alternate" type="text/html" title="return과 return false 의 차이?" /><published>2022-12-13T00:00:00+09:00</published><updated>2022-12-13T00:00:00+09:00</updated><id>http://localhost:4000/javascript/post63</id><content type="html" xml:base="http://localhost:4000/javascript/post63/"><![CDATA[<h3 id="return">return</h3>

<p><code class="language-plaintext highlighter-rouge">return</code> 명령문은 함수 실행을 종료하고, 주어진 값을 함수 호출 지점으로 반환합니다.</p>

<h3 id="return과-return-false의-차이">return과 return false의 차이</h3>

<p>자바스크립트로 개발을 하다보면 return으로 함수의 동작을 멈추는 경우가 종종 있습니다. 일반적으로 그냥 return; 을 사용해서 해당 지점을 끝내는 경우가 많은데 return false; 와는 어떤 차이가 있을지 궁금해졌습니다.</p>

<h4 id="구문">구문</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">return</span> <span class="p">[[</span><span class="nx">expression</span><span class="p">]];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">expression</code> : 반환할 값으로 사용할 표현식. 생략할 경우 undefined를 대신 반환합니다.</p>

<p>우선 위와 같이 return시 표현식을 생략하는 경우에는 undefined를 반환하게 됩니다. 보통 함수는 리턴값을 보고 어떤 값을 가지는지 알게 되는데, return 만 사용하게 되는 경우 의미 전달이 애매해지게 되는데요. return false; 를 사용하게 되면 리턴값이 명시되어 있으므로 명확한 의미 전달과 가독성 향상 측면에서 좋다는 의견이 꽤나 많더라고요.</p>

<p>둘 중 무엇을 사용해도 퍼포먼스 측면에서는 큰 차이가 없지만 명확한 의미전달, 가독성 향상 때문이라도 되도록이면 return false; 사용을 지향해야겠다는 생각이 듭니다.</p>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/return">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/return</a><br />
<a href="https://yongblog.tistory.com/entry/onclick-%EC%97%90%EC%84%9C-return-false-%EC%9D%98-%EC%9D%98%EB%AF%B8">https://yongblog.tistory.com/entry/onclick-%EC%97%90%EC%84%9C-return-false-%EC%9D%98-%EC%9D%98%EB%AF%B8</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="JavaScript" /><category term="js" /><category term="return" /><category term="return false" /><category term="자바스크립트" /><summary type="html"><![CDATA[return; return false; 는 어떤 차이가 있을까]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (6)</title><link href="http://localhost:4000/uiux/post62/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (6)" /><published>2022-12-07T00:00:00+09:00</published><updated>2022-12-07T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post62</id><content type="html" xml:base="http://localhost:4000/uiux/post62/"><![CDATA[<p>Project Management Dashboard<br />
by. <a href="https://dribbble.com/Dedewahidin">Ciptasmara</a></p>

<p><img width="793" alt="image" src="https://user-images.githubusercontent.com/95404736/206194128-71147734-d336-4a8c-bfc7-24af5ce0e8bf.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/14417690-Project-Management-Dashboard/">https://dribbble.com/shots/14417690-Project-Management-Dashboard/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry></feed>