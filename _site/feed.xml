<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-31T00:31:44+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">리액트 Redux 기초 개념 정리</title><link href="http://localhost:4000/react/post43/" rel="alternate" type="text/html" title="리액트 Redux 기초 개념 정리" /><published>2022-10-31T00:00:00+09:00</published><updated>2022-10-31T00:00:00+09:00</updated><id>http://localhost:4000/react/post43</id><content type="html" xml:base="http://localhost:4000/react/post43/"><![CDATA[<h3 id="️-redux란">✔️ Redux란?</h3>

<p>리덕스는 리액트에서 많이 사용되는 상태 관리 라이브러리 중 하나입니다. 리덕스를 사용하게 되면 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜 효율적인 관리가 가능하게 됩니다.</p>

<h3 id="️-redux-설치">✔️ Redux 설치</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm i redux react-redux
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-redux-기본개념">✔️ Redux 기본개념</h3>

<p>리덕스는 크게 3가지의 기본 개념이 있습니다.</p>

<blockquote>
  <p>동일한 데이터는 항상 같은 곳에서 가지고 온다.</p>
</blockquote>

<ul>
  <li>이는 곧 Store라는 하나 뿐인 데이터 공간이 있다는 것을 의미합니다. (중앙 상태 관리)</li>
  <li>이러한 점 덕분에 디버깅이 쉬워집니다.</li>
</ul>

<blockquote>
  <p>액션 객체를 통해서만 상태 변경 가능</p>
</blockquote>

<ul>
  <li>기본적으로 상태는 읽기 전용(read-only) 입니다.</li>
  <li>리액트에서 setState 메소드를 활용해야만 상태 변경이 가능하듯이 리덕스에서도 액션이라는 객체로만 상태를 변경할 수 있습니다.</li>
</ul>

<blockquote>
  <p>변경은 순수 함수로만 가능</p>
</blockquote>

<ul>
  <li>리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받습니다.</li>
  <li>파라미터 외의 값에는 의존하면 안됩니다.</li>
  <li>이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환합니다.</li>
  <li>똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 합니다.</li>
</ul>

<h3 id="️-redux-기본용어">✔️ Redux 기본용어</h3>

<p>아래는 Redux에 대해서 기본적으로 알아야 할 용어들입니다.</p>

<h2 id="액션action">액션(Action)</h2>

<ul>
  <li>Store의 상태를 변경하는 용도로 사용</li>
  <li>직접 상태를 변경하기 보다는 <code class="language-plaintext highlighter-rouge">어떤 상태로 변경할 것인지</code> 결정</li>
</ul>

<p>액션을 일종의 주문서 같은 것인데 자바스크립트 객체 형식으로 되어있습니다.</p>

<h3 id="액션의-표현">액션의 표현</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="p">{</span>
   <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ADD_TODO</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
       <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
       <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">라임</span><span class="dl">'</span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>액션은 위와 같이 표현되며 type 필드는 필수로 가지고 있어야 합니다.</p>

<h3 id="액션-생성함수">액션 생성함수</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">addTodo</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ADD_TODO</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">data</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>액션 생성함수는 말그대로 액션 객체를 만들어주는 함수입니다.</p>

<h2 id="리듀서reducer">리듀서(Reducer)</h2>

<ul>
  <li>State를 정의하고 전달받은 액션에 따라 Store의 상태 변경이 이루어집니다.</li>
  <li>실제 Store의 상태 변경은 <code class="language-plaintext highlighter-rouge">Reducer</code> 에서 이루어집니다.</li>
  <li>업데이트 로직을 정의 하는 함수라고도 할 수 있습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">counterReducer</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Check to see if the reducer cares about this action</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">counter/increment</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// If so, make a copy of `state`</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
      <span class="c1">// and update the copy with the new value</span>
      <span class="na">value</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span>
  <span class="c1">// otherwise return the existing state unchanged</span>
  <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="스토어store">스토어(Store)</h2>

<ul>
  <li>액션과 리듀서의 연결지점입니다.</li>
  <li>Store는 dispatch, getState, subscribe 메서드가 담겨있는 일종의 객체일 뿐입니다.</li>
  <li>Redux는 Store를 오직 하나만 가집니다.</li>
</ul>

<h3 id="store-methods">Store Methods</h3>

<ol>
  <li>getState() : 애플리케이션의 현재 state 반환 =&gt; reducer 마지막 반환 값</li>
  <li>dispatch(action) : action을 파라미터로 받고 dispatch를 호출하면 store는 reducer를 실행합니다.</li>
  <li>subscribe(listener) : 변경사항에 대한 리스너 추가, subscribe에 리스너를 전달해주면 액션이 디스패치 될 때마다 전달해준 리스너가 호출됩니다.</li>
  <li>replaceReducer(nextReducer)</li>
</ol>

<h3 id="️-redux는-언제-쓰면-좋을까">✔️ Redux는 언제 쓰면 좋을까?</h3>

<p>해당 내용은 Redux 공식 문서에 나와있습니다 :)</p>

<p><a href="https://redux.js.org/faq/general#when-should-i-use-redux">https://redux.js.org/faq/general#when-should-i-use-redux</a></p>

<ul>
  <li>앱의 여러 위치에서 필요한 많은 양의 상태들이 존재할 때 (전역 상태가 필요하다고 느껴질 때)</li>
  <li>상태들이 자주 업데이트 될 때</li>
  <li>상태를 업데이트 하는 로직이 복잡할 때</li>
  <li>앱이 중간 또는 큰 사이즈의 코드를 갖고 있고 많은 사람들에 의해 코드가 관리될 때</li>
  <li>상태가 업데이트되는 시점을 관찰할 필요가 있을 때</li>
</ul>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<p><a href="https://ko.redux.js.org/introduction/getting-started/">https://ko.redux.js.org/introduction/getting-started/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="리액트" /><category term="리덕스" /><category term="redux" /><category term="react" /><category term="리덕스기초" /><summary type="html"><![CDATA[React redux 기초]]></summary></entry><entry><title type="html">Mac, 맥북 업데이트 후 xcrun: error: invalid active developer path 에러 나는 경우 해결방법</title><link href="http://localhost:4000/issue/post42/" rel="alternate" type="text/html" title="Mac, 맥북 업데이트 후 xcrun: error: invalid active developer path 에러 나는 경우 해결방법" /><published>2022-10-30T00:00:00+09:00</published><updated>2022-10-30T00:00:00+09:00</updated><id>http://localhost:4000/issue/post42</id><content type="html" xml:base="http://localhost:4000/issue/post42/"><![CDATA[<h3 id="️-오류발생">✔️ 오류발생</h3>

<p>최근 macOS를 Ventura로 업그레이드 했는데 개발 관련 도구(이를테면 git)가 <code class="language-plaintext highlighter-rouge">missing xcrun</code> 에러를 내뿜게 되었습니다. 알고보니 아주 간단하게 해결할 수 있는 문제더라고요.<br />
<br />
그래서 오늘은 맥북 사용자 분들께서 해당 오류가 나는 경우에 간단하게 해결할 수 있는 방법을 공유해드리고자 합니다.</p>

<h3 id="️-오류원인">✔️ 오류원인</h3>

<p>이러한 오류가 발생하는 것은 업데이트 과정을 거친 뒤에 CommandLineTools을 인식하지 못했기 때문입니다.</p>

<h3 id="️-해결방법">✔️ 해결방법</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>xcode-select --installs
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 명령어를 입력하여 CommandLineTools를 설치하고 관련 도구들을 실행해보면, 오류 없이 정상적으로 동작하는 걸 확인하실 수 있습니다.</p>

<center>
<img width="509" alt="image" src="https://user-images.githubusercontent.com/95404736/198861719-695569b5-e574-464b-a1e3-176cd47ad178.png" />
</center>

<p><br />
설치 소요시간은 네트워크 환경에 따라 달라질 수 있구요. 저는 대략 2분정도 걸린 것 같네요 :)</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="mac" /><category term="맥북" /><category term="xcrun" /><category term="xcode" /><category term="error" /><category term="에러" /><summary type="html"><![CDATA[xcrun: error: invalid active developer path 에러 해결]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (3)</title><link href="http://localhost:4000/uiux/post41/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (3)" /><published>2022-10-01T00:00:00+09:00</published><updated>2022-10-01T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post41</id><content type="html" xml:base="http://localhost:4000/uiux/post41/"><![CDATA[<p>Dashboard<br />
by. <a href="https://dribbble.com/sajon">Sajon</a></p>

<p><img width="1045" alt="image" src="https://user-images.githubusercontent.com/95404736/193412841-759a7b86-37a7-420f-aab8-59d3d298b4ad.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/15025300-Dashboard">https://dribbble.com/shots/15025300-Dashboard</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">npm과 yarn의 차이는 무엇일까?</title><link href="http://localhost:4000/web/post40/" rel="alternate" type="text/html" title="npm과 yarn의 차이는 무엇일까?" /><published>2022-09-25T00:00:00+09:00</published><updated>2022-09-25T00:00:00+09:00</updated><id>http://localhost:4000/web/post40</id><content type="html" xml:base="http://localhost:4000/web/post40/"><![CDATA[<h3 id="️-npm-yarn">✔️ npm? yarn?</h3>

<p>npm과 yarn은 모두 Node.js 패키지 관리자로, 결론부터 말하면 yarn이 npm에서 부족했던 기능들을 보충해서 출시한 것이라고 할 수 있는데요. 현재는 npm도 계속 개선된 버전이 나와서 사실상 둘의 사용은 취향 차이라고 봐도 무방합니다.</p>

<h4 id="npm">npm</h4>

<p>전 세계적으로 가장 많은 이들이 사용하고 있는 패키지 관리자 입니다. Node.js로 만들어진 모듈을 쉽게 설치 및 관리할 수 있으며 개발자 입장에서는 명령어를 몇 줄 입력하기만 하면 공개된 모듈을 설치할 수 있으니 매번 직접 찾아서 모듈을 설치하는 수고를 덜어줍니다.</p>

<h4 id="yarn">yarn</h4>

<p>2016년 페이스북에서 만든 자바스크립트 패키지 매니저, npm의 단점인 <code class="language-plaintext highlighter-rouge">속도(performance)</code>, <code class="language-plaintext highlighter-rouge">안정성(stability)</code>, <code class="language-plaintext highlighter-rouge">보안성(security)</code>을 보완하여 나온 것입니다.<br />
<br />
👇yarn 관련 문서<br />
<a href="https://engineering.fb.com/2016/10/11/web/yarn-a-new-package-manager-for-javascript/">https://engineering.fb.com/2016/10/11/web/yarn-a-new-package-manager-for-javascript/</a></p>

<h3 id="️-npm과-yarn-차이점">✔️ npm과 yarn 차이점</h3>

<p>앞서 말씀드렸듯이 yarn은 npm보다 보안성이 뛰어납니다. npm은 패키지를 설치할 때 자동으로 코드와 의존성을 실행할 수 있도록 허용하였습니다. 이로 인해 보안에 취약점이 발생하였는데, 현재는 npm도 보안 업데이트를 거듭하며 보안성이 향상되긴 하였습니다.<br />
<br />
그리고 yarn은 npm보다 빠릅니다. 패키지 설치 프로세스를 처리하는 방법이 다르기 때문인데요. npm은 패키지를 한 번에 하나씩 순차적으로 설치하지만, yarn은 다운받은 패키지 데이터를 캐시(cache)에 저장하여 중복 데이터는 다운로드 하지 않고 캐시에 저장된 파일을 활용하구요. 패키지를 설치할 때 병렬로 처리하기 때문에 npm보다 속도가 빠릅니다.</p>

<h3 id="️-npm-명령어">✔️ npm 명령어</h3>

<ul>
  <li>npm init : package.json 생성</li>
  <li>npm install : package.json 파일 및 해당 종속성에 나열된 모든 모듈을 설치</li>
  <li>npm install 패키지명@버전 : 특정 패키지의 특정 버전 설치</li>
  <li>npm install 주소 : 특정 저장소 내 패키지 설치</li>
  <li>npm install 패키지명 -g : 글로벌 설치</li>
  <li>npm uninstall : 패키지 삭제</li>
  <li>npm update : 패키지 업데이트</li>
  <li>npm dedupe : 중복 설치된 패키지 정리</li>
</ul>

<h3 id="️-npm과-yarn-명령어-비교">✔️ npm과 yarn 명령어 비교</h3>

<table>
  <thead>
    <tr>
      <th>명령어</th>
      <th>npm</th>
      <th>yarn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dependencies 설치</td>
      <td>npm install</td>
      <td>yarn</td>
    </tr>
    <tr>
      <td>패키지 설치</td>
      <td>npm install [패키지명]</td>
      <td>yarn add [패키지명]</td>
    </tr>
    <tr>
      <td>dev 패키지 설치</td>
      <td>npm install –save-dev [패키지명]</td>
      <td>yarn add –dev [패키지명]</td>
    </tr>
    <tr>
      <td>글로벌 패키지 설치</td>
      <td>npm install –global [패키지명]</td>
      <td>yarn global add [패키지명]</td>
    </tr>
    <tr>
      <td>패키지 제거</td>
      <td>npm uninstall [패키지명]</td>
      <td>yarn remove [패키지명]</td>
    </tr>
    <tr>
      <td>dev 패키지 제거</td>
      <td>npm uninstall –save-dev [패키지명]</td>
      <td>yarn remove [패키지명]</td>
    </tr>
    <tr>
      <td>글로벌 패키지 제거</td>
      <td>npm uninstall –global [패키지명]</td>
      <td>yarn global remove [패키지명]</td>
    </tr>
    <tr>
      <td>업데이트</td>
      <td>npm update</td>
      <td>yarn upgrade</td>
    </tr>
    <tr>
      <td>패키지 업데이트</td>
      <td>npm update [패키지명]</td>
      <td>yarn upgrade [패키지명]</td>
    </tr>
  </tbody>
</table>

<h3 id="️-yarn-설치-방법">✔️ yarn 설치 방법</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm install yarn --global
</pre></td></tr></tbody></table></code></pre></div></div>
<p>yarn은 위와 같이 npm을 통해서 설치할 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>brew update
brew install yarn
</pre></td></tr></tbody></table></code></pre></div></div>
<p>만약 맥 사용자라면 brew 통해 설치하는 것도 가능합니다.</p>

<h3 id="️-무조건-yarn을-사용하는-것이-좋은걸까">✔️ 무조건 yarn을 사용하는 것이 좋은걸까?</h3>

<p>앞서 말씀드린 내용에 따르면 npm 대신 무조건 yarn이 좋은 것이라고 생각할 수 있는데요. 사실 yarn도 단점은 존재합니다. yarn은 npm보다 디스크 용량을 좀 더 잡아먹는 편이라고 하더라고요. 현재는 npm도 많이 개선되어 속도 측면에서도 yarn과 별반 차이가 없고 아직까지 점유율은 npm이 더욱 높기 때문에 둘 중 어떤 것을 사용할지는 개발자 취향대로 고르면 될 것 같습니다 😊</p>

<h3 id="참고-사이트">참고 사이트</h3>

<p><a href="https://joshua1988.github.io/vue-camp/package-manager/npm-vs-yarn.html#npm%E1%84%80%E1%85%AA-yarn%E1%84%8B%E1%85%B4-%E1%84%8E%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A5%E1%86%B7">https://joshua1988.github.io/vue-camp/package-manager/npm-vs-yarn.html#npm%E1%84%80%E1%85%AA-yarn%E1%84%8B%E1%85%B4-%E1%84%8E%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A5%E1%86%B7</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="npm" /><category term="yarn" /><category term="개발상식" /><summary type="html"><![CDATA[npm vs yarn]]></summary></entry><entry><title type="html">Visual Studio Code(VSCODE) 초기화 및 재설치 하기</title><link href="http://localhost:4000/issue/post39/" rel="alternate" type="text/html" title="Visual Studio Code(VSCODE) 초기화 및 재설치 하기" /><published>2022-09-24T00:00:00+09:00</published><updated>2022-09-24T00:00:00+09:00</updated><id>http://localhost:4000/issue/post39</id><content type="html" xml:base="http://localhost:4000/issue/post39/"><![CDATA[<h3 id="️-문제">✔️ 문제</h3>

<p>최근 한글 이름으로 되어있는 사용자 이름을 영어로 바꾸고나서 VSCODE를 사용할 때 내용이 업데이트 되면 이따금씩 오류가 발생하게 되었습니다. 그래서 해결방법을 찾아보던 와중에 가장 쉬운 해결방법은 프로그램을 재설치 하는 것이라고 하여 모든 내용을 초기화 한 뒤에 VSCODE를 재설치하였습니다. (관련 링크 : <a href="https://github.com/microsoft/vscode/issues/102039">https://github.com/microsoft/vscode/issues/102039</a>)</p>

<h3 id="️-삭제-및-재설치">✔️ 삭제 및 재설치</h3>

<h4 id="1-플러그인-삭제">1. 플러그인 삭제</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>c:\user\사용자이름\.vscode 
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 폴더를 삭제해줍니다.</p>

<h4 id="2-설정파일-삭제">2. 설정파일 삭제</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>c:\user\사용자이름\AppData\Roaming\Code
</pre></td></tr></tbody></table></code></pre></div></div>
<p>마찬가지로 위 폴더도 삭제해줍니다. AppData 폴더의 경우는 보이지 않을 수 있는데 숨김 폴더 보기 설정을 해주면 됩니다.</p>

<h4 id="3-제어판에서-visual-studio-code-삭제">3. 제어판에서 Visual Studio Code 삭제</h4>

<p>제어판으로 들어가서 <code class="language-plaintext highlighter-rouge">Microsoft Visual Studio Code (User)</code> 를 찾아 삭제해줍니다.</p>

<h4 id="4-재설치">4. 재설치</h4>

<p>삭제가 완료되었으면 아래 링크로 이동하여 설치파일을 다운로드 받은 뒤 실행시켜 재설치 과정을 진행하면 됩니다.</p>

<p>👇 Visual Studio Code 설치 링크<br />
<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>

<p>이렇게 하면 각종 설정이 초기화 된 상태로 재설치가 완료됩니다 😊</p>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<ul>
  <li><a href="https://rgb-white.tistory.com/13">https://rgb-white.tistory.com/13</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Issue" /><category term="vscode" /><category term="재설치" /><category term="vscode재설치" /><summary type="html"><![CDATA[VSCODE 완전 초기화 한 후 재설치 하기]]></summary></entry><entry><title type="html">Git - Rebase 알아보기</title><link href="http://localhost:4000/git/post38/" rel="alternate" type="text/html" title="Git - Rebase 알아보기" /><published>2022-09-12T00:00:00+09:00</published><updated>2022-09-12T00:00:00+09:00</updated><id>http://localhost:4000/git/post38</id><content type="html" xml:base="http://localhost:4000/git/post38/"><![CDATA[<h3 id="️-rebase란">✔️ Rebase란?</h3>

<p><code class="language-plaintext highlighter-rouge">rebase</code>는 git에서 브랜치를 합치는 명령어로 실행결과만 놓고보면 <code class="language-plaintext highlighter-rouge">merge</code>와 유사하다고 할 수 있는데요. 두 명렁어의 차이는 커밋 히스토리가 달라진다는 것 입니다.<br />
<br />
<code class="language-plaintext highlighter-rouge">rebase</code>를 사용하면 커밋 순서도 변경할 수 있고 중복 커밋도 하나로 합칠 수 있어 이력 관리를 깔끔하게 할 수 있습니다. <code class="language-plaintext highlighter-rouge">rebase</code>는 말 그대로 기준(base)을 새롭게 설정한다는 뜻으로 이해하면 좋습니다.</p>

<h3 id="️-rebase-명렁어">✔️ Rebase 명렁어</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ git rebase [newbase]
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-rebase-사용하기">✔️ Rebase 사용하기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ git rebase -i HEAD~2
</pre></td></tr></tbody></table></code></pre></div></div>

<p>2개의 커밋 메시지를 합치고 싶은 경우에는 위와 같은 명령어를 사용할 수 있구요. (커밋 로그 축약)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>$ git checkout feature
$ git rebase master
$ git checkout master
$ git merge feature
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 사용하는 경우에는 feature 브랜치로 checkout 한 다음 master 브랜치로 rebase 하고 feature 브랜치를 master로 fast-forward merge 시키는 것입니다.</p>

<h3 id="️-rebase의-장점">✔️ Rebase의 장점</h3>

<p><code class="language-plaintext highlighter-rouge">rebase</code>는 앞서 소개에서 말했듯이 커밋 히스토리를 깔끔하게 할 수 있습니다. 추가로 공유 브랜치에 변경사항을 즉각 반영 할 수도 있는데요. 즉각적으로 변경사항 대응이 필요한 경우에는 <code class="language-plaintext highlighter-rouge">rebase</code>를 사용하는 것이 편리할 수 있습니다.<br />
<br />
➡️ merge는 rebase에 비해서 쉽고 안전하다, 다만 커밋 히스토리가 지저분해진다.</p>

<h3 id="️-rebase-사용-시-주의할-점">✔️ Rebase 사용 시 주의할 점</h3>

<p>아무래도 여러명이 작업하는 브랜치에서 <code class="language-plaintext highlighter-rouge">rebase</code>를 사용하게 되면 다른사람들이 작성한 커밋 히스토리를 바꿔버릴 가능성이 있습니다. 그렇게 되면 다른 사람들이 작업하던 부분이 날라가서 새로 작업해야하는 불상사가 일어날 수도 있겠죠. 그래서 <code class="language-plaintext highlighter-rouge">rebase</code>는 웬만하면 혼자 작업하는 브랜치에서 사용하는 것이 가장 좋고 그런 경우에는 문제될 것이 없습니다. 다만 협업을 하면서 사용하는 경우에는 주의를 기울여 잘 사용해야합니다 :)</p>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<ul>
  <li><a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0">https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0</a></li>
  <li><a href="https://docs.github.com/en/get-started/using-git/using-git-rebase-on-the-command-line">https://docs.github.com/en/get-started/using-git/using-git-rebase-on-the-command-line</a></li>
  <li><a href="https://www.atlassian.com/ko/git/tutorials/rewriting-history/git-rebase">https://www.atlassian.com/ko/git/tutorials/rewriting-history/git-rebase</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="깃" /><category term="rebase" /><category term="git" /><summary type="html"><![CDATA[Git 브랜치 Rebase란?]]></summary></entry><entry><title type="html">파이어베이스(firebase)와 리액트로 간단하게 구글 로그인 구현하기</title><link href="http://localhost:4000/web/post37/" rel="alternate" type="text/html" title="파이어베이스(firebase)와 리액트로 간단하게 구글 로그인 구현하기" /><published>2022-09-08T00:00:00+09:00</published><updated>2022-09-08T00:00:00+09:00</updated><id>http://localhost:4000/web/post37</id><content type="html" xml:base="http://localhost:4000/web/post37/"><![CDATA[<h3 id="️-파이어베이스-구글-로그인">✔️ 파이어베이스 구글 로그인</h3>

<p>요즘 웹서비스에서 대부분 소셜 로그인을 지원하고 있고, 개발을 하다보면 소셜로그인이 필요한 경우가 생깁니다. 파이어베이스를 접하기 전에는 OAuth로 소셜 로그인을 구현할 수 있었지만, 파이어베이스를 사용하면 훨씬 간단하게 구현할 수 있습니다 :)</p>

<blockquote>
  <p><a href="https://ilimes.github.io/web/post35/">https://ilimes.github.io/web/post35/</a></p>
</blockquote>

<p>[파이어베이스가 무엇인지 궁금하시다면 위 링크를 클릭해보세요.]</p>

<h3 id="️-사용-방법">✔️ 사용 방법</h3>

<blockquote>
  <p><a href="https://firebase.google.com/">https://firebase.google.com/</a></p>
</blockquote>

<p>가장 먼저 파이어베이스를 사용하기 위해서는 위 링크로 이동해서 프로젝트를 만들어야합니다.</p>

<p><img width="339" alt="image" src="https://user-images.githubusercontent.com/95404736/188909953-24f9ce46-4f69-4b0e-b12b-78c4bef54ddf.png" /></p>

<p>로그인 후 프로젝트 추가 버튼을 눌러줍니다.</p>

<p><img width="724" alt="image" src="https://user-images.githubusercontent.com/95404736/188910044-e1f73230-a2da-45f0-9d29-396fa2c0315a.png" /></p>

<p>그 다음 프로젝트 이름을 지정해준 뒤 계속을 눌러줍니다.</p>

<p><img width="815" alt="image" src="https://user-images.githubusercontent.com/95404736/188910196-98ec65be-9e27-4e6e-99ce-4326e798d91e.png" /></p>

<p>다음으로 구글 애널리틱스 설정을 해줍니다. 저는 간단히 테스트 사용만 할거라 애널리틱스 사용 설정은 하지 않았습니다.</p>

<p><img width="467" alt="image" src="https://user-images.githubusercontent.com/95404736/188910971-c57c82f1-497a-422b-b29e-f3fd6cbef952.png" /></p>

<p>잠시 기다리면 프로젝트가 생성되고, 위와 같이 ‘앱에 Firebase를 추가하여 시작하기’ 라는 문구가 적혀있는 메인화면이 나타나게 되는데요. 세번째에 위치하고 있는 웹 버튼을 눌러줍니다.</p>

<p><img src="https://user-images.githubusercontent.com/95404736/188911295-5b7cc7ee-7961-449c-b647-57d1157db2e1.png" alt="image" /></p>

<p>그럼 위와 같이 웹 앱에 Firebase추가 화면이 나타나게 됩니다. 앱 닉네임을 정하고 앱 등록 버튼을 눌러줍니다.</p>

<p><img width="802" alt="image" src="https://user-images.githubusercontent.com/95404736/188912401-0d9ae8ff-dd67-4ea6-852f-127a97c64be1.png" /></p>

<p>잠시 기다리면 파이어베이스 설정 관련 코드가 나타나게 됩니다. 이 중에서 빨간박스 쪽 firebaseConfig는 따로 복사해놓아야 합니다.</p>

<p><img width="486" alt="image" src="https://user-images.githubusercontent.com/95404736/188912643-0ce5dca6-f0b2-44d1-a5ff-80f0c551a5f3.png" /></p>

<p>메인으로 이동해서 사용자 인증 및 관리에 들어갑니다.</p>

<p><img width="1010" alt="image" src="https://user-images.githubusercontent.com/95404736/188912758-54723698-c8d0-4b06-a12a-720e73f75edc.png" /></p>

<p>시작하기를 눌러줍니다.</p>

<p><img width="976" alt="image" src="https://user-images.githubusercontent.com/95404736/188912851-52c63a56-6f39-4e05-946c-d1e4c54975fb.png" /></p>

<p>그럼 이렇게 제공업체를 선택하는 화면이 나타나게 됩니다. 저는 구글 로그인을 구현할 것이기 때문에 추가 제공업체 중에서 Google을 선택해줍니다.</p>

<p><img width="985" alt="image" src="https://user-images.githubusercontent.com/95404736/188912993-05d08a12-40c5-4a13-90cf-a9ce06cd9cef.png" /></p>

<p>위와 같은 화면이 나오면 우측 상단에 있는 토글을 ON 해주시고, 프로젝트 지원 이메일은 기본설정으로 선택해주신 뒤 저장을 눌러줍니다.</p>

<p><img width="976" alt="image" src="https://user-images.githubusercontent.com/95404736/188913781-0d624224-39df-45ec-bb1e-e17a536d5aa0.png" /></p>

<p>Authentication 설정에는 이렇게 승인된 도메인을 설정하는 곳이 있는데 저는 로컬 환경에서만 테스트 할 것이기 때문에 별도로 건들지는 않았습니다. 필요한 경우에는 도메인 추가 버튼을 눌러서 설정해주세요.</p>

<h3 id="️-소스">✔️ 소스</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">firebase</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>리액트 프로젝트를 생성한 뒤에 위 명령어를 입력하여 firebase를 install 해줍니다.</p>

<ul>
  <li>firebase-config.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">initializeApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/app</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getAuth</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/auth</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">firebaseConfig</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apiKey</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">authDomain</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">projectId</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">storageBucket</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">messagingSenderId</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">appId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">initializeApp</span><span class="p">(</span><span class="nx">firebaseConfig</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">getAuth</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
<span class="k">export</span> <span class="p">{</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">auth</span> <span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다음으로 src폴더에 들어가서 firebase-config.js 파일을 만들어 준 뒤에 위와 같은 코드를 입력해서 넣어줍니다. 여기서 주의할 점은 firebaseConfig 부분을 아까 파이어베이스 설정 때 복사했던 코드로 넣어줘야 합니다.</p>

<ul>
  <li>app.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">auth</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./firebase-config</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GoogleAuthProvider</span><span class="p">,</span> <span class="nx">signInWithPopup</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/auth</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">userData</span><span class="p">,</span> <span class="nx">setUserData</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">handleGoogleLogin</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GoogleAuthProvider</span><span class="p">();</span> <span class="c1">// provider 구글 설정</span>
    <span class="nx">signInWithPopup</span><span class="p">(</span><span class="nx">auth</span><span class="p">,</span> <span class="nx">provider</span><span class="p">)</span> <span class="c1">// 팝업창 띄워서 로그인</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setUserData</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">);</span> <span class="c1">// user data 설정</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// console에 UserCredentialImpl 출력</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>구글 로그인 테스트<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleGoogleLogin</span><span class="si">}</span><span class="p">&gt;</span>로그인<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>로그인하면 아래쪽에 이름이 나타납니다.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">userData</span>
          <span class="p">?</span> <span class="dl">"</span><span class="s2">당신의 이름은 : </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">displayName</span>
          <span class="p">:</span> <span class="dl">"</span><span class="s2">로그인 버튼을 눌러주세요 :)</span><span class="dl">"</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>app.js를 위와 같이 작성하고 프로젝트를 실행시키면 로그인 버튼이 나오게 되는데요.</p>

<p>로그인 버튼을 클릭하면 팝업창이 떠서 구글 로그인을 할 수 있고, 로그인이 완료되면 아래와 같이 본인의 구글 계정 이름이 나타나는 것을 확인할 수 있습니다.</p>

<p><img width="269" alt="image" src="https://user-images.githubusercontent.com/95404736/188917046-b4dbe61d-2086-4378-bb3e-67d98a8e2870.png" /></p>

<p>이렇게 간단하게 파이어베이스를 사용하여 구글 로그인을 구현해보았습니다 😊</p>

<h3 id="️-파이어베이스-링크">✔️ 파이어베이스 링크</h3>

<p><a href="https://firebase.google.com/">https://firebase.google.com/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="파이어베이스" /><category term="firebase" /><category term="구글로그인" /><summary type="html"><![CDATA[파이어베이스 구글 로그인]]></summary></entry><entry><title type="html">Node.js 몽고디비 (MongoDB) Driver API</title><link href="http://localhost:4000/mongodb/post36/" rel="alternate" type="text/html" title="Node.js 몽고디비 (MongoDB) Driver API" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-05T00:00:00+09:00</updated><id>http://localhost:4000/mongodb/post36</id><content type="html" xml:base="http://localhost:4000/mongodb/post36/"><![CDATA[<h3 id="️-nodejs-mongodb-driver-api">✔️ Node.js MongoDB Driver API</h3>

<p>최근 몽고디비와 Node.js를 연동해서 사용하다 보니 문법적으로 맞지 않아 당황스러운 경우가 종종 생기곤 했습니다. 예를 들어 아래와 같이 <code class="language-plaintext highlighter-rouge">find</code> 쿼리를 실행시키는 도중에 데이터 양을 제한하기 위해서 projection document를 포함하여 반환할 필드를 지정한 적이 있었는데 그 때 적용되지 않고 자꾸만 전체 필드값을 리턴하는 문제가 발생했습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="nx">collection</span><span class="p">).</span><span class="nx">find</span><span class="p">({},</span> <span class="p">{</span><span class="na">Item001</span><span class="p">:</span><span class="mi">1</span><span class="p">}}).</span><span class="nx">toArray</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>알고보니 위와 같은 쿼리는 MongoDB shell에서는 맞지만, Node.js 드라이버에서는 적용되지 않는 것이기 때문이었습니다.<br />
<br />
Node.js MongoDB Driver API 문서를 살펴보니 projection 부분은 아래와 같이 사용해야 한다고 나와있더라고요.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="nx">collection</span><span class="p">).</span><span class="nx">find</span><span class="p">({},</span> <span class="p">{</span><span class="na">projection</span><span class="p">:{</span><span class="na">Item001</span><span class="p">:</span> <span class="mi">1</span><span class="p">}}).</span><span class="nx">toArray</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">{projection : {리턴할 필드 : 1}}</code> 로 옵션을 주게되면 정상적으로 적용됩니다 😊<br />
<br />
드라이버 API가 정리되어 있는 링크는 아래에 있으니 저처럼 Node.js와 몽고디비로 개발하는데 익숙하지 않은 분들께서는 참고하시면 좋을 것 같습니다 :)</p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://mongodb.github.io/node-mongodb-native/3.2/api/Collection.html#find">https://mongodb.github.io/node-mongodb-native/3.2/api/Collection.html#find</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MongoDB" /><category term="몽고디비" /><category term="MongoDB" /><category term="api" /><summary type="html"><![CDATA[Node.js MongoDB Driver API]]></summary></entry><entry><title type="html">파이어베이스(Firebase)란?</title><link href="http://localhost:4000/web/post35/" rel="alternate" type="text/html" title="파이어베이스(Firebase)란?" /><published>2022-09-04T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><id>http://localhost:4000/web/post35</id><content type="html" xml:base="http://localhost:4000/web/post35/"><![CDATA[<h3 id="️-파이어베이스란">✔️ 파이어베이스란?</h3>

<p>파이어베이스는 2011년 파이어베이스라는 회사가 개발하고 2014년 이후 구글에서 인수하여 서비스를 이어나가고 있는 모바일 플랫폼인데요. 일종의 개발을 편리하게 해주는 유용한 플랫폼이라고 할 수 있습니다. 파이어베이스는 앱을 개발하고, 개선하고, 키워나갈 수 있는 도구 모음(toolset) 인데 만약 이러한 도구가 없다면 개발자는 서비스의 상당 부분을 직접 만들어내야만 합니다. 개발자는 보통 사용자 경험(UX)에 집중해야 하기 때문에 세세한 부분까지 전부 직접 만드는 것을 별로 좋아하지 않습니다. 만약 인증, DB, 머신러닝, 함수, 분석, 구성 설정, 푸시 메시지 등 파이어베이스로 만든 서비스들이 클라우드에 호스팅되면 개발자는 거의 아무런 노력을 들이지 않고 앱의 규모를 확장할 수 있습니다.</p>

<h3 id="️-파이어베이스-제품군">✔️ 파이어베이스 제품군</h3>

<p><img width="911" alt="image" src="https://user-images.githubusercontent.com/95404736/188302393-e3f5ff83-dc47-42b0-9015-430fa394dfd5.png" /></p>

<h4 id="개발하기">개발하기</h4>

<ul>
  <li>인증(Authentication): 사용자 로그인 및 ID 관리</li>
  <li>클라우드 함수(Cloud Functions): 서버 없이 이벤트 위주로 동작하는 백엔드</li>
  <li>클라우드 파이어스토어(Cloud Firestore): 클라우드에 호스팅 된 실시간의 비관계형(NoSQL) 데이터베이스</li>
  <li>클라우드 스토리지(Cloud Storage): 거대하게 확장할 수 있는 파일 스토리지</li>
  <li>파이어베이스 호스팅(Firebase Hosting): 전 세계를 대상으로 한 웹 호스팅</li>
  <li>머신러닝 키트(ML Kit): 일반적인 머신러닝(ML) 작업을 위한 SDK</li>
  <li>실시간 데이터베이스(Realtime Database): 클라우드에 호스팅 된 실시간의 비관계형(NoSQL) 데이터베이스</li>
</ul>

<h4 id="개선하기">개선하기</h4>

<ul>
  <li>테스트 랩 : 클라우드에 호스팅 된 기기에서 다양한 규모로 앱 테스트를 자동화</li>
  <li>비정상 종료 분석 : 앱이 비정상 종료되는 현상에 대한 명확한 판단과 조치</li>
  <li>성능 모니터링 : 앱의 성능 이슈와 관련한 통찰력 확보</li>
</ul>

<h4 id="키워가기">키워가기</h4>

<ul>
  <li>분석 : 이용자들이 누구이며, 그들이 앱을 이용하는 방식을 이해</li>
  <li>예측 : 머신러닝을 적용하고 분석하여, 사용자들의 행동을 예측</li>
  <li>클라우드 메시징 : 사용자들에게 메시지와 알림 사항을 전송</li>
  <li>인앱 메시징 : 활성 사용자들에게 타깃 메시지를 연결</li>
  <li>원격 구성 : 새로운 버전을 배포하지 않고도 앱의 설정을 바꾸고, 변경사항을 모니터링</li>
  <li>A/B 테스팅 : 마케팅 방식과 사용 적합성 테스트를 수행해서 가장 좋은 결과가 무엇인지를 확인</li>
  <li>동적 링크 : 네이티브 앱 컨버전, 사용자 공유, 마케팅 캠페인 지원</li>
  <li>앱 인덱싱 : 구글 검색과 연동하여 사용자들을 유지하는 데 도움</li>
</ul>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://firebase.google.com/docs?hl=ko">https://firebase.google.com/docs?hl=ko</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="Firebase" /><category term="google" /><category term="파이어베이스" /><summary type="html"><![CDATA[파이어베이스에 대해 알아보기]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (2)</title><link href="http://localhost:4000/uiux/post34/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (2)" /><published>2022-09-03T00:00:00+09:00</published><updated>2022-09-03T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post34</id><content type="html" xml:base="http://localhost:4000/uiux/post34/"><![CDATA[<p>Dashboard_UI<br />
by. <a href="https://dribbble.com/D-studio">DStudio®</a></p>

<p><img width="800" alt="image" src="https://user-images.githubusercontent.com/95404736/188275402-887d4e25-a7b2-47b0-b284-6a4e5e38330f.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/13940752-Dashboard-UI">https://dribbble.com/shots/13940752-Dashboard-UI</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry></feed>