<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-08T00:51:29+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">파이어베이스(firebase)와 리액트로 간단하게 구글 로그인 구현하기</title><link href="http://localhost:4000/web/post37/" rel="alternate" type="text/html" title="파이어베이스(firebase)와 리액트로 간단하게 구글 로그인 구현하기" /><published>2022-09-08T00:00:00+09:00</published><updated>2022-09-08T00:00:00+09:00</updated><id>http://localhost:4000/web/post37</id><content type="html" xml:base="http://localhost:4000/web/post37/"><![CDATA[<h3 id="️-파이어베이스-구글-로그인">✔️ 파이어베이스 구글 로그인</h3>

<p>요즘 웹서비스에서 대부분 소셜 로그인을 지원하고 있고, 개발을 하다보면 소셜로그인이 필요한 경우가 생깁니다. 파이어베이스를 접하기 전에는 OAuth로 소셜 로그인을 구현할 수 있었지만, 파이어베이스를 사용하면 훨씬 간단하게 구현할 수 있습니다 :)</p>

<blockquote>
  <p><a href="https://ilimes.github.io/web/post35/">https://ilimes.github.io/web/post35/</a></p>
</blockquote>

<p>[파이어베이스가 무엇인지 궁금하시다면 위 링크를 클릭해보세요.]</p>

<h3 id="️-사용-방법">✔️ 사용 방법</h3>

<blockquote>
  <p><a href="https://firebase.google.com/">https://firebase.google.com/</a></p>
</blockquote>

<p>가장 먼저 파이어베이스를 사용하기 위해서는 위 링크로 이동해서 프로젝트를 만들어야합니다.</p>

<p><img width="339" alt="image" src="https://user-images.githubusercontent.com/95404736/188909953-24f9ce46-4f69-4b0e-b12b-78c4bef54ddf.png" /></p>

<p>로그인 후 프로젝트 추가 버튼을 눌러줍니다.</p>

<p><img width="724" alt="image" src="https://user-images.githubusercontent.com/95404736/188910044-e1f73230-a2da-45f0-9d29-396fa2c0315a.png" /></p>

<p>그 다음 프로젝트 이름을 지정해준 뒤 계속을 눌러줍니다.</p>

<p><img width="815" alt="image" src="https://user-images.githubusercontent.com/95404736/188910196-98ec65be-9e27-4e6e-99ce-4326e798d91e.png" /></p>

<p>다음으로 구글 애널리틱스 설정을 해줍니다. 저는 간단히 테스트 사용만 할거라 애널리틱스 사용 설정은 하지 않았습니다.</p>

<p><img width="467" alt="image" src="https://user-images.githubusercontent.com/95404736/188910971-c57c82f1-497a-422b-b29e-f3fd6cbef952.png" /></p>

<p>잠시 기다리면 프로젝트가 생성되고, 위와 같이 ‘앱에 Firebase를 추가하여 시작하기’ 라는 문구가 적혀있는 메인화면이 나타나게 되는데요. 세번째에 위치하고 있는 웹 버튼을 눌러줍니다.</p>

<p><img src="https://user-images.githubusercontent.com/95404736/188911295-5b7cc7ee-7961-449c-b647-57d1157db2e1.png" alt="image" /></p>

<p>그럼 위와 같이 웹 앱에 Firebase추가 화면이 나타나게 됩니다. 앱 닉네임을 정하고 앱 등록 버튼을 눌러줍니다.</p>

<p><img width="802" alt="image" src="https://user-images.githubusercontent.com/95404736/188912401-0d9ae8ff-dd67-4ea6-852f-127a97c64be1.png" /></p>

<p>잠시 기다리면 파이어베이스 설정 관련 코드가 나타나게 됩니다. 이 중에서 빨간박스 쪽 firebaseConfig는 따로 복사해놓아야 합니다.</p>

<p><img width="486" alt="image" src="https://user-images.githubusercontent.com/95404736/188912643-0ce5dca6-f0b2-44d1-a5ff-80f0c551a5f3.png" /></p>

<p>메인으로 이동해서 사용자 인증 및 관리에 들어갑니다.</p>

<p><img width="1010" alt="image" src="https://user-images.githubusercontent.com/95404736/188912758-54723698-c8d0-4b06-a12a-720e73f75edc.png" /></p>

<p>시작하기를 눌러줍니다.</p>

<p><img width="976" alt="image" src="https://user-images.githubusercontent.com/95404736/188912851-52c63a56-6f39-4e05-946c-d1e4c54975fb.png" /></p>

<p>그럼 이렇게 제공업체를 선택하는 화면이 나타나게 됩니다. 저는 구글 로그인을 구현할 것이기 때문에 추가 제공업체 중에서 Google을 선택해줍니다.</p>

<p><img width="985" alt="image" src="https://user-images.githubusercontent.com/95404736/188912993-05d08a12-40c5-4a13-90cf-a9ce06cd9cef.png" /></p>

<p>위와 같은 화면이 나오면 우측 상단에 있는 토글을 ON 해주시고, 프로젝트 지원 이메일은 기본설정으로 선택해주신 뒤 저장을 눌러줍니다.</p>

<p><img width="976" alt="image" src="https://user-images.githubusercontent.com/95404736/188913781-0d624224-39df-45ec-bb1e-e17a536d5aa0.png" /></p>

<p>Authentication 설정에는 이렇게 승인된 도메인을 설정하는 곳이 있는데 저는 로컬 환경에서만 테스트 할 것이기 때문에 별도로 건들지는 않았습니다. 필요한 경우에는 도메인 추가 버튼을 눌러서 설정해주세요.</p>

<h3 id="️-소스">✔️ 소스</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">firebase</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>리액트 프로젝트를 생성한 뒤에 위 명령어를 입력하여 firebase를 install 해줍니다.</p>

<ul>
  <li>firebase-config.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">initializeApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/app</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getAuth</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/auth</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">firebaseConfig</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apiKey</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">authDomain</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">projectId</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">storageBucket</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">messagingSenderId</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">appId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">initializeApp</span><span class="p">(</span><span class="nx">firebaseConfig</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">getAuth</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
<span class="k">export</span> <span class="p">{</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">auth</span> <span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다음으로 src폴더에 들어가서 firebase-config.js 파일을 만들어 준 뒤에 위와 같은 코드를 입력해서 넣어줍니다. 여기서 주의할 점은 firebaseConfig 부분을 아까 파이어베이스 설정 때 복사했던 코드로 넣어줘야 합니다.</p>

<ul>
  <li>app.js</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">auth</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./firebase-config</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GoogleAuthProvider</span><span class="p">,</span> <span class="nx">signInWithPopup</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/auth</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">userData</span><span class="p">,</span> <span class="nx">setUserData</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">handleGoogleLogin</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GoogleAuthProvider</span><span class="p">();</span> <span class="c1">// provider 구글 설정</span>
    <span class="nx">signInWithPopup</span><span class="p">(</span><span class="nx">auth</span><span class="p">,</span> <span class="nx">provider</span><span class="p">)</span> <span class="c1">// 팝업창 띄워서 로그인</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setUserData</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">);</span> <span class="c1">// user data 설정</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// console에 UserCredentialImpl 출력</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>구글 로그인 테스트<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleGoogleLogin</span><span class="si">}</span><span class="p">&gt;</span>로그인<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>로그인하면 아래쪽에 이름이 나타납니다.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">userData</span>
          <span class="p">?</span> <span class="dl">"</span><span class="s2">당신의 이름은 : </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">displayName</span>
          <span class="p">:</span> <span class="dl">"</span><span class="s2">로그인 버튼을 눌러주세요 :)</span><span class="dl">"</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>app.js를 위와 같이 작성하고 프로젝트를 실행시키면 로그인 버튼이 나오게 되는데요.</p>

<p>로그인 버튼을 클릭하면 팝업창이 떠서 구글 로그인을 할 수 있고, 로그인이 완료되면 아래와 같이 본인의 구글 계정 이름이 나타나는 것을 확인할 수 있습니다.</p>

<p><img width="269" alt="image" src="https://user-images.githubusercontent.com/95404736/188917046-b4dbe61d-2086-4378-bb3e-67d98a8e2870.png" /></p>

<p>이렇게 간단하게 파이어베이스를 사용하여 구글 로그인을 구현해보았습니다 😊</p>

<h3 id="️-파이어베이스-링크">✔️ 파이어베이스 링크</h3>

<p><a href="https://firebase.google.com/">https://firebase.google.com/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="파이어베이스" /><category term="firebase" /><category term="구글로그인" /><summary type="html"><![CDATA[파이어베이스 구글 로그인]]></summary></entry><entry><title type="html">Node.js 몽고디비 (MongoDB) Driver API</title><link href="http://localhost:4000/mongodb/post36/" rel="alternate" type="text/html" title="Node.js 몽고디비 (MongoDB) Driver API" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-05T00:00:00+09:00</updated><id>http://localhost:4000/mongodb/post36</id><content type="html" xml:base="http://localhost:4000/mongodb/post36/"><![CDATA[<h3 id="️-nodejs-mongodb-driver-api">✔️ Node.js MongoDB Driver API</h3>

<p>최근 몽고디비와 Node.js를 연동해서 사용하다 보니 문법적으로 맞지 않아 당황스러운 경우가 종종 생기곤 했습니다. 예를 들어 아래와 같이 <code class="language-plaintext highlighter-rouge">find</code> 쿼리를 실행시키는 도중에 데이터 양을 제한하기 위해서 projection document를 포함하여 반환할 필드를 지정한 적이 있었는데 그 때 적용되지 않고 자꾸만 전체 필드값을 리턴하는 문제가 발생했습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="nx">collection</span><span class="p">).</span><span class="nx">find</span><span class="p">({},</span> <span class="p">{</span><span class="na">Item001</span><span class="p">:</span><span class="mi">1</span><span class="p">}}).</span><span class="nx">toArray</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>알고보니 위와 같은 쿼리는 MongoDB shell에서는 맞지만, Node.js 드라이버에서는 적용되지 않는 것이기 때문이었습니다.<br />
<br />
Node.js MongoDB Driver API 문서를 살펴보니 projection 부분은 아래와 같이 사용해야 한다고 나와있더라고요.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="nx">collection</span><span class="p">).</span><span class="nx">find</span><span class="p">({},</span> <span class="p">{</span><span class="na">projection</span><span class="p">:{</span><span class="na">Item001</span><span class="p">:</span> <span class="mi">1</span><span class="p">}}).</span><span class="nx">toArray</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">{projection : {리턴할 필드 : 1}}</code> 로 옵션을 주게되면 정상적으로 적용됩니다 😊<br />
<br />
드라이버 API가 정리되어 있는 링크는 아래에 있으니 저처럼 Node.js와 몽고디비로 개발하는데 익숙하지 않은 분들께서는 참고하시면 좋을 것 같습니다 :)</p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://mongodb.github.io/node-mongodb-native/3.2/api/Collection.html#find">https://mongodb.github.io/node-mongodb-native/3.2/api/Collection.html#find</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MongoDB" /><category term="몽고디비" /><category term="MongoDB" /><category term="api" /><summary type="html"><![CDATA[Node.js MongoDB Driver API]]></summary></entry><entry><title type="html">파이어베이스(Firebase)란?</title><link href="http://localhost:4000/web/post35/" rel="alternate" type="text/html" title="파이어베이스(Firebase)란?" /><published>2022-09-04T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><id>http://localhost:4000/web/post35</id><content type="html" xml:base="http://localhost:4000/web/post35/"><![CDATA[<h3 id="️-파이어베이스란">✔️ 파이어베이스란?</h3>

<p>파이어베이스는 2011년 파이어베이스라는 회사가 개발하고 2014년 이후 구글에서 인수하여 서비스를 이어나가고 있는 모바일 플랫폼인데요. 일종의 개발을 편리하게 해주는 유용한 플랫폼이라고 할 수 있습니다. 파이어베이스는 앱을 개발하고, 개선하고, 키워나갈 수 있는 도구 모음(toolset) 인데 만약 이러한 도구가 없다면 개발자는 서비스의 상당 부분을 직접 만들어내야만 합니다. 개발자는 보통 사용자 경험(UX)에 집중해야 하기 때문에 세세한 부분까지 전부 직접 만드는 것을 별로 좋아하지 않습니다. 만약 인증, DB, 머신러닝, 함수, 분석, 구성 설정, 푸시 메시지 등 파이어베이스로 만든 서비스들이 클라우드에 호스팅되면 개발자는 거의 아무런 노력을 들이지 않고 앱의 규모를 확장할 수 있습니다.</p>

<h3 id="️-파이어베이스-제품군">✔️ 파이어베이스 제품군</h3>

<p><img width="911" alt="image" src="https://user-images.githubusercontent.com/95404736/188302393-e3f5ff83-dc47-42b0-9015-430fa394dfd5.png" /></p>

<h4 id="개발하기">개발하기</h4>

<ul>
  <li>인증(Authentication): 사용자 로그인 및 ID 관리</li>
  <li>클라우드 함수(Cloud Functions): 서버 없이 이벤트 위주로 동작하는 백엔드</li>
  <li>클라우드 파이어스토어(Cloud Firestore): 클라우드에 호스팅 된 실시간의 비관계형(NoSQL) 데이터베이스</li>
  <li>클라우드 스토리지(Cloud Storage): 거대하게 확장할 수 있는 파일 스토리지</li>
  <li>파이어베이스 호스팅(Firebase Hosting): 전 세계를 대상으로 한 웹 호스팅</li>
  <li>머신러닝 키트(ML Kit): 일반적인 머신러닝(ML) 작업을 위한 SDK</li>
  <li>실시간 데이터베이스(Realtime Database): 클라우드에 호스팅 된 실시간의 비관계형(NoSQL) 데이터베이스</li>
</ul>

<h4 id="개선하기">개선하기</h4>

<ul>
  <li>테스트 랩 : 클라우드에 호스팅 된 기기에서 다양한 규모로 앱 테스트를 자동화</li>
  <li>비정상 종료 분석 : 앱이 비정상 종료되는 현상에 대한 명확한 판단과 조치</li>
  <li>성능 모니터링 : 앱의 성능 이슈와 관련한 통찰력 확보</li>
</ul>

<h4 id="키워가기">키워가기</h4>

<ul>
  <li>분석 : 이용자들이 누구이며, 그들이 앱을 이용하는 방식을 이해</li>
  <li>예측 : 머신러닝을 적용하고 분석하여, 사용자들의 행동을 예측</li>
  <li>클라우드 메시징 : 사용자들에게 메시지와 알림 사항을 전송</li>
  <li>인앱 메시징 : 활성 사용자들에게 타깃 메시지를 연결</li>
  <li>원격 구성 : 새로운 버전을 배포하지 않고도 앱의 설정을 바꾸고, 변경사항을 모니터링</li>
  <li>A/B 테스팅 : 마케팅 방식과 사용 적합성 테스트를 수행해서 가장 좋은 결과가 무엇인지를 확인</li>
  <li>동적 링크 : 네이티브 앱 컨버전, 사용자 공유, 마케팅 캠페인 지원</li>
  <li>앱 인덱싱 : 구글 검색과 연동하여 사용자들을 유지하는 데 도움</li>
</ul>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://firebase.google.com/docs?hl=ko">https://firebase.google.com/docs?hl=ko</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="Firebase" /><category term="google" /><category term="파이어베이스" /><summary type="html"><![CDATA[파이어베이스에 대해 알아보기]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (2)</title><link href="http://localhost:4000/uiux/post34/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (2)" /><published>2022-09-03T00:00:00+09:00</published><updated>2022-09-03T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post34</id><content type="html" xml:base="http://localhost:4000/uiux/post34/"><![CDATA[<p>Dashboard_UI<br />
by. <a href="https://dribbble.com/D-studio">DStudio®</a></p>

<p><img width="800" alt="image" src="https://user-images.githubusercontent.com/95404736/188275402-887d4e25-a7b2-47b0-b284-6a4e5e38330f.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/13940752-Dashboard-UI">https://dribbble.com/shots/13940752-Dashboard-UI</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">간단하고 빠른 오픈소스 웹소켓 서버(soketi)</title><link href="http://localhost:4000/new/post32/" rel="alternate" type="text/html" title="간단하고 빠른 오픈소스 웹소켓 서버(soketi)" /><published>2022-09-01T00:00:00+09:00</published><updated>2022-09-01T00:00:00+09:00</updated><id>http://localhost:4000/new/post32</id><content type="html" xml:base="http://localhost:4000/new/post32/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/95404736/187929585-64aad5ea-46ee-4cf7-b2f9-83bf5aeb0606.png" alt="image" /></p>

<h3 id="️-soketi">✔️ Soketi?</h3>

<ul>
  <li>C로 작성되어 Node.js로 포팅. 빠르고 스케일러블<br />
→ 1 CPU당 20만 커넥션 가능, 1k 사용자에게 메시지 전송하는데 6ms</li>
  <li>연결/메시지/채널 등 제한 없음</li>
  <li>Pusher Protocol v7을 사용하므로 기존 코드 그대로 이용</li>
  <li>HTTP Webhook지원 - 채널 점유시 트리거 (Lambda와 연결)</li>
  <li>Prometheus 모니터링 지원</li>
  <li>Pusher처럼 app 관리 지원</li>
</ul>

<h3 id="️-바로가기">✔️ 바로가기</h3>

<p>Docs : <a href="https://docs.soketi.app/">https://docs.soketi.app/</a><br />
Fork on Github : <a href="https://github.com/soketi/soketi">https://github.com/soketi/soketi</a></p>

<h3 id="️-출처">✔️ 출처</h3>

<p><a href="https://news.hada.io/topic?id=7285">https://news.hada.io/topic?id=7285</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="New" /><category term="socket" /><category term="soketi" /><category term="웹소켓" /><summary type="html"><![CDATA[웹소켓 서버 soketi]]></summary></entry><entry><title type="html">UI/UX 디자인 공유 (1)</title><link href="http://localhost:4000/uiux/post33/" rel="alternate" type="text/html" title="UI/UX 디자인 공유 (1)" /><published>2022-09-01T00:00:00+09:00</published><updated>2022-09-01T00:00:00+09:00</updated><id>http://localhost:4000/uiux/post33</id><content type="html" xml:base="http://localhost:4000/uiux/post33/"><![CDATA[<p>Ecommerce Dashboard<br />
by. <a href="https://dribbble.com/bartoszmaryniaczyk">Bartosz Maryniaczyk</a></p>

<p><img width="800" alt="image" src="https://user-images.githubusercontent.com/95404736/187932468-43f74b55-0328-45be-8bc0-c22f2257869f.png" /></p>

<h3 id="️-링크">✔️ 링크</h3>

<p><a href="https://dribbble.com/shots/13846221-Ecommerce-Dashboard">https://dribbble.com/shots/13846221-Ecommerce-Dashboard</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Uiux" /><category term="UI" /><category term="UX" /><category term="디자인" /><category term="웹디자인" /><category term="Dashboard" /><category term="대시보드" /><summary type="html"><![CDATA[디자인 아이디어 공유]]></summary></entry><entry><title type="html">MongoDB 기본 쿼리문 정리</title><link href="http://localhost:4000/mongodb/post31/" rel="alternate" type="text/html" title="MongoDB 기본 쿼리문 정리" /><published>2022-08-28T00:00:00+09:00</published><updated>2022-08-28T00:00:00+09:00</updated><id>http://localhost:4000/mongodb/post31</id><content type="html" xml:base="http://localhost:4000/mongodb/post31/"><![CDATA[<h3 id="️-mongodb">✔️ MongoDB</h3>

<p>MongoDB는 NoSQL이라 고정된 스키마나 JOIN이 존재하지 않고 동적 스키마형 문서를 사용합니다. 몽고디비에서는 그러한 동적 스키마형 문서를 Binary JSON(JavaScript Object Notaion) 라고 부릅니다.
JSON 형태기 때문에 직관적이라 개발이 편리하고, 읽기 및 쓰기 성능이 뛰어나서 속도가 매우 빠릅니다.</p>

<h3 id="️-rdb와-mongodb-용어-비교">✔️ RDB와 MongoDB 용어 비교</h3>

<p>RDB와 MongoDB 용어를 비교하는 경우 아래와 같습니다.</p>

<table>
  <thead>
    <tr>
      <th>RDB</th>
      <th>MongoDB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Table</td>
      <td>Collection</td>
    </tr>
    <tr>
      <td>Row</td>
      <td>Document</td>
    </tr>
    <tr>
      <td>Column</td>
      <td>Field</td>
    </tr>
    <tr>
      <td>Primary Key</td>
      <td>Object_Id Field</td>
    </tr>
    <tr>
      <td>Relationship</td>
      <td>Embedded &amp; Link</td>
    </tr>
  </tbody>
</table>

<h3 id="️-연산자-정리">✔️ 연산자 정리</h3>

<h4 id="-비교연산자">👉 비교연산자</h4>

<table>
  <thead>
    <tr>
      <th>operator</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>$eq</td>
      <td>같음 (==)</td>
    </tr>
    <tr>
      <td>$gt</td>
      <td>초과 (&gt;)</td>
    </tr>
    <tr>
      <td>$gte</td>
      <td>이상 (&gt;=)</td>
    </tr>
    <tr>
      <td>$lt</td>
      <td>미만 (&lt;)</td>
    </tr>
    <tr>
      <td>$lte</td>
      <td>이하 (&lt;=)</td>
    </tr>
    <tr>
      <td>$ne</td>
      <td>같지 않음 (!=)</td>
    </tr>
    <tr>
      <td>$in</td>
      <td>전달한 배열 요소중 하나</td>
    </tr>
    <tr>
      <td>$nin</td>
      <td>전달한 배열 요소중에 없거나 필드가 존재하지 않을 때 조회</td>
    </tr>
  </tbody>
</table>

<h4 id="-논리연산자">👉 논리연산자</h4>

<table>
  <thead>
    <tr>
      <th>operator</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>$or</td>
      <td>주어진 조건 중 하나라도 true인 경우 true 반환</td>
    </tr>
    <tr>
      <td>$and</td>
      <td>모든 조건이 true 이면 true 반환</td>
    </tr>
    <tr>
      <td>$not</td>
      <td>해당 조건이 false 이면 true 반환</td>
    </tr>
    <tr>
      <td>$nor</td>
      <td>모든 조건이 false 이면 true 반환</td>
    </tr>
  </tbody>
</table>

<h3 id="️-쿼리-정리">✔️ 쿼리 정리</h3>

<blockquote>
  <p>MongoDB 데이터베이스 및 컬렉션 문법에 대한 내용은 <a href="https://ilimes.github.io/mongodb/post18/" title="mongoDB">관련 포스팅</a> 을 참고해주세요 :)</p>
</blockquote>

<h4 id="-documents-조회find">👉 documents 조회(find)</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find()
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="입력-keyvalue-값을-가진-docs만-리턴">입력 key&amp;value 값을 가진 docs만 리턴</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({ "books" : "Gravity" })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="views의-값이-30이하인-docs만-리턴">views의 값이 30이하인 docs만 리턴</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({ "views" : {$lte:30} })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="쿼리-결과에-보여줄-field지정">쿼리 결과에 보여줄 field지정</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({},{ "\_id" : false, "title" : true })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="comments의-name이라는-field의-value가-charles인-docs만-출력">comments의 name이라는 field의 value가 Charles인 docs만 출력</h5>

<ul>
  <li>$elemMatch : embedded doct 배열 쿼리시 사용</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({ "comments" : {$elemMatch : { "name" : "Charles" }}})
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="보기좋게-정렬-pretty">보기좋게 정렬: pretty()</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.cities.find({ "name" : "Minneapolis" }).pretty()
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="오름차순--내림차순-정렬-sort">오름차순 &amp; 내림차순 정렬: sort()</h5>

<ul>
  <li>name field를 내림차순으로 정렬하여 출력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({},{ "name" : true }).sort({ "name" : -1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>_id field를 내림차순으로 정리하고, name field를 오름차순으로 정렬하여 출력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({},{ "name" : true }).sort({ "\_id" : -1 , "name" : 1 }}
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="5개-docs만-출력">5개 docs만 출력</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find().limit(5)
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="2개를-건너뛰고-그-다음-docs를-출력">2개를 건너뛰고 그 다음 docs를 출력</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find().skip(2)
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="-데이터-업데이트">👉 데이터 업데이트</h4>

<h5 id="insert-하기">INSERT 하기</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>&gt; db.people.insert( [
    { name: "Abet", age: 19 },
    { name: "Betty", age: 20 },
    { name: "Charlie", age: 23, skills: [ "mongodb", "nodejs"] },
    { name: "David", age: 23, score: 20 }
])
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="특정-field-업데이트-하기-set">특정 field 업데이트 하기: $set</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>&gt; db.people.update( { name: "Abet" }, { $set: { age: 20 } } )
&gt; WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="특정-field-제거하기-unset">특정 field 제거하기: $unset</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>&gt; db.people.update( { name: "David" }, { $unset: { score: 1 } } )
&gt; WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="field가-있으면-수정-없으면-새로-추가하기--upserttrue">field가 있으면 수정, 없으면 새로 추가하기 : upsert:true</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>&gt; db.people.update( { name: "Elly" }, { name: "Elly", age: 17 }, { upsert: true } )
WriteResult({
  "nMatched" : 0,
  "nUpserted" : 1,
  "nModified" : 0,
  "_id" : ObjectId("56c893ffc694e4e7c8594240")
})
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="특정-조건에-맞는-field-한꺼번에-수정하기-multitrue">특정 조건에 맞는 field 한꺼번에 수정하기: multi:true</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { age: { $lte: 20 } },
  { $set: { score: 10 } },
  { multi: true }
  )
&gt; WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 0 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="skills-배열에-새로운-값-추가하기-push">skills 배열에 새로운 값 추가하기: $push</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { name: "Charlie" },
  { $push: { skills: "angularjs" } }
  )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="skills-배열에-여러-값-추가하고-오름차순으로-정렬하기-each-sort">skills 배열에 여러 값 추가하고 오름차순으로 정렬하기: $each, $sort</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { name: "Charlie" },
  { $push: {
      skills: {
          $each: [ "c++", "java" ],
          $sort: 1
      }
    }
  }
  )
&gt; WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="skills-배열에-하나의-요소-제거-pull">skills 배열에 하나의 요소 제거: $pull</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { name: "Charlie" },
  { $pull: { skills: "mongodb" } }
 )
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="-커스텀-인덱스-추가">👉 커스텀 인덱스 추가</h4>

<h5 id="이미-존재하는-collection-에-추가할-경우">이미 존재하는 collection 에 추가할 경우</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>&gt; db.products.createIndex(
  { item: 1, quantity: -1 } ,
  { name: "query for inventory" }
)
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="인덱스-종류-쿼리">인덱스 종류 쿼리</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre>&gt; db.cities.getIndexes()
[
  {
    "v" : 2,
    "key" : {
      "_id" : 1
    },
    "name" : "_id_",
    "ns" : "test.cities"
  },
  {
    "v" : 2,
    "key" : {
      "_id" : 1,
      "checkins" : -1
    },
    "name" : "_id_1_checkins_-1",
    "background" : true,
    "ns" : "test.cities"
  },
  {
    "v" : 2,
    "key" : {
      "geolocation" : "2dsphere",
      "_id" : 1,
      "checkins" : -1
    },
    "name" : "geolocation_2dsphere__id_1_checkins_-1",
    "ns" : "test.cities",
    "background" : true,
    "2dsphereIndexVersion" : 3
  }...
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="new-schema-field-레벨-에서-추가">new schema, field 레벨 에서 추가</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre> var animalSchema = new Schema({
 	name: String,
    type: String,
    tags: { type: [String], index: true } // animal의 tag를 인덱스로 지정
  });
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="new-schema-compound-index는-항상-schema-레벨에서-추가하기">new schema, compound index는 항상 schema 레벨에서 추가하기</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre> animalSchema.index({ name: 1, type: -1 }); // schema level
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://velopert.com/479">https://velopert.com/479</a>
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/">https://www.mongodb.com/docs/manual/reference/operator/query/</a><br />
<a href="https://velog.io/@rosewwross/MongoDB-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%BF%BC%EB%A6%AC%EB%AC%B8-%EC%A0%95%EB%A6%AC">https://velog.io/@rosewwross/MongoDB-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%BF%BC%EB%A6%AC%EB%AC%B8-%EC%A0%95%EB%A6%AC</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MongoDB" /><category term="몽고디비" /><category term="mongoDB" /><category term="쿼리문" /><category term="DB" /><summary type="html"><![CDATA[몽고디비 기본 쿼리문을 정리해보았습니다.]]></summary></entry><entry><title type="html">리액트 Hooks : useCallback()</title><link href="http://localhost:4000/react/post30/" rel="alternate" type="text/html" title="리액트 Hooks : useCallback()" /><published>2022-08-28T00:00:00+09:00</published><updated>2022-08-28T00:00:00+09:00</updated><id>http://localhost:4000/react/post30</id><content type="html" xml:base="http://localhost:4000/react/post30/"><![CDATA[<blockquote>
  <p><code class="language-plaintext highlighter-rouge">useMemo()</code> 에 대한 내용은 <a href="https://ilimes.github.io/react/post14/" title="useMemo">관련 포스팅</a> 을 참고해주세요 :)</p>
</blockquote>

<h3 id="️-usecallback">✔️ useCallback()</h3>

<p><code class="language-plaintext highlighter-rouge">useCallback()</code> 함수는 앞서 공부했던 <code class="language-plaintext highlighter-rouge">useMemo()</code> 함수와 더불어 리액트 성능 최적화에 사용되는 React Hooks 입니다.<br />
<br />
간단히 말해 <code class="language-plaintext highlighter-rouge">useMemo()</code> 는 어떤 결과값을 재사용할 때 사용하였고, <code class="language-plaintext highlighter-rouge">useCallback()</code>은 함수를 새로 만들지 않고 재사용하고 싶을 때 사용하는 것입니다. 언뜻 보면 비슷해보이지만 확실히 다른 기능을 합니다.</p>

<h3 id="️-usecallback-사용법">✔️ useCallback() 사용법</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">memoizedCallback</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="nx">함수</span><span class="p">,</span> <span class="nx">배열</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 첫 번째 인자로는 함수가, 두번째 인자로는 배열 형태의 함수 실행 조건이 들어가는데요.<br />
두 번째 인자로 넘어온 배열 형태 조건의 값이 변경될 때까지, 첫 번째 인자로 넘어온 함수를 Memoization 할 수 있게 해주는 것입니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>기본적으로 위와 같은 함수가 React 컴포넌트 안에 선언이 되어 있다면, 해당 컴포넌트가 렌더링 될 때마다 새롭게 함수를 생성하는데요.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">,</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 처럼 <code class="language-plaintext highlighter-rouge">useCallback()</code> 을 적용하게되면 x, y의 값이 바뀔 때는 새로운 함수가 선언되어 <code class="language-plaintext highlighter-rouge">add</code> 변수에 할당되고, 바뀌지 않으면 함수를 재사용하게 됩니다.</p>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<p><a href="https://velog.io/@rjsdnql123/TIL-React.useCallback-%EC%9D%B4%EB%9E%80">https://velog.io/@rjsdnql123/TIL-React.useCallback-%EC%9D%B4%EB%9E%80</a><br />
<a href="https://www.daleseo.com/react-hooks-use-callback/">https://www.daleseo.com/react-hooks-use-callback/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="useCallback" /><category term="useMemo" /><category term="리액트" /><category term="Hooks" /><summary type="html"><![CDATA[useCallback 를 사용하여 함수 재사용하기]]></summary></entry><entry><title type="html">JSDoc으로 타입 힌트 제공하면서 주석 예쁘게 달기</title><link href="http://localhost:4000/javascript/post29/" rel="alternate" type="text/html" title="JSDoc으로 타입 힌트 제공하면서 주석 예쁘게 달기" /><published>2022-08-27T00:00:00+09:00</published><updated>2022-08-27T00:00:00+09:00</updated><id>http://localhost:4000/javascript/post29</id><content type="html" xml:base="http://localhost:4000/javascript/post29/"><![CDATA[<h3 id="️-jsdoc-이란">✔️ JSDoc 이란?</h3>

<p>JSDoc은 자바스크립트 API 문서 생성기인데요. VSCode나 Webstorm 같은 편집기에서 기본으로 제공하고 있는 기능입니다. 이 기능을 사용하면 주석을 예쁘게 만들 수 있을 뿐만 아니라 함수 정보, 타입 힌트 등을 제공할 수 있어서 유용합니다.</p>

<h3 id="️-jsdoc-사용법">✔️ JSDoc 사용법</h3>

<p>사용법은 간단합니다. 아래와 같이 입력하면 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="cm">/** ... */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>기본 형태가 위와 같기 때문에 각 주석은 반드시 <code class="language-plaintext highlighter-rouge">/** ... */</code> 사이에 기술해야 합니다. 만약 <code class="language-plaintext highlighter-rouge">/*</code>, <code class="language-plaintext highlighter-rouge">/***</code> 와 같이 시작하게 된다면 그것은 무시됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * 이름과 나이 입력받아 출력하는 함수
 * @param {string} name 이름 입력란 입니다!
 * @param {number} age 나이 입력란 입니다!
 * @returns 이름과 나이를 출력합니다~
 */</span>
<span class="kd">const</span> <span class="nx">lime</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">name</span> <span class="o">+</span> <span class="nx">age</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>예를 들면 위와 같이 사용될 수 있습니다. 주석 설명은 자주 사용할만한 것들로 정리해놓았으니 아래를 참고해주세요. 추가로 더 자세한 내용이 궁금하시다면 참고사이트에 있는 JSDoc 문서를 참고해주세요 :)</p>

<h3 id="️-주석설명">✔️ 주석설명</h3>

<h4 id="-문서-주석">👉 문서 주석</h4>

<h5 id="version"><code class="language-plaintext highlighter-rouge">@version</code></h5>

<p>라이브러리 버전 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Solves equations of the form a * x = b. Returns the value
 * of x.
 * @version 1.2.3
 * @tutorial solver
 */</span>
<span class="kd">function</span> <span class="nx">solver</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">b</span> <span class="o">/</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="file-fileoverview-overview"><code class="language-plaintext highlighter-rouge">@file (@fileoverview, @overview)</code></h5>

<p>파일 정보를 나타냅니다.</p>

<h5 id="copyright"><code class="language-plaintext highlighter-rouge">@copyright</code></h5>

<p>저작권 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @file This is my cool script.
 * @copyright Michael Mathews 2011
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="license"><code class="language-plaintext highlighter-rouge">@license</code></h5>

<p>소프트웨어 라이센스 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Utility functions for the foo package.
 * @module foo/util
 * @license Apache-2.0
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="author"><code class="language-plaintext highlighter-rouge">@author</code></h5>

<p>작성자 정보를 나타냅니다. 이메일 주소를 입력하는 경우에는 &lt;&gt; 를 활용하면 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @author Jane Smith &lt;jsmith@example.com&gt;
 */</span>
<span class="kd">function</span> <span class="nx">MyClass</span><span class="p">()</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="-함수-주석">👉 함수 주석</h4>

<h5 id="this"><code class="language-plaintext highlighter-rouge">@this</code></h5>

<p>this 키워드가 참조하는 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cm">/** @constructor */</span>
<span class="kd">function</span> <span class="nx">Greeter</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setName</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/** @this Greeter */</span>
<span class="kd">function</span> <span class="nx">setName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/** document me */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="constant-const"><code class="language-plaintext highlighter-rouge">@constant (@const)</code></h5>

<p>상수 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cm">/** @constant
    @type {string}
    @default
*/</span>
<span class="kd">const</span> <span class="nx">RED</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">FF0000</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/** @constant {number} */</span>
<span class="kd">var</span> <span class="nx">ONE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="description"><code class="language-plaintext highlighter-rouge">@description</code></h5>

<p>설명 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @param {number} a
 * @param {number} b
 * @returns {number}
 * @description Add two numbers.
 */</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>만약 첫 번째 줄인 경우 아래처럼 생략하여 쓸 수 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Add two numbers.
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="throws-exception"><code class="language-plaintext highlighter-rouge">@throws (@exception)</code></h5>

<p>오류나 예외사항을 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @throws {InvalidArgumentException}
 */</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @throws Will throw an error if the argument is null.
 */</span>
<span class="kd">function</span> <span class="nx">bar</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @throws {DivideByZero} Argument x must be non-zero.
 */</span>
<span class="kd">function</span> <span class="nx">baz</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="param-arg-argument"><code class="language-plaintext highlighter-rouge">@param (@arg, @argument)</code>`</h5>

<p>파라미터 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @param {string} somebody Somebody's name.
 */</span>
<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">(</span><span class="nx">somebody</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">somebody</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="callback"><code class="language-plaintext highlighter-rouge">@callback</code></h5>

<p>콜백으로 받은 인자 및 반환값에 대한 정보를 나타냅니다.</p>

<ul>
  <li>클래스별</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @class
 */</span>
<span class="kd">function</span> <span class="nx">Requester</span><span class="p">()</span> <span class="p">{}</span>

<span class="cm">/**
 * Send a request.
 * @param {Requester~requestCallback} cb - The callback that handles the response.
 */</span>
<span class="nx">Requester</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">send</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// code</span>
<span class="p">};</span>

<span class="cm">/**
 * This callback is displayed as part of the Requester class.
 * @callback Requester~requestCallback
 * @param {number} responseCode
 * @param {string} responseMessage
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>글로벌</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @class
 */</span>
<span class="kd">function</span> <span class="nx">Requester</span><span class="p">()</span> <span class="p">{}</span>

<span class="cm">/**
 * Send a request.
 * @param {requestCallback} cb - The callback that handles the response.
 */</span>
<span class="nx">Requester</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">send</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// code</span>
<span class="p">};</span>

<span class="cm">/**
 * This callback is displayed as a global member.
 * @callback requestCallback
 * @param {number} responseCode
 * @param {string} responseMessage
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="requires"><code class="language-plaintext highlighter-rouge">@requires</code></h5>

<p>필요한 모듈이 있음을 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * This class requires the modules {@link module:xyzcorp/helper} and
 * {@link module:xyzcorp/helper.ShinyWidget#polish}.
 * @class
 * @requires module:xyzcorp/helper
 * @requires xyzcorp/helper.ShinyWidget#polish
 */</span>
<span class="kd">function</span> <span class="nx">Widgetizer</span><span class="p">()</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="todo"><code class="language-plaintext highlighter-rouge">@todo</code></h5>

<p>해야할 일이나 작업에 대한 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @todo Write the documentation.
 * @todo Implement this function.
 */</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// write me</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="return-returns"><code class="language-plaintext highlighter-rouge">@return (@returns)</code></h5>

<p>리턴값을 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Returns the sum of a and b
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="since"><code class="language-plaintext highlighter-rouge">@since</code></h5>

<p>클래스나 메소드 등이 특정 버전에서 추가되었을 경우 사용합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Provides access to user information.
 * @since 1.0.1
 */</span>
<span class="kd">function</span> <span class="nx">UserRecord</span><span class="p">()</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<p><a href="https://jsdoc.app/">https://jsdoc.app/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="JavaScript" /><category term="JSDoc" /><category term="javaScript" /><category term="자바스크립트" /><category term="주석" /><summary type="html"><![CDATA[JSDoc 기능 사용법]]></summary></entry><entry><title type="html">MySQL/MariaDB 원격 접속 허용하기 (Host ‘IP’ is not allowed to connect to this MySQL server)</title><link href="http://localhost:4000/mariadb/post28/" rel="alternate" type="text/html" title="MySQL/MariaDB 원격 접속 허용하기 (Host ‘IP’ is not allowed to connect to this MySQL server)" /><published>2022-08-25T00:00:00+09:00</published><updated>2022-08-25T00:00:00+09:00</updated><id>http://localhost:4000/mariadb/post28</id><content type="html" xml:base="http://localhost:4000/mariadb/post28/"><![CDATA[<p>MySQL(MariaDB)는 기본적으로 로컬에서만 접속할 수 있도록 설정되어 있습니다. 그래서 외부에서 DB에 접속하고자 하는 경우에는 반드시 접근 허용을 해주어야 합니다.</p>

<h3 id="️-접근-권한-확인">✔️ 접근 권한 확인</h3>

<p>해당 오류가 났다는 것은 접근 권한이 없다는 것을 의미하는 것이라, 사실 권한 확인은 생략하고 넘어가도 되지만 그래도 한번 확인해보도록 하겠습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>select Host,User,plugin,authentication_string FROM mysql.user;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>DB 접속 후 위 명령어를 입력하면 접근 권한이 어떻게 되어있는지 확인할 수 있습니다. localhost만 보인다면 접근권한이 로컬만 허용되어 있는 것입니다.</p>

<h3 id="️-권한-부여">✔️ 권한 부여</h3>

<h4 id="모든-ip-허용">모든 IP 허용</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '패스워드';
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="ip-대역-허용">IP 대역 허용</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.%' IDENTIFIED BY '패스워드';
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 설정하는 경우에는 192.168.0 으로 시작하는 모든 IP가 허용됩니다.</p>

<h4 id="특정-ip-허용">특정 IP 허용</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.19' IDENTIFIED BY '패스워드';
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 설정하는 경우에는 192.168.0.19 인 아이피만 허용됩니다.</p>

<h3 id="️-허용-전으로-되돌리기">✔️ 허용 전으로 되돌리기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>DELETE FROM mysql.user WHERE Host='%' AND User='유저명';
FLUSH PRIVILEGES;
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-원격-접속-하기">✔️ 원격 접속 하기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>mysql -h '원격 IP주소' -u '허용된 사용자 이름(ex. root)' -p
</pre></td></tr></tbody></table></code></pre></div></div>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MariaDB" /><category term="데이터베이스" /><category term="DB" /><category term="MariaDB" /><summary type="html"><![CDATA[데이터베이스 접근 권한 거부 해결하기]]></summary></entry></feed>