<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-28T01:10:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ilimes</title><subtitle>**공부하고 기록하는** 블로그</subtitle><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><entry><title type="html">MongoDB 기본 쿼리문 정리</title><link href="http://localhost:4000/mongodb/post31/" rel="alternate" type="text/html" title="MongoDB 기본 쿼리문 정리" /><published>2022-08-28T00:00:00+09:00</published><updated>2022-08-28T00:00:00+09:00</updated><id>http://localhost:4000/mongodb/post31</id><content type="html" xml:base="http://localhost:4000/mongodb/post31/"><![CDATA[<h3 id="️-mongodb">✔️ MongoDB</h3>

<p>MongoDB는 NoSQL이라 고정된 스키마나 JOIN이 존재하지 않고 동적 스키마형 문서를 사용합니다. 몽고디비에서는 그러한 동적 스키마형 문서를 Binary JSON(JavaScript Object Notaion) 라고 부릅니다.
JSON 형태기 때문에 직관적이라 개발이 편리하고, 읽기 및 쓰기 성능이 뛰어나서 속도가 매우 빠릅니다.</p>

<h3 id="️-rdb와-mongodb-용어-비교">✔️ RDB와 MongoDB 용어 비교</h3>

<p>RDB와 MongoDB 용어를 비교하는 경우 아래와 같습니다.</p>

<table>
  <thead>
    <tr>
      <th>RDB</th>
      <th>MongoDB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Table</td>
      <td>Collection</td>
    </tr>
    <tr>
      <td>Row</td>
      <td>Document</td>
    </tr>
    <tr>
      <td>Column</td>
      <td>Field</td>
    </tr>
    <tr>
      <td>Primary Key</td>
      <td>Object_Id Field</td>
    </tr>
    <tr>
      <td>Relationship</td>
      <td>Embedded &amp; Link</td>
    </tr>
  </tbody>
</table>

<h3 id="️-연산자-정리">✔️ 연산자 정리</h3>

<h4 id="-비교연산자">👉 비교연산자</h4>

<table>
  <thead>
    <tr>
      <th>operator</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>&amp;eq</td>
      <td>같음 (==)</td>
    </tr>
    <tr>
      <td>&amp;gt</td>
      <td>초과 (&gt;)</td>
    </tr>
    <tr>
      <td>&amp;gte</td>
      <td>이상 (&gt;=)</td>
    </tr>
    <tr>
      <td>&amp;lt</td>
      <td>미만 (&lt;)</td>
    </tr>
    <tr>
      <td>&amp;lte</td>
      <td>이하 (&lt;=)</td>
    </tr>
    <tr>
      <td>&amp;ne</td>
      <td>같지 않음 (!=)</td>
    </tr>
    <tr>
      <td>&amp;in</td>
      <td>전달한 배열 요소중 하나</td>
    </tr>
    <tr>
      <td>&amp;nin</td>
      <td>전달한 배열 요소중에 없거나 필드가 존재하지 않을 때 조회</td>
    </tr>
  </tbody>
</table>

<h4 id="-논리연산자">👉 논리연산자</h4>

<table>
  <thead>
    <tr>
      <th>operator</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>&amp;or</td>
      <td>주어진 조건 중 하나라도 true인 경우 true 반환</td>
    </tr>
    <tr>
      <td>&amp;and</td>
      <td>모든 조건이 true 이면 true 반환</td>
    </tr>
    <tr>
      <td>&amp;not</td>
      <td>해당 조건이 false 이면 true 반환</td>
    </tr>
    <tr>
      <td>&amp;nor</td>
      <td>모든 조건이 false 이면 true 반환</td>
    </tr>
  </tbody>
</table>

<h3 id="️-쿼리-정리">✔️ 쿼리 정리</h3>

<blockquote>
  <p>MongoDB 데이터베이스 및 컬렉션 문법에 대한 내용은 <a href="https://ilimes.github.io/mongodb/post18/" title="mongoDB">관련 포스팅</a> 을 참고해주세요 :)</p>
</blockquote>

<h4 id="-documents-조회find">👉 documents 조회(find)</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find()
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="입력-keyvalue-값을-가진-docs만-리턴">입력 key&amp;value 값을 가진 docs만 리턴</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({ "books" : "Gravity" })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="views의-값이-30이하인-docs만-리턴">views의 값이 30이하인 docs만 리턴</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({ "views" : {$lte:30} })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="쿼리-결과에-보여줄-field지정">쿼리 결과에 보여줄 field지정</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({},{ "\_id" : false, "title" : true })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="comments의-name이라는-field의-value가-charles인-docs만-출력">comments의 name이라는 field의 value가 Charles인 docs만 출력</h5>

<ul>
  <li>$elemMatch : embedded doct 배열 쿼리시 사용</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({ "comments" : {$elemMatch : { "name" : "Charles" }}})
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="보기좋게-정렬-pretty">보기좋게 정렬: pretty()</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.cities.find({ "name" : "Minneapolis" }).pretty()
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="오름차순--내림차순-정렬-sort">오름차순 &amp; 내림차순 정렬: sort()</h5>

<ul>
  <li>name field를 내림차순으로 정렬하여 출력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({},{ "name" : true }).sort({ "name" : -1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>_id field를 내림차순으로 정리하고, name field를 오름차순으로 정렬하여 출력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find({},{ "name" : true }).sort({ "\_id" : -1 , "name" : 1 }}
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="5개-docs만-출력">5개 docs만 출력</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find().limit(5)
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="2개를-건너뛰고-그-다음-docs를-출력">2개를 건너뛰고 그 다음 docs를 출력</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>&gt; db.&lt;collection 이름&gt;.find().skip(2)
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="-데이터-업데이트">👉 데이터 업데이트</h4>

<h5 id="insert-하기">INSERT 하기</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>&gt; db.people.insert( [
    { name: "Abet", age: 19 },
    { name: "Betty", age: 20 },
    { name: "Charlie", age: 23, skills: [ "mongodb", "nodejs"] },
    { name: "David", age: 23, score: 20 }
])
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="특정-field-업데이트-하기-set">특정 field 업데이트 하기: $set</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>&gt; db.people.update( { name: "Abet" }, { $set: { age: 20 } } )
&gt; WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="특정-field-제거하기-unset">특정 field 제거하기: $unset</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>&gt; db.people.update( { name: "David" }, { $unset: { score: 1 } } )
&gt; WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="field가-있으면-수정-없으면-새로-추가하기--upserttrue">field가 있으면 수정, 없으면 새로 추가하기 : upsert:true</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>&gt; db.people.update( { name: "Elly" }, { name: "Elly", age: 17 }, { upsert: true } )
WriteResult({
  "nMatched" : 0,
  "nUpserted" : 1,
  "nModified" : 0,
  "_id" : ObjectId("56c893ffc694e4e7c8594240")
})
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="특정-조건에-맞는-field-한꺼번에-수정하기-multitrue">특정 조건에 맞는 field 한꺼번에 수정하기: multi:true</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { age: { $lte: 20 } },
  { $set: { score: 10 } },
  { multi: true }
  )
&gt; WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 0 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="skills-배열에-새로운-값-추가하기-push">skills 배열에 새로운 값 추가하기: $push</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { name: "Charlie" },
  { $push: { skills: "angularjs" } }
  )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="skills-배열에-여러-값-추가하고-오름차순으로-정렬하기-each-sort">skills 배열에 여러 값 추가하고 오름차순으로 정렬하기: $each, $sort</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { name: "Charlie" },
  { $push: {
      skills: {
          $each: [ "c++", "java" ],
          $sort: 1
      }
    }
  }
  )
&gt; WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="skills-배열에-하나의-요소-제거-pull">skills 배열에 하나의 요소 제거: $pull</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>&gt; db.people.update(
  { name: "Charlie" },
  { $pull: { skills: "mongodb" } }
 )
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="-커스텀-인덱스-추가">👉 커스텀 인덱스 추가</h4>

<h5 id="이미-존재하는-collection-에-추가할-경우">이미 존재하는 collection 에 추가할 경우</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>&gt; db.products.createIndex(
  { item: 1, quantity: -1 } ,
  { name: "query for inventory" }
)
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="인덱스-종류-쿼리">인덱스 종류 쿼리</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre>&gt; db.cities.getIndexes()
[
  {
    "v" : 2,
    "key" : {
      "_id" : 1
    },
    "name" : "_id_",
    "ns" : "test.cities"
  },
  {
    "v" : 2,
    "key" : {
      "_id" : 1,
      "checkins" : -1
    },
    "name" : "_id_1_checkins_-1",
    "background" : true,
    "ns" : "test.cities"
  },
  {
    "v" : 2,
    "key" : {
      "geolocation" : "2dsphere",
      "_id" : 1,
      "checkins" : -1
    },
    "name" : "geolocation_2dsphere__id_1_checkins_-1",
    "ns" : "test.cities",
    "background" : true,
    "2dsphereIndexVersion" : 3
  }...
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="new-schema-field-레벨-에서-추가">new schema, field 레벨 에서 추가</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre> var animalSchema = new Schema({
 	name: String,
    type: String,
    tags: { type: [String], index: true } // animal의 tag를 인덱스로 지정
  });
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="new-schema-compound-index는-항상-schema-레벨에서-추가하기">new schema, compound index는 항상 schema 레벨에서 추가하기</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre> animalSchema.index({ name: 1, type: -1 }); // schema level
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-참고-사이트">✔️ 참고 사이트</h3>

<p><a href="https://velopert.com/479">https://velopert.com/479</a>
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/">https://www.mongodb.com/docs/manual/reference/operator/query/</a><br />
<a href="https://velog.io/@rosewwross/MongoDB-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%BF%BC%EB%A6%AC%EB%AC%B8-%EC%A0%95%EB%A6%AC">https://velog.io/@rosewwross/MongoDB-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%BF%BC%EB%A6%AC%EB%AC%B8-%EC%A0%95%EB%A6%AC</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MongoDB" /><category term="몽고디비" /><category term="mongoDB" /><category term="쿼리문" /><category term="DB" /><summary type="html"><![CDATA[몽고디비 기본 쿼리문을 정리해보았습니다.]]></summary></entry><entry><title type="html">리액트 Hooks : useCallback()</title><link href="http://localhost:4000/react/post30/" rel="alternate" type="text/html" title="리액트 Hooks : useCallback()" /><published>2022-08-28T00:00:00+09:00</published><updated>2022-08-28T00:00:00+09:00</updated><id>http://localhost:4000/react/post30</id><content type="html" xml:base="http://localhost:4000/react/post30/"><![CDATA[<blockquote>
  <p><code class="language-plaintext highlighter-rouge">useMemo()</code> 에 대한 내용은 <a href="https://ilimes.github.io/react/post14/" title="useMemo">관련 포스팅</a> 을 참고해주세요 :)</p>
</blockquote>

<h3 id="️-usecallback">✔️ useCallback()</h3>

<p><code class="language-plaintext highlighter-rouge">useCallback()</code> 함수는 앞서 공부했던 <code class="language-plaintext highlighter-rouge">useMemo()</code> 함수와 더불어 리액트 성능 최적화에 사용되는 React Hooks 입니다.<br />
<br />
간단히 말해 <code class="language-plaintext highlighter-rouge">useMemo()</code> 는 어떤 결과값을 재사용할 때 사용하였고, <code class="language-plaintext highlighter-rouge">useCallback()</code>은 함수를 새로 만들지 않고 재사용하고 싶을 때 사용하는 것입니다. 언뜻 보면 비슷해보이지만 확실히 다른 기능을 합니다.</p>

<h3 id="️-usecallback-사용법">✔️ useCallback() 사용법</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">memoizedCallback</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="nx">함수</span><span class="p">,</span> <span class="nx">배열</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 첫 번째 인자로는 함수가, 두번째 인자로는 배열 형태의 함수 실행 조건이 들어가는데요.<br />
두 번째 인자로 넘어온 배열 형태 조건의 값이 변경될 때까지, 첫 번째 인자로 넘어온 함수를 Memoization 할 수 있게 해주는 것입니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>기본적으로 위와 같은 함수가 React 컴포넌트 안에 선언이 되어 있다면, 해당 컴포넌트가 렌더링 될 때마다 새롭게 함수를 생성하는데요.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">,</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 처럼 <code class="language-plaintext highlighter-rouge">useCallback()</code> 을 적용하게되면 x, y의 값이 바뀔 때는 새로운 함수가 선언되어 <code class="language-plaintext highlighter-rouge">add</code> 변수에 할당되고, 바뀌지 않으면 함수를 재사용하게 됩니다.</p>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<p><a href="https://velog.io/@rjsdnql123/TIL-React.useCallback-%EC%9D%B4%EB%9E%80">https://velog.io/@rjsdnql123/TIL-React.useCallback-%EC%9D%B4%EB%9E%80</a><br />
<a href="https://www.daleseo.com/react-hooks-use-callback/">https://www.daleseo.com/react-hooks-use-callback/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="useCallback" /><category term="useMemo" /><category term="리액트" /><category term="Hooks" /><summary type="html"><![CDATA[useCallback 를 사용하여 함수 재사용하기]]></summary></entry><entry><title type="html">JSDoc으로 타입 힌트 제공하면서 주석 예쁘게 달기</title><link href="http://localhost:4000/javascript/post29/" rel="alternate" type="text/html" title="JSDoc으로 타입 힌트 제공하면서 주석 예쁘게 달기" /><published>2022-08-27T00:00:00+09:00</published><updated>2022-08-27T00:00:00+09:00</updated><id>http://localhost:4000/javascript/post29</id><content type="html" xml:base="http://localhost:4000/javascript/post29/"><![CDATA[<h3 id="️-jsdoc-이란">✔️ JSDoc 이란?</h3>

<p>JSDoc은 자바스크립트 API 문서 생성기인데요. VSCode나 Webstorm 같은 편집기에서 기본으로 제공하고 있는 기능입니다. 이 기능을 사용하면 주석을 예쁘게 만들 수 있을 뿐만 아니라 함수 정보, 타입 힌트 등을 제공할 수 있어서 유용합니다.</p>

<h3 id="️-jsdoc-사용법">✔️ JSDoc 사용법</h3>

<p>사용법은 간단합니다. 아래와 같이 입력하면 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="cm">/** ... */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>기본 형태가 위와 같기 때문에 각 주석은 반드시 <code class="language-plaintext highlighter-rouge">/** ... */</code> 사이에 기술해야 합니다. 만약 <code class="language-plaintext highlighter-rouge">/*</code>, <code class="language-plaintext highlighter-rouge">/***</code> 와 같이 시작하게 된다면 그것은 무시됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * 이름과 나이 입력받아 출력하는 함수
 * @param {string} name 이름 입력란 입니다!
 * @param {number} age 나이 입력란 입니다!
 * @returns 이름과 나이를 출력합니다~
 */</span>
<span class="kd">const</span> <span class="nx">lime</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">name</span> <span class="o">+</span> <span class="nx">age</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>예를 들면 위와 같이 사용될 수 있습니다. 주석 설명은 자주 사용할만한 것들로 정리해놓았으니 아래를 참고해주세요. 추가로 더 자세한 내용이 궁금하시다면 참고사이트에 있는 JSDoc 문서를 참고해주세요 :)</p>

<h3 id="️-주석설명">✔️ 주석설명</h3>

<h4 id="-문서-주석">👉 문서 주석</h4>

<h5 id="version"><code class="language-plaintext highlighter-rouge">@version</code></h5>

<p>라이브러리 버전 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Solves equations of the form a * x = b. Returns the value
 * of x.
 * @version 1.2.3
 * @tutorial solver
 */</span>
<span class="kd">function</span> <span class="nx">solver</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">b</span> <span class="o">/</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="file-fileoverview-overview"><code class="language-plaintext highlighter-rouge">@file (@fileoverview, @overview)</code></h5>

<p>파일 정보를 나타냅니다.</p>

<h5 id="copyright"><code class="language-plaintext highlighter-rouge">@copyright</code></h5>

<p>저작권 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @file This is my cool script.
 * @copyright Michael Mathews 2011
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="license"><code class="language-plaintext highlighter-rouge">@license</code></h5>

<p>소프트웨어 라이센스 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Utility functions for the foo package.
 * @module foo/util
 * @license Apache-2.0
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="author"><code class="language-plaintext highlighter-rouge">@author</code></h5>

<p>작성자 정보를 나타냅니다. 이메일 주소를 입력하는 경우에는 &lt;&gt; 를 활용하면 됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @author Jane Smith &lt;jsmith@example.com&gt;
 */</span>
<span class="kd">function</span> <span class="nx">MyClass</span><span class="p">()</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="-함수-주석">👉 함수 주석</h4>

<h5 id="this"><code class="language-plaintext highlighter-rouge">@this</code></h5>

<p>this 키워드가 참조하는 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cm">/** @constructor */</span>
<span class="kd">function</span> <span class="nx">Greeter</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setName</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/** @this Greeter */</span>
<span class="kd">function</span> <span class="nx">setName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/** document me */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="constant-const"><code class="language-plaintext highlighter-rouge">@constant (@const)</code></h5>

<p>상수 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cm">/** @constant
    @type {string}
    @default
*/</span>
<span class="kd">const</span> <span class="nx">RED</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">FF0000</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/** @constant {number} */</span>
<span class="kd">var</span> <span class="nx">ONE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="description"><code class="language-plaintext highlighter-rouge">@description</code></h5>

<p>설명 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @param {number} a
 * @param {number} b
 * @returns {number}
 * @description Add two numbers.
 */</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>만약 첫 번째 줄인 경우 아래처럼 생략하여 쓸 수 있습니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Add two numbers.
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="throws-exception"><code class="language-plaintext highlighter-rouge">@throws (@exception)</code></h5>

<p>오류나 예외사항을 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @throws {InvalidArgumentException}
 */</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @throws Will throw an error if the argument is null.
 */</span>
<span class="kd">function</span> <span class="nx">bar</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @throws {DivideByZero} Argument x must be non-zero.
 */</span>
<span class="kd">function</span> <span class="nx">baz</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="param-arg-argument"><code class="language-plaintext highlighter-rouge">@param (@arg, @argument)</code>`</h5>

<p>파라미터 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @param {string} somebody Somebody's name.
 */</span>
<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">(</span><span class="nx">somebody</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">somebody</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="callback"><code class="language-plaintext highlighter-rouge">@callback</code></h5>

<p>콜백으로 받은 인자 및 반환값에 대한 정보를 나타냅니다.</p>

<ul>
  <li>클래스별</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @class
 */</span>
<span class="kd">function</span> <span class="nx">Requester</span><span class="p">()</span> <span class="p">{}</span>

<span class="cm">/**
 * Send a request.
 * @param {Requester~requestCallback} cb - The callback that handles the response.
 */</span>
<span class="nx">Requester</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">send</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// code</span>
<span class="p">};</span>

<span class="cm">/**
 * This callback is displayed as part of the Requester class.
 * @callback Requester~requestCallback
 * @param {number} responseCode
 * @param {string} responseMessage
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>글로벌</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @class
 */</span>
<span class="kd">function</span> <span class="nx">Requester</span><span class="p">()</span> <span class="p">{}</span>

<span class="cm">/**
 * Send a request.
 * @param {requestCallback} cb - The callback that handles the response.
 */</span>
<span class="nx">Requester</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">send</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// code</span>
<span class="p">};</span>

<span class="cm">/**
 * This callback is displayed as a global member.
 * @callback requestCallback
 * @param {number} responseCode
 * @param {string} responseMessage
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="requires"><code class="language-plaintext highlighter-rouge">@requires</code></h5>

<p>필요한 모듈이 있음을 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * This class requires the modules {@link module:xyzcorp/helper} and
 * {@link module:xyzcorp/helper.ShinyWidget#polish}.
 * @class
 * @requires module:xyzcorp/helper
 * @requires xyzcorp/helper.ShinyWidget#polish
 */</span>
<span class="kd">function</span> <span class="nx">Widgetizer</span><span class="p">()</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="todo"><code class="language-plaintext highlighter-rouge">@todo</code></h5>

<p>해야할 일이나 작업에 대한 정보를 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @todo Write the documentation.
 * @todo Implement this function.
 */</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// write me</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="return-returns"><code class="language-plaintext highlighter-rouge">@return (@returns)</code></h5>

<p>리턴값을 나타냅니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Returns the sum of a and b
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="since"><code class="language-plaintext highlighter-rouge">@since</code></h5>

<p>클래스나 메소드 등이 특정 버전에서 추가되었을 경우 사용합니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Provides access to user information.
 * @since 1.0.1
 */</span>
<span class="kd">function</span> <span class="nx">UserRecord</span><span class="p">()</span> <span class="p">{}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-참고사이트">✔️ 참고사이트</h3>

<p><a href="https://jsdoc.app/">https://jsdoc.app/</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="JavaScript" /><category term="JSDoc" /><category term="javaScript" /><category term="자바스크립트" /><category term="주석" /><summary type="html"><![CDATA[JSDoc 기능 사용법]]></summary></entry><entry><title type="html">MySQL/MariaDB 원격 접속 허용하기 (Host ‘IP’ is not allowed to connect to this MySQL server)</title><link href="http://localhost:4000/mariadb/post28/" rel="alternate" type="text/html" title="MySQL/MariaDB 원격 접속 허용하기 (Host ‘IP’ is not allowed to connect to this MySQL server)" /><published>2022-08-25T00:00:00+09:00</published><updated>2022-08-25T00:00:00+09:00</updated><id>http://localhost:4000/mariadb/post28</id><content type="html" xml:base="http://localhost:4000/mariadb/post28/"><![CDATA[<p>MySQL(MariaDB)는 기본적으로 로컬에서만 접속할 수 있도록 설정되어 있습니다. 그래서 외부에서 DB에 접속하고자 하는 경우에는 반드시 접근 허용을 해주어야 합니다.</p>

<h3 id="️-접근-권한-확인">✔️ 접근 권한 확인</h3>

<p>해당 오류가 났다는 것은 접근 권한이 없다는 것을 의미하는 것이라, 사실 권한 확인은 생략하고 넘어가도 되지만 그래도 한번 확인해보도록 하겠습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>select Host,User,plugin,authentication_string FROM mysql.user;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>DB 접속 후 위 명령어를 입력하면 접근 권한이 어떻게 되어있는지 확인할 수 있습니다. localhost만 보인다면 접근권한이 로컬만 허용되어 있는 것입니다.</p>

<h3 id="️-권한-부여">✔️ 권한 부여</h3>

<h4 id="모든-ip-허용">모든 IP 허용</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '패스워드';
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="ip-대역-허용">IP 대역 허용</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.%' IDENTIFIED BY '패스워드';
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 설정하는 경우에는 192.168.0 으로 시작하는 모든 IP가 허용됩니다.</p>

<h4 id="특정-ip-허용">특정 IP 허용</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.19' IDENTIFIED BY '패스워드';
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 설정하는 경우에는 192.168.0.19 인 아이피만 허용됩니다.</p>

<h3 id="️-허용-전으로-되돌리기">✔️ 허용 전으로 되돌리기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>DELETE FROM mysql.user WHERE Host='%' AND User='유저명';
FLUSH PRIVILEGES;
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-원격-접속-하기">✔️ 원격 접속 하기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>mysql -h '원격 IP주소' -u '허용된 사용자 이름(ex. root)' -p
</pre></td></tr></tbody></table></code></pre></div></div>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="MariaDB" /><category term="데이터베이스" /><category term="DB" /><category term="MariaDB" /><summary type="html"><![CDATA[데이터베이스 접근 권한 거부 해결하기]]></summary></entry><entry><title type="html">PureComponent와 React.memo</title><link href="http://localhost:4000/react/post27/" rel="alternate" type="text/html" title="PureComponent와 React.memo" /><published>2022-08-24T00:00:00+09:00</published><updated>2022-08-24T00:00:00+09:00</updated><id>http://localhost:4000/react/post27</id><content type="html" xml:base="http://localhost:4000/react/post27/"><![CDATA[<p>유저들은 반응이 빠른 UI를 선호합니다. 최근 리액트로 개발을 하다보니 자식 컴포넌트가 필요 이상으로 계속해서 렌더링이 되는 경우가 생겼고, 이는 곧 성능 저하로 이어지기 때문에 개선이 필요하다는 생각이 들었습니다.</p>

<p>우선 React의 특성으로, React 앱은 state가 변화하거나 관련된 props가 변경되는 경우 전체적으로 렌더링이 됩니다. React는 먼저 컴포넌트를 렌더링 한 뒤, 이전 렌더링 결과와 비교하여 DOM 업데이트 결정 여부를 결정하게 되며 만약에 렌더링 결과가 이전과 다르다면 React는 DOM을 업데이트하게 됩니다.</p>

<p>리액트의 특성상 부모 컴포넌트가 다시 렌더링 되는 경우에는 자식 컴포넌트도 렌더링 되는 것이죠.</p>

<p>같은 내용이 업데이트 되었을 때 계속 그 내용을 불러와서 렌더링한다면 굉장히 불필요한 렌더링이 수행될 것입니다. 그러한 쓸데 없는 렌더링을 줄이는 방법으로 pureComponent나 React.memo가 사용되는데요. 해당 내용은 메모이제이션 기법의 이점을 얻고자 하는 경우에 사용하면 가장 좋습니다.</p>

<h3 id="️-purecomponent">✔️ PureComponent</h3>

<ul>
  <li>React.PureComponent는 React.Component와 비교하여 생명주기 메소드 중 하나인 <code class="language-plaintext highlighter-rouge">shouldComponentUpdate()</code> 를 어떻게 쓰는지에 대한 부분에서 차이가 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">shouldComponentUpdate()</code> 는 state나 props가 새로운 값으로 갱신되어서 렌더링이 발생하기 직전에 호출됩니다.</li>
  <li>기본적으로 <code class="language-plaintext highlighter-rouge">shouldComponentUpdate()</code> 메소드의 return 값은 true 지만, false를 리턴하는 경우에는 <code class="language-plaintext highlighter-rouge">render()</code> 와 <code class="language-plaintext highlighter-rouge">componentDidUpdate()</code> 는 호출되지 않습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">PureComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Lime</span> <span class="kd">extends</span> <span class="nx">PureComponent</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">count</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">};</span>
  <span class="nx">counter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
      <span class="na">count</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">,</span> <span class="c1">// 값이 변경되지는 않으나, setState는 작성한다</span>
    <span class="p">});</span>
  <span class="p">}</span>
  <span class="nx">componentDidUpdate</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 컴포넌트가 업데이트되면 값을 출력한다.</span>
  <span class="p">}</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">counter</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>counterButton<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Lime</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-reactmemo">✔️ React.memo</h3>

<ul>
  <li>React.memo는 함수형 컴포넌트에서 PureComponent와 같은 기능을 수행합니다.</li>
  <li>공식 문서를 확인해보면 pureComponent에는 <code class="language-plaintext highlighter-rouge">shouldComponenetUpdate</code> 함수가, React.memo에는 <code class="language-plaintext highlighter-rouge">areEqual</code> 함수가 구현되어 있어서 변화가 없을 때 다시 렌더링 하지 않는 것을 알 수 있습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Lime</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
   <span class="p">...</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Lime</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>React.memo 사용법은 매우 간단합니다. 위 처럼 감싸주기만 하면 됩니다 :)</li>
  <li>기본 동작은 얕은 비교이며 깊은 비교의 경우에는 아래 사용 방법을 참고하시면 됩니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">areEqual</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
  nextProp가 prevProps와 동일한 값을 가지면 true를 반환하고, 그렇지 않다면 false를 반환
  */</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">,</span> <span class="nx">areEqual</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>[React공식문서] :
areEqual 함수는 props들이 서로 같으면 true를 반환하고, props들이 서로 다르면 false를 반환합니다. 이것은 shouldComponentUpdate와 정반대의 동작입니다.</li>
</ul>

<h3 id="today-i-learned">Today I Learned</h3>

<p>React 성능 개선을 위해 사용되어지는 PureComponent &amp; React.memo에 대해 알게 되었습니다.<br />
state나 props의 데이터가 변경 되지 않는 경우, 컴포넌트를 업데이트 하지 않아도 된다면 PureComponent나 React.memo를 사용하여 불필요한 수행을 줄일 수 있습니다.</p>

<h3 id="참고사이트">참고사이트</h3>

<p><a href="https://reactjs.org/docs/react-api.html#reactmemo">https://reactjs.org/docs/react-api.html#reactmemo</a><br />
<a href="https://ui.toast.com/weekly-pick/ko_20190731">https://ui.toast.com/weekly-pick/ko_20190731</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="React.memo" /><category term="memo" /><category term="PureComponent" /><summary type="html"><![CDATA[리액트 성능개선, React.memo 현명하게 사용하기]]></summary></entry><entry><title type="html">리액트 Hooks : useRef()</title><link href="http://localhost:4000/react/post26/" rel="alternate" type="text/html" title="리액트 Hooks : useRef()" /><published>2022-08-21T00:00:00+09:00</published><updated>2022-08-21T00:00:00+09:00</updated><id>http://localhost:4000/react/post26</id><content type="html" xml:base="http://localhost:4000/react/post26/"><![CDATA[<h3 id="️-useref-언제-사용할까">✔️ useRef, 언제 사용할까?</h3>

<p><code class="language-plaintext highlighter-rouge">useRef</code>는 크게 <strong>DOM 요소에 접근</strong>하는 경우, <strong>렌더링을 일으키지 않고 값을 변경</strong>시키는 두 가지 경우에 사용합니다.<br />
<br />
Vanilla JavaScript로 특정 DOM 요소에 접근하고자 하는 경우에는 <code class="language-plaintext highlighter-rouge">getElementById</code> 혹은 <code class="language-plaintext highlighter-rouge">querySelector</code> 같은 함수를 사용하였는데요. 리액트에서는 useRef라는 Hook를 사용하거나, 콜백 함수 혹은 React.createRef(클래스형 컴포넌트) 라는 함수를 사용합니다.</p>

<h3 id="️-useref-사용법">✔️ useRef 사용법</h3>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>useRef를 사용하기 위해서는 가장 먼저 react에서 useRef를 import 받아야 합니다.</p>

<p>기본 형태는 아래와 같습니다.</p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">//Ref 객체 생성</span>
<span class="kd">const</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">();</span>

<span class="c1">//current -&gt; DOM 가리킴. 아래의 경우는 &lt;input /&gt; 태그 DOM을 가리킨다.</span>
<span class="nx">nameInput</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>

<span class="c1">//접근하고 싶은 태그에는 ref 속성을 준다.</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">name</span><span class="p">=</span><span class="s">"lime"</span>
  <span class="na">placeholder</span><span class="p">=</span><span class="s">"focus!!"</span>
  <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onChange</span><span class="si">}</span>
  <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span>
  <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">nameInput</span><span class="si">}</span>
<span class="p">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-예시">✔️ 예시</h3>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">Sample</span><span class="p">()</span> <span class="p">{</span>

  <span class="kd">const</span> <span class="nx">nameInput</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">();</span>

  <span class="c1">//포커스 잡기</span>
  <span class="kd">const</span> <span class="nx">onFocus</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">nameInput</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">input</span> <span class="na">name</span><span class="p">=</span><span class="s">"lime"</span>
            <span class="na">placeholder</span><span class="p">=</span><span class="s">"focus!!"</span>
            <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onChange</span><span class="si">}</span>
            <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span>
            <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">nameInput</span><span class="si">}</span>
          <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onFocus</span><span class="si">}</span><span class="p">&gt;</span>포커스<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 예시는 useRef를 사용하여 포커스 버튼을 눌렀을 때 해당 input에 포커스가 잡히도록 한 것입니다.</p>

<h3 id="️-변수-관리">✔️ 변수 관리</h3>

<p>useState를 사용하여 변수를 상태값으로 관리하게 되면 값이 바뀔 때 마다 컴포넌트가 렌더링 되는데, useRef를 사용하여 변수를 관리한다면 컴포넌트가 리렌더링 되지 않습니다. 또한 상태로 관리하는 경우에는 상태를 바꾸는 함수를 호출한 다음 렌더링 하고 나서 업데이트 된 상태를 조회할 수 있는데, useRef를 사용하는 경우에는 설정 후 바로 조회하는 것이 가능합니다. 더불어 useRef로 만들어진 변수는 React의 전역 저장소에 저장되기 때문에 함수를 다시 호출하더라도 마지막으로 업데이트한 current 값이 유지됩니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">nextId</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">onCreate</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">nextId</span><span class="p">.</span><span class="nx">current</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>해당 기능이 유용하게 사용되는 경우</p>

<ul>
  <li>setTimeout, setInterval을 통해 만들어진 id</li>
  <li>scroll 위치</li>
  <li>외부 라이브러리를 사용하여 생성된 인스턴스</li>
</ul>

<h4 id="today-i-learned">Today I Learned</h4>

<p>React에서 특정 DOM을 가리키는 경우에 <code class="language-plaintext highlighter-rouge">useRef</code>를 사용한다는 것과, 어떤 식으로 사용되는지에 대해 알게되었습니다 :)</p>

<h4 id="참고사이트">참고사이트</h4>
<p><a href="https://react.vlpt.us/basic/10-useRef.html">https://react.vlpt.us/basic/10-useRef.html</a><br />
<a href="https://ko.reactjs.org/docs/hooks-reference.html#useref">https://ko.reactjs.org/docs/hooks-reference.html#useref</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="React" /><category term="useRef" /><category term="Hooks" /><category term="리액트" /><summary type="html"><![CDATA[useRef로 DOM 요소에 접근하기]]></summary></entry><entry><title type="html">jekyll 실행 시 ‘require’: cannot load such file – webrick (LoadError) 오류 해결 방법</title><link href="http://localhost:4000/blog/post25/" rel="alternate" type="text/html" title="jekyll 실행 시 ‘require’: cannot load such file – webrick (LoadError) 오류 해결 방법" /><published>2022-08-20T00:00:00+09:00</published><updated>2022-08-20T00:00:00+09:00</updated><id>http://localhost:4000/blog/post25</id><content type="html" xml:base="http://localhost:4000/blog/post25/"><![CDATA[<h3 id="문제-상황">문제 상황</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>                    <span class="nt">------------------------------------------------</span>
      Jekyll 4.2.0   Please append <span class="sb">`</span><span class="nt">--trace</span><span class="sb">`</span> to the <span class="sb">`</span>serve<span class="sb">`</span> <span class="nb">command
                     </span><span class="k">for </span>any additional information or backtrace.
                    <span class="nt">------------------------------------------------</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>bundle exec jekyll serve 명령어를 사용하여 로컬에서 지킬 서버를 구동하려고 할 때 위와 같은 오류가 발생하는 경우가 있습니다.</p>

<h3 id="해결-방법">해결 방법</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ bundle add webrick
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이런 경우에는 bundle add webrick으로 Webrick를 추가하면 오류 없이 실행됩니다. 
위와 같은 오류가 발생하는 이유는 ruby 3.x 버전 부터 webrick이 bundle로 제공되지 않기 때문입니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Blog" /><category term="지킬" /><category term="jekyll" /><category term="blog" /><summary type="html"><![CDATA[jekyll blog - 'require': cannot load such file -- webrick (LoadError)]]></summary></entry><entry><title type="html">jekyll serve 할 때 install missing gem executables with ‘bundle install’ 오류 해결 방법</title><link href="http://localhost:4000/blog/post24/" rel="alternate" type="text/html" title="jekyll serve 할 때 install missing gem executables with ‘bundle install’ 오류 해결 방법" /><published>2022-08-19T00:00:00+09:00</published><updated>2022-08-19T00:00:00+09:00</updated><id>http://localhost:4000/blog/post24</id><content type="html" xml:base="http://localhost:4000/blog/post24/"><![CDATA[<p>오늘은 jekyll 블로그를 serve할 때 install missing gem executables with ‘bundle install’ 오류가 나는 경우 해결하는 방법에 대한 포스팅입니다 :)</p>

<h3 id="문제-상황">문제 상황</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>bundle <span class="nb">exec </span>jekyll serve

bundler: <span class="nb">command </span>not found: jekyll
Install missing gem executables with <span class="sb">`</span>bundle <span class="nb">install</span><span class="sb">`</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="해결-방법">해결 방법</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>$ rm .bundle/config
$ gem update --system 
$ gem update bundler
$ bundle install
</pre></td></tr></tbody></table></code></pre></div></div>

<p>손상된 번들을 제거하고 위와 같은 작업을 하면 오류가 해결됩니다 😆</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Blog" /><category term="지킬" /><category term="jekyll" /><category term="blog" /><summary type="html"><![CDATA[jekyll blog - install missing gem executables with 'bundle install']]></summary></entry><entry><title type="html">Git 커밋 되돌리기 (Reset, Revert)</title><link href="http://localhost:4000/git/post23/" rel="alternate" type="text/html" title="Git 커밋 되돌리기 (Reset, Revert)" /><published>2022-08-16T00:00:00+09:00</published><updated>2022-08-16T00:00:00+09:00</updated><id>http://localhost:4000/git/post23</id><content type="html" xml:base="http://localhost:4000/git/post23/"><![CDATA[<p>Git을 사용하여 작업하다 보면 이미 커밋한 내용을 되돌리고 싶은 경우가 종종 생기곤 합니다. Git에서 이력을 되돌리기 위해서 사용하는 것 중에서 대표적인 것 2개가 바로 Reset과 Revert인데요. 둘 다 과거로 되돌린다는 의미라 언뜻 보기엔 비슷해 보이는데 과연 차이점은 무엇일까요?</p>

<h3 id="reset과-revert의-차이점">Reset과 Revert의 차이점</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Reset</code>: 과거 커밋으로 되돌린다. (이력 남기지 않음)</li>
  <li><code class="language-plaintext highlighter-rouge">Revert</code> : 과거로 돌아간다. (이력 남김)</li>
</ul>

<p>쉽게 말해서 <code class="language-plaintext highlighter-rouge">Reset</code>은 시계를 다시 맞추듯이 이력을 그 당시로 되돌리는 것이고, <code class="language-plaintext highlighter-rouge">Revert</code>는 이전 커밋 내역을 남겨둔 채 새로운 커밋으로 과거로 돌아가게 되는 것을 의미하는 것입니다.</p>

<h3 id="사용법">사용법</h3>

<h4 id="reset">Reset</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>git reset &lt;옵션&gt; &lt;돌아가고 싶은 커밋&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="옵션">옵션</h5>

<ul>
  <li>hard</li>
</ul>

<p>돌아가고자 하는 이력 이후의 모든 내용을 지웁니다. (working directory에서 삭제)</p>

<ul>
  <li>soft</li>
</ul>

<p>이력을 되돌린 후, 이후의 내용을 지우지 않고 다시 커밋할 수 있는 상태로 남겨놓습니다. (staging area로 돌려놓기 - commit 전 상태로)</p>

<ul>
  <li>mixed (default)</li>
</ul>

<p>변경된 내용은 남아있지만 인덱스가 초기화 되기 때문에 커밋을 하려면 다시 추가해야합니다. (working directory로 돌려놓기 - add 전 상태로)</p>

<ul>
  <li>HEAD~취소할 커밋 수</li>
</ul>

<p>현재로부터 원하는 만큼의 커밋을 취소할 수 있습니다.</p>

<ul>
  <li>HEAD^</li>
</ul>

<p>가장 최근 커밋이 취소됩니다. (default: mixed)</p>

<h4 id="revert">Revert</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>git revert &lt;되돌릴 커밋&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Revert 사용 시 되돌릴 커밋의 [commit ID]를 적어주면 됩니다.</p>

<h3 id="언제-무엇을-사용하면-좋을까">언제 무엇을 사용하면 좋을까?</h3>

<p><code class="language-plaintext highlighter-rouge">Reset</code> 같은 경우는 커밋 히스토리를 깔끔하게 정리할 수 있다는 장점이 있기 때문에 혼자 작업하는 경우에 쓰기 좋고, <code class="language-plaintext highlighter-rouge">Revert</code> 는 왜 돌아갔는지에 대한 기록이 가능하기 때문에 협업할 때 사용하기 좀 더 좋을 수 있습니다.</p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Git" /><category term="reset" /><category term="revert" /><category term="git" /><summary type="html"><![CDATA[Reset과 Revert 알고 사용하기]]></summary></entry><entry><title type="html">Antd Table 컴포넌트 column render</title><link href="http://localhost:4000/web/post22/" rel="alternate" type="text/html" title="Antd Table 컴포넌트 column render" /><published>2022-08-15T00:00:00+09:00</published><updated>2022-08-15T00:00:00+09:00</updated><id>http://localhost:4000/web/post22</id><content type="html" xml:base="http://localhost:4000/web/post22/"><![CDATA[<h3 id="antd-table-column-render">AntD Table column render</h3>

<p>AntD를 사용하면서 multi line으로 데이터를 표시하거나, 조건에 맞게 데이터를 표시하는 경우 등 렌더링이 필요한 경우에 render 옵션을 활용하면 쉽게 원하는대로 표현할 수 있습니다.</p>

<h3 id="render-옵션">render 옵션</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// render 옵션은 Array.map()처럼 작동합니다.</span>
<span class="nx">render</span><span class="p">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="c1">// text: name의 data [String]</span>
<span class="c1">// row: 하나의 row data [Object]</span>
<span class="c1">// index: row index [Number]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="사용하기">사용하기</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">월</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">month</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">month</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// render: (text) =&gt; &lt;a&gt;{text}&lt;/a&gt;,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">전력 소비량</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">energy1</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">energy1</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">권장 소비량 대비 초과 %</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dataIndex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">percent</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">percent</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">align</span><span class="p">:</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">render</span><span class="p">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;&gt;</span>
          <span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">style</span><span class="p">=&gt;</span><span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span><span class="si">}</span>%<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
          <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">h3</span> <span class="na">style</span><span class="p">=&gt;</span><span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">percent</span><span class="si">}</span>%<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
          <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>
      <span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="결과">결과</h3>

<p><img width="664" alt="image" src="https://user-images.githubusercontent.com/95404736/184610941-2f59da62-1dcd-461d-8da2-e8e66c40addd.png" /></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>]]></content><author><name>LIME</name><email>ilimes1307@gmail.com</email></author><category term="Web" /><category term="웹개발" /><category term="antd" /><category term="ant design" /><summary type="html"><![CDATA[앤트디자인 테이블 컴포넌트 사용]]></summary></entry></feed>