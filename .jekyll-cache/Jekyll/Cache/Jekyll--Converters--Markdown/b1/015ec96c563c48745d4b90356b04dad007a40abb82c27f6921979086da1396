I" <p>MySQL(MariaDB)는 기본적으로 로컬에서만 접속할 수 있도록 설정되어 있습니다. 그래서 외부에서 DB에 접속하고자 하는 경우에는 반드시 접근 허용을 해주어야 합니다.</p>

<h3 id="️-접근-권한-확인">✔️ 접근 권한 확인</h3>

<p>해당 오류가 났다는 것은 접근 권한이 없다는 것을 의미하는 것이라 권한 확인은 생략하고 넘어가도 되지만 그래도 한번 확인해보도록 하겠습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>select Host,User,plugin,authentication_string FROM mysql.user;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>DB 접속 후 위 명령어를 입력하면 접근 권한이 어떻게 되어있는지 확인할 수 있습니다. localhost만 보인다면 접근권한이 로컬만 허용되어 있는 것입니다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">PureComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Lime</span> <span class="kd">extends</span> <span class="nx">PureComponent</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">count</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">};</span>
  <span class="nx">counter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
      <span class="na">count</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">,</span> <span class="c1">// 값이 변경되지는 않으나, setState는 작성한다</span>
    <span class="p">});</span>
  <span class="p">}</span>
  <span class="nx">componentDidUpdate</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// 컴포넌트가 업데이트되면 값을 출력한다.</span>
  <span class="p">}</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">counter</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>counterButton<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Lime</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="️-reactmemo">✔️ React.memo</h3>

<ul>
  <li>React.memo는 함수형 컴포넌트에서 PureComponent와 같은 기능을 수행합니다.</li>
  <li>공식 문서를 확인해보면 pureComponent에는 <code class="language-plaintext highlighter-rouge">shouldComponenetUpdate</code> 함수가, React.memo에는 <code class="language-plaintext highlighter-rouge">areEqual</code> 함수가 구현되어 있어서 변화가 없을 때 다시 렌더링 하지 않는 것을 알 수 있습니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Lime</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
   <span class="p">...</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Lime</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>React.memo 사용법은 매우 간단합니다. 위 처럼 감싸주기만 하면 됩니다 :)</li>
  <li>기본 동작은 얕은 비교이며 깊은 비교의 경우에는 아래 사용 방법을 참고하시면 됩니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">areEqual</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
  nextProp가 prevProps와 동일한 값을 가지면 true를 반환하고, 그렇지 않다면 false를 반환
  */</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">,</span> <span class="nx">areEqual</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>[React공식문서] :
areEqual 함수는 props들이 서로 같으면 true를 반환하고, props들이 서로 다르면 false를 반환합니다. 이것은 shouldComponentUpdate와 정반대의 동작입니다.</li>
</ul>

<h3 id="today-i-learned">Today I Learned</h3>

<p>React 성능 개선을 위해 사용되어지는 PureComponent &amp; React.memo에 대해 알게 되었습니다.<br />
state나 props의 데이터가 변경 되지 않는 경우, 컴포넌트를 업데이트 하지 않아도 된다면 PureComponent나 React.memo를 사용하여 불필요한 수행을 줄일 수 있습니다.</p>

<h3 id="참고사이트">참고사이트</h3>

<p><a href="https://reactjs.org/docs/react-api.html#reactmemo">https://reactjs.org/docs/react-api.html#reactmemo</a><br />
<a href="https://ui.toast.com/weekly-pick/ko_20190731">https://ui.toast.com/weekly-pick/ko_20190731</a></p>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>
:ET