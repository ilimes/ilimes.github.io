I"U<h2 id="memoization-이란">Memoization 이란?</h2>

<p><code class="language-plaintext highlighter-rouge">Memoization</code>은 프로그래밍 기법 중 하나로 기존에 수행한 연산의 결과값을 메모리에 저장해놓고 필요할 때 재사용하여 계산의 반복수행을 하지 않는 것입니다. 이런 기법을 사용하게 되면 중복 연산을 피할 수 있기 때문에 프로그램 실행 속도가 빨라지게 됩니다.</p>

<h2 id="usememo-란">useMemo() 란?</h2>

<p>리액트에서 함수형 컴포넌트는 <code class="language-plaintext highlighter-rouge">렌더링</code> -&gt; <code class="language-plaintext highlighter-rouge">Component 함수 호출</code> -&gt; <code class="language-plaintext highlighter-rouge">모든 내부 변수 초기화</code>의 순서를 거치게 됩니다. 이 때 무거운 연산을 하는 어떤 함수를 리렌더링이 될 때 마다 반복적으로 호출하게 된다면 효율성이 굉장히 떨어질 수 있는데요. 리액트에서 useMemo를 사용하면 <code class="language-plaintext highlighter-rouge">렌더링</code> -&gt; <code class="language-plaintext highlighter-rouge">Component 함수 호출</code> -&gt; <code class="language-plaintext highlighter-rouge">Memoize된 함수 재사용</code>의 순서를 거치게 됩니다. 이는 처음 계산된 결과값이 메모리에 저장되어서 컴포넌트가 리렌더링 될 때 계산된 결과값을 메모리에서 꺼내와서 재사용할 수 있는 것으로, 불필요한 연산을 없애고 성능을 더욱 최적화 할 수 있게 하는 것입니다. useMemo를 사용하게 되면 Memoization용 메모리가 필요하기 때문에 남용하는 것은 좋지 않습니다.</p>

<h2 id="usememo-사용-방법">useMemo 사용 방법</h2>

<ul>
  <li>import</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useMemo</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>리액트에서 useMemo를 사용하기 위해서는 가장 먼저 위와 같이 react에서 useMemo를 import 해야합니다.</p>

<ul>
  <li>기본 형태</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 첫 번째 인자 콜백함수</span>
<span class="c1">// 두 번째 인자 의존성배열</span>
<span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">calculate</span><span class="p">();</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">item</span><span class="p">]);</span>
</code></pre></div></div>

<p>useMemo의 기본 형태는 위와 같습니다.<br />
첫 번째 인자로는 콜백함수를, 두 번째로 인자로는 의존성배열을 받는데요. 두 번째 인자로 들어가는 배열 요소 값이 업데이트 될 때만 콜백함수를 다시 호출해서 연산하고, 값이 업데이트 되지 않으면 이전에 연산했던 값을 재사용하게 됩니다.</p>

<p>##</p>

<h2 id="today-i-learned">Today I Learned</h2>

<p>오늘은 리액트 Hooks 중에서 <code class="language-plaintext highlighter-rouge">useMemo</code>에 대해 공부했습니다.</p>

<h3 id="참고사이트">참고사이트</h3>

<ul>
  <li><a href="https://inpa.tistory.com/entry/AXIOS-%F0%9F%93%9A-%EC%84%A4%EC%B9%98-%EC%82%AC%EC%9A%A9">https://inpa.tistory.com/entry/AXIOS-%F0%9F%93%9A-%EC%84%A4%EC%B9%98-%EC%82%AC%EC%9A%A9</a></li>
  <li><a href="https://axios-http.com/kr/docs/intro">https://axios-http.com/kr/docs/intro</a></li>
</ul>

<p class="notice--success">🔔<strong>포스팅 공지</strong><br />
개인 공부 기록용 블로그 입니다.<br />
잘못된 부분이 있을 시 메일이나 댓글로 지적해주시면 감사드리겠습니다 :)</p>
:ET